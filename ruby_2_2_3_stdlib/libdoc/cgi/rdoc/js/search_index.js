var search_data = {"index":{"searchIndex":["cgi","cookie","html3","html4","html4fr","html4tr","html5","htmlextension","invalidencoding","queryextension","session","filestore","memorystore","nullstore","pstore","util","[]()","[]()","[]=()","a()","accept_charset()","accept_charset=()","base()","blockquote()","caption()","checkbox()","checkbox_group()","close()","close()","close()","close()","close()","delete()","delete()","delete()","delete()","delete()","escape()","escapeelement()","escapehtml()","escape_element()","escape_html()","file_field()","form()","h()","has_key?()","header()","hidden()","html()","http_header()","image_button()","img()","include?()","inspect()","key?()","keys()","multipart?()","multipart_form()","new()","new()","new()","new()","new()","new()","new()","out()","params=()","parse()","parse()","password_field()","popup_menu()","pretty()","print()","radio_button()","radio_group()","raw_cookie()","raw_cookie2()","reset()","restore()","restore()","restore()","restore()","rfc1123_date()","scrolling_list()","secure=()","submit()","text_field()","textarea()","to_s()","unescape()","unescapeelement()","unescapehtml()","unescape_element()","unescape_html()","update()","update()","update()","update()","update()","value()","value=()"],"longSearchIndex":["cgi","cgi::cookie","cgi::html3","cgi::html4","cgi::html4fr","cgi::html4tr","cgi::html5","cgi::htmlextension","cgi::invalidencoding","cgi::queryextension","cgi::session","cgi::session::filestore","cgi::session::memorystore","cgi::session::nullstore","cgi::session::pstore","cgi::util","cgi::queryextension#[]()","cgi::session#[]()","cgi::session#[]=()","cgi::htmlextension#a()","cgi::accept_charset()","cgi::accept_charset=()","cgi::htmlextension#base()","cgi::htmlextension#blockquote()","cgi::htmlextension#caption()","cgi::htmlextension#checkbox()","cgi::htmlextension#checkbox_group()","cgi::session#close()","cgi::session::filestore#close()","cgi::session::memorystore#close()","cgi::session::nullstore#close()","cgi::session::pstore#close()","cgi::session#delete()","cgi::session::filestore#delete()","cgi::session::memorystore#delete()","cgi::session::nullstore#delete()","cgi::session::pstore#delete()","cgi::util#escape()","cgi::util#escapeelement()","cgi::util#escapehtml()","cgi::util#escape_element()","cgi::util#escape_html()","cgi::htmlextension#file_field()","cgi::htmlextension#form()","cgi::util#h()","cgi::queryextension#has_key?()","cgi#header()","cgi::htmlextension#hidden()","cgi::htmlextension#html()","cgi#http_header()","cgi::htmlextension#image_button()","cgi::htmlextension#img()","cgi::queryextension#include?()","cgi::cookie#inspect()","cgi::queryextension#key?()","cgi::queryextension#keys()","cgi::queryextension#multipart?()","cgi::htmlextension#multipart_form()","cgi::new()","cgi::cookie::new()","cgi::session::new()","cgi::session::filestore::new()","cgi::session::memorystore::new()","cgi::session::nullstore::new()","cgi::session::pstore::new()","cgi#out()","cgi::queryextension#params=()","cgi::parse()","cgi::cookie::parse()","cgi::htmlextension#password_field()","cgi::htmlextension#popup_menu()","cgi::util#pretty()","cgi#print()","cgi::htmlextension#radio_button()","cgi::htmlextension#radio_group()","cgi::queryextension#raw_cookie()","cgi::queryextension#raw_cookie2()","cgi::htmlextension#reset()","cgi::session::filestore#restore()","cgi::session::memorystore#restore()","cgi::session::nullstore#restore()","cgi::session::pstore#restore()","cgi::util#rfc1123_date()","cgi::htmlextension#scrolling_list()","cgi::cookie#secure=()","cgi::htmlextension#submit()","cgi::htmlextension#text_field()","cgi::htmlextension#textarea()","cgi::cookie#to_s()","cgi::util#unescape()","cgi::util#unescapeelement()","cgi::util#unescapehtml()","cgi::util#unescape_element()","cgi::util#unescape_html()","cgi::session#update()","cgi::session::filestore#update()","cgi::session::memorystore#update()","cgi::session::nullstore#update()","cgi::session::pstore#update()","cgi::cookie#value()","cgi::cookie#value=()"],"info":[["CGI","","CGI.html","","<p>Overview\n<p>The Common Gateway Interface (CGI) is a simple protocol for passing an HTTP\nrequest from a web …\n"],["CGI::Cookie","","CGI/Cookie.html","","<p>Class representing an HTTP cookie.\n<p>In addition to its specific fields and methods, a Cookie instance is …\n"],["CGI::HTML3","","CGI/HTML3.html","",""],["CGI::HTML4","","CGI/HTML4.html","",""],["CGI::HTML4Fr","","CGI/HTML4Fr.html","",""],["CGI::HTML4Tr","","CGI/HTML4Tr.html","",""],["CGI::HTML5","","CGI/HTML5.html","",""],["CGI::HtmlExtension","","CGI/HtmlExtension.html","","<p>Mixin module providing HTML generation methods.\n<p>For example,\n\n<pre>cgi.a(&quot;http://www.example.com&quot;) { &quot;Example&quot; ...</pre>\n"],["CGI::InvalidEncoding","","CGI/InvalidEncoding.html","","<p>Exception raised when there is an invalid encoding detected\n"],["CGI::QueryExtension","","CGI/QueryExtension.html","","<p>Mixin module that provides the following:\n<p>Access to the CGI environment variables as methods.  See documentation …\n"],["CGI::Session","","CGI/Session.html","","<p>Overview\n<p>This file provides the CGI::Session class, which provides session support\nfor CGI scripts.   …\n"],["CGI::Session::FileStore","","CGI/Session/FileStore.html","","<p>File-based session storage class.\n<p>Implements session storage as a flat file of ‘key=value’ values. This …\n"],["CGI::Session::MemoryStore","","CGI/Session/MemoryStore.html","","<p>In-memory session storage class.\n<p>Implements session storage as a global in-memory hash.  Session data …\n"],["CGI::Session::NullStore","","CGI/Session/NullStore.html","","<p>Dummy session storage class.\n<p>Implements session storage place holder.  No actual storage will be done. …\n"],["CGI::Session::PStore","","CGI/Session/PStore.html","","<p>PStore-based session storage class.\n<p>This builds upon the top-level PStore class provided by the library …\n"],["CGI::Util","","CGI/Util.html","",""],["[]","CGI::QueryExtension","CGI/QueryExtension.html#method-i-5B-5D","(key)","<p>Get the value for the parameter with a given key.\n<p>If the parameter has multiple values, only the first …\n"],["[]","CGI::Session","CGI/Session.html#method-i-5B-5D","(key)","<p>Retrieve the session data for key <code>key</code>.\n"],["[]=","CGI::Session","CGI/Session.html#method-i-5B-5D-3D","(key, val)","<p>Set the session data for key <code>key</code>.\n"],["a","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-a","(href = \"\")","<p>Generate an Anchor element as a string.\n<p><code>href</code> can either be a string, giving the URL for the HREF\nattribute, ...\n"],["accept_charset","CGI","CGI.html#method-c-accept_charset","()","<p>Return the accept character set for all new CGI instances.\n"],["accept_charset=","CGI","CGI.html#method-c-accept_charset-3D","(accept_charset)","<p>Set the accept character set for all new CGI instances.\n"],["base","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-base","(href = \"\")","<p>Generate a Document Base URI element as a String.\n<p><code>href</code> can either by a string, giving the base URL for ...\n"],["blockquote","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-blockquote","(cite = {})","<p>Generate a BlockQuote element as a string.\n<p><code>cite</code> can either be a string, give the URI for the source of\n...\n"],["caption","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-caption","(align = {})","<p>Generate a Table Caption element as a string.\n<p><code>align</code> can be a string, giving the alignment of the caption ...\n"],["checkbox","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-checkbox","(name = \"\", value = nil, checked = nil)","<p>Generate a Checkbox Input element as a string.\n<p>The attributes of the element can be specified as three …\n"],["checkbox_group","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-checkbox_group","(name = \"\", *values)","<p>Generate a sequence of checkbox elements, as a String.\n<p>The checkboxes will all have the same <code>name</code> attribute. …\n"],["close","CGI::Session","CGI/Session.html#method-i-close","()","<p>Store session data on the server and close the session storage. For some\nsession storage types, this …\n"],["close","CGI::Session::FileStore","CGI/Session/FileStore.html#method-i-close","()","<p>Update and close the session’s FileStore file.\n"],["close","CGI::Session::MemoryStore","CGI/Session/MemoryStore.html#method-i-close","()","<p>Close session storage.\n<p>A no-op.\n"],["close","CGI::Session::NullStore","CGI/Session/NullStore.html#method-i-close","()","<p>Close session storage.\n<p>A no-op.\n"],["close","CGI::Session::PStore","CGI/Session/PStore.html#method-i-close","()","<p>Update and close the session’s PStore file.\n"],["delete","CGI::Session","CGI/Session.html#method-i-delete","()","<p>Delete the session from storage.  Also closes the storage.\n<p>Note that the session’s data is <em>not</em> automatically …\n"],["delete","CGI::Session::FileStore","CGI/Session/FileStore.html#method-i-delete","()","<p>Close and delete the session’s FileStore file.\n"],["delete","CGI::Session::MemoryStore","CGI/Session/MemoryStore.html#method-i-delete","()","<p>Delete the session state.\n"],["delete","CGI::Session::NullStore","CGI/Session/NullStore.html#method-i-delete","()","<p>Delete the session state.\n<p>A no-op.\n"],["delete","CGI::Session::PStore","CGI/Session/PStore.html#method-i-delete","()","<p>Close and delete the session’s PStore file.\n"],["escape","CGI::Util","CGI/Util.html#method-i-escape","(string)","<p>URL-encode a string.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">url_encoded_string</span> = <span class=\"ruby-constant\">CGI</span><span class=\"ruby-operator\">::</span><span class=\"ruby-identifier\">escape</span>(<span class=\"ruby-string\">&quot;'Stop!' said Fred&quot;</span>)\n   <span class=\"ruby-comment\"># =&gt; &quot;%27Stop%21%27+said+Fred&quot;</span>\n</pre>\n"],["escapeElement","CGI::Util","CGI/Util.html#method-i-escapeElement","(string, *elements)","<p>Escape only the tags of certain HTML elements in <code>string</code>.\n<p>Takes an element or elements or array of elements. …\n"],["escapeHTML","CGI::Util","CGI/Util.html#method-i-escapeHTML","(string)","<p>Escape special characters in HTML, namely &amp;&quot;&lt;&gt;\n\n<pre>CGI::escapeHTML('Usage: foo &quot;bar&quot; &lt;baz&gt;') ...</pre>\n"],["escape_element","CGI::Util","CGI/Util.html#method-i-escape_element","(string, *elements)","<p>Synonym for CGI::escapeElement(str)\n"],["escape_html","CGI::Util","CGI/Util.html#method-i-escape_html","(string)","<p>Synonym for CGI::escapeHTML(str)\n"],["file_field","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-file_field","(name = \"\", size = 20, maxlength = nil)","<p>Generate an File Upload Input element as a string.\n<p>The attributes of the element can be specified as three …\n"],["form","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-form","(method = \"post\", action = script_name, enctype = \"application/x-www-form-urlencoded\")","<p>Generate a Form element as a string.\n<p><code>method</code> should be either \"get\" or \"post\", and ...\n"],["h","CGI::Util","CGI/Util.html#method-i-h","(string)",""],["has_key?","CGI::QueryExtension","CGI/QueryExtension.html#method-i-has_key-3F","(*args)","<p>Returns true if a given query string parameter exists.\n"],["header","CGI","CGI.html#method-i-header","(options='text/html')","<p>This method is an alias for #http_header, when HTML5 tag maker is inactive.\n<p>NOTE: use #http_header to …\n"],["hidden","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-hidden","(name = \"\", value = nil)","<p>Generate a Hidden Input element as a string.\n<p>The attributes of the element can be specified as two arguments, …\n"],["html","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-html","(attributes = {})","<p>Generate a top-level HTML element as a string.\n<p>The attributes of the element are specified as a hash. …\n"],["http_header","CGI","CGI.html#method-i-http_header","(options='text/html')","<p>Create an HTTP header block as a string.\n<p>Includes the empty line that ends the header block.\n<p>content_type_string … &mdash; "],["image_button","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-image_button","(src = \"\", name = nil, alt = nil)","<p>Generate an Image Button Input element as a string.\n<p><code>src</code> is the URL of the image to use for the button. ...\n"],["img","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-img","(src = \"\", alt = \"\", width = nil, height = nil)","<p>Generate an Image element as a string.\n<p><code>src</code> is the URL of the image.  <code>alt</code> is the\nalternative text for the ...\n"],["include?","CGI::QueryExtension","CGI/QueryExtension.html#method-i-include-3F","(*args)",""],["inspect","CGI::Cookie","CGI/Cookie.html#method-i-inspect","()","<p>A summary of cookie string.\n"],["key?","CGI::QueryExtension","CGI/QueryExtension.html#method-i-key-3F","(*args)",""],["keys","CGI::QueryExtension","CGI/QueryExtension.html#method-i-keys","(*args)","<p>Return all query parameter names as an array of String.\n"],["multipart?","CGI::QueryExtension","CGI/QueryExtension.html#method-i-multipart-3F","()","<p>Returns whether the form contained multipart/form-data\n"],["multipart_form","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-multipart_form","(action = nil, enctype = \"multipart/form-data\")","<p>Generate a Form element with multipart encoding as a String.\n<p>Multipart encoding is used for forms that …\n"],["new","CGI","CGI.html#method-c-new","(options = {})","<p>Create a new CGI instance.\n<p>tag_maker &mdash; This is the same as using the <code>options_hash</code> form with the value\n<code>{</code> …\n"],["new","CGI::Cookie","CGI/Cookie.html#method-c-new","(name = \"\", *value)","<p>Create a new CGI::Cookie object.\n<p>name_string &mdash; The name of the cookie; in this form, there is no #domain …\n"],["new","CGI::Session","CGI/Session.html#method-c-new","(request, option={})","<p>Create a new CGI::Session object for <code>request</code>.\n<p><code>request</code> is an instance of the <code>CGI</code> class (see\ncgi.rb). <code>option</code> ...\n"],["new","CGI::Session::FileStore","CGI/Session/FileStore.html#method-c-new","(session, option={})","<p>Create a new FileStore instance.\n<p>This constructor is used internally by CGI::Session.  The user does not …\n"],["new","CGI::Session::MemoryStore","CGI/Session/MemoryStore.html#method-c-new","(session, option=nil)","<p>Create a new MemoryStore instance.\n<p><code>session</code> is the session this instance is associated with.\n<code>option</code> is ...\n"],["new","CGI::Session::NullStore","CGI/Session/NullStore.html#method-c-new","(session, option=nil)","<p>Create a new NullStore instance.\n<p><code>session</code> is the session this instance is associated with.\n<code>option</code> is a ...\n"],["new","CGI::Session::PStore","CGI/Session/PStore.html#method-c-new","(session, option={})","<p>Create a new CGI::Session::PStore instance\n<p>This constructor is used internally by CGI::Session.  The user …\n"],["out","CGI","CGI.html#method-i-out","(options = \"text/html\")","<p>Print an HTTP header and body to $DEFAULT_OUTPUT ($&gt;)\n<p>content_type_string &mdash; If a string is passed, it …\n"],["params=","CGI::QueryExtension","CGI/QueryExtension.html#method-i-params-3D","(hash)","<p>Set all the parameters.\n"],["parse","CGI","CGI.html#method-c-parse","(query)","<p>Parse an HTTP query string into a hash of key=&gt;value pairs.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">params</span> = <span class=\"ruby-constant\">CGI</span><span class=\"ruby-operator\">::</span><span class=\"ruby-identifier\">parse</span>(<span class=\"ruby-string\">&quot;query_string&quot;</span>)\n  <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["parse","CGI::Cookie","CGI/Cookie.html#method-c-parse","(raw_cookie)","<p>Parse a raw cookie string into a hash of cookie-name=&gt;Cookie pairs.\n\n<pre>cookies = CGI::Cookie.parse(&quot;raw_cookie_string&quot;) ...</pre>\n"],["password_field","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-password_field","(name = \"\", value = nil, size = 40, maxlength = nil)","<p>Generate a Password Input element as a string.\n<p><code>name</code> is the name of the input field.  <code>value</code> is\nits default ...\n"],["popup_menu","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-popup_menu","(name = \"\", *values)","<p>Generate a Select element as a string.\n<p><code>name</code> is the name of the element.  The <code>values</code> are\nthe options that ...\n"],["pretty","CGI::Util","CGI/Util.html#method-i-pretty","(string, shift = \" \")","<p>Prettify (indent) an HTML string.\n<p><code>string</code> is the HTML string to indent.  <code>shift</code> is\nthe indentation unit ...\n"],["print","CGI","CGI.html#method-i-print","(*options)","<p>Print an argument or list of arguments to the default output stream\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">cgi</span> = <span class=\"ruby-constant\">CGI</span>.<span class=\"ruby-identifier\">new</span>\n<span class=\"ruby-identifier\">cgi</span>.<span class=\"ruby-identifier\">print</span>    <span class=\"ruby-comment\"># default: ...</span>\n</pre>\n"],["radio_button","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-radio_button","(name = \"\", value = nil, checked = nil)","<p>Generates a radio-button Input element.\n<p><code>name</code> is the name of the input field.  <code>value</code> is\nthe value of the ...\n"],["radio_group","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-radio_group","(name = \"\", *values)","<p>Generate a sequence of radio button Input elements, as a String.\n<p>This works the same as #checkbox_group() …\n"],["raw_cookie","CGI::QueryExtension","CGI/QueryExtension.html#method-i-raw_cookie","()","<p>Get the raw cookies as a string.\n"],["raw_cookie2","CGI::QueryExtension","CGI/QueryExtension.html#method-i-raw_cookie2","()","<p>Get the raw RFC2965 cookies as a string.\n"],["reset","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-reset","(value = nil, name = nil)","<p>Generate a reset button Input element, as a String.\n<p>This resets the values on a form to their initial …\n"],["restore","CGI::Session::FileStore","CGI/Session/FileStore.html#method-i-restore","()","<p>Restore session state from the session’s FileStore file.\n<p>Returns the session state as a hash.\n"],["restore","CGI::Session::MemoryStore","CGI/Session/MemoryStore.html#method-i-restore","()","<p>Restore session state.\n<p>Returns session data as a hash.\n"],["restore","CGI::Session::NullStore","CGI/Session/NullStore.html#method-i-restore","()","<p>Restore (empty) session state.\n"],["restore","CGI::Session::PStore","CGI/Session/PStore.html#method-i-restore","()","<p>Restore session state from the session’s PStore file.\n<p>Returns the session state as a hash.\n"],["rfc1123_date","CGI::Util","CGI/Util.html#method-i-rfc1123_date","(time)","<p>Format a <code>Time</code> object as a String using the format specified by\nRFC 1123.\n\n<pre>CGI::rfc1123_date(Time.now)\n ...</pre>\n"],["scrolling_list","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-scrolling_list","(name = \"\", *values)",""],["secure=","CGI::Cookie","CGI/Cookie.html#method-i-secure-3D","(val)","<p>Set whether the Cookie is a secure cookie or not.\n<p><code>val</code> must be a boolean.\n"],["submit","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-submit","(value = nil, name = nil)","<p>Generate a submit button Input element, as a String.\n<p><code>value</code> is the text to display on the button.  <code>name</code>\n...\n"],["text_field","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-text_field","(name = \"\", value = nil, size = 40, maxlength = nil)","<p>Generate a text field Input element, as a String.\n<p><code>name</code> is the name of the input field.  <code>value</code> is\nits initial ...\n"],["textarea","CGI::HtmlExtension","CGI/HtmlExtension.html#method-i-textarea","(name = \"\", cols = 70, rows = 10)","<p>Generate a TextArea element, as a String.\n<p><code>name</code> is the name of the textarea.  <code>cols</code> is the\nnumber of columns ...\n"],["to_s","CGI::Cookie","CGI/Cookie.html#method-i-to_s","()","<p>Convert the Cookie to its string representation.\n"],["unescape","CGI::Util","CGI/Util.html#method-i-unescape","(string,encoding=@@accept_charset)","<p>URL-decode a string with encoding(optional).\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">string</span> = <span class=\"ruby-constant\">CGI</span><span class=\"ruby-operator\">::</span><span class=\"ruby-identifier\">unescape</span>(<span class=\"ruby-string\">&quot;%27Stop%21%27+said+Fred&quot;</span>)\n   <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["unescapeElement","CGI::Util","CGI/Util.html#method-i-unescapeElement","(string, *elements)","<p>Undo escaping such as that done by CGI::escapeElement()\n\n<pre>print CGI::unescapeElement(\n        CGI::escapeHTML('&lt;BR&gt;&lt;A ...</pre>\n"],["unescapeHTML","CGI::Util","CGI/Util.html#method-i-unescapeHTML","(string)","<p>Unescape a string that has been HTML-escaped\n\n<pre>CGI::unescapeHTML(&quot;Usage: foo &amp;quot;bar&amp;quot; &amp;lt;baz&amp;gt;&quot;) ...</pre>\n"],["unescape_element","CGI::Util","CGI/Util.html#method-i-unescape_element","(string, *elements)","<p>Synonym for CGI::unescapeElement(str)\n"],["unescape_html","CGI::Util","CGI/Util.html#method-i-unescape_html","(string)","<p>Synonym for CGI::unescapeHTML(str)\n"],["update","CGI::Session","CGI/Session.html#method-i-update","()","<p>Store session data on the server.  For some session storage types, this is\na no-op.\n"],["update","CGI::Session::FileStore","CGI/Session/FileStore.html#method-i-update","()","<p>Save session state to the session’s FileStore file.\n"],["update","CGI::Session::MemoryStore","CGI/Session/MemoryStore.html#method-i-update","()","<p>Update session state.\n<p>A no-op.\n"],["update","CGI::Session::NullStore","CGI/Session/NullStore.html#method-i-update","()","<p>Update session state.\n<p>A no-op.\n"],["update","CGI::Session::PStore","CGI/Session/PStore.html#method-i-update","()","<p>Save session state to the session’s PStore file.\n"],["value","CGI::Cookie","CGI/Cookie.html#method-i-value","()","<p>Returns the value or list of values for this cookie.\n"],["value=","CGI::Cookie","CGI/Cookie.html#method-i-value-3D","(val)","<p>Replaces the value of this cookie with a new value or list of values.\n"]]}}
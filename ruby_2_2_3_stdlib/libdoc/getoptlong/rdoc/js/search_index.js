var search_data = {"index":{"searchIndex":["getoptlong","ambiguousoption","error","invalidoption","missingargument","needlessargument","each()","each_option()","error_message()","get()","get_option()","new()","ordering=()","set_error()","set_options()","terminate()","terminated?()"],"longSearchIndex":["getoptlong","getoptlong::ambiguousoption","getoptlong::error","getoptlong::invalidoption","getoptlong::missingargument","getoptlong::needlessargument","getoptlong#each()","getoptlong#each_option()","getoptlong#error_message()","getoptlong#get()","getoptlong#get_option()","getoptlong::new()","getoptlong#ordering=()","getoptlong#set_error()","getoptlong#set_options()","getoptlong#terminate()","getoptlong#terminated?()"],"info":[["GetoptLong","","GetoptLong.html","","<p>The GetoptLong class allows you to parse command line options similarly to\nthe GNU getopt_long() C library …\n"],["GetoptLong::AmbiguousOption","","GetoptLong/AmbiguousOption.html","",""],["GetoptLong::Error","","GetoptLong/Error.html","","<p>Error types.\n"],["GetoptLong::InvalidOption","","GetoptLong/InvalidOption.html","",""],["GetoptLong::MissingArgument","","GetoptLong/MissingArgument.html","",""],["GetoptLong::NeedlessArgument","","GetoptLong/NeedlessArgument.html","",""],["each","GetoptLong","GetoptLong.html#method-i-each","()","<p>Iterator version of `get’.\n<p>The block is called repeatedly with two arguments: The first is the option\n…\n"],["each_option","GetoptLong","GetoptLong.html#method-i-each_option","()","<p>`each_option’ is an alias of `each’.\n"],["error_message","GetoptLong","GetoptLong.html#method-i-error_message","()","<p>Return the appropriate error message in POSIX-defined format. If no error\nhas occurred, returns nil. …\n"],["get","GetoptLong","GetoptLong.html#method-i-get","()","<p>Get next option name and its argument, as an Array of two elements.\n<p>The option name is always converted …\n"],["get_option","GetoptLong","GetoptLong.html#method-i-get_option","()","<p>`get_option’ is an alias of `get’.\n"],["new","GetoptLong","GetoptLong.html#method-c-new","(*arguments)","<p>Set up option processing.\n<p>The options to support are passed to new() as an array of arrays. Each\nsub-array …\n"],["ordering=","GetoptLong","GetoptLong.html#method-i-ordering-3D","(ordering)","<p>Set the handling of the ordering of options and arguments. A RuntimeError\nis raised if option processing …\n"],["set_error","GetoptLong","GetoptLong.html#method-i-set_error","(type, message)","<p>Set an error (a protected method).\n"],["set_options","GetoptLong","GetoptLong.html#method-i-set_options","(*arguments)","<p>Set options. Takes the same argument as GetoptLong.new.\n<p>Raises a RuntimeError if option processing has …\n"],["terminate","GetoptLong","GetoptLong.html#method-i-terminate","()","<p>Explicitly terminate option processing.\n"],["terminated?","GetoptLong","GetoptLong.html#method-i-terminated-3F","()","<p>Returns true if option processing has terminated, false otherwise.\n"]]}}
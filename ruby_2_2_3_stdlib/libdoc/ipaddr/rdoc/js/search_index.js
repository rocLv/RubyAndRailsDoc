var search_data = {"index":{"searchIndex":["ipaddr","addressfamilyerror","error","invalidaddresserror","invalidprefixerror","ipsocket","socket","&()","<<()","<=>()","==()","===()",">>()","eql?()","getaddress()","getaddress_orig()","hash()","hton()","include?()","inspect()","ip6_arpa()","ip6_int()","ipv4?()","ipv4_compat()","ipv4_compat?()","ipv4_mapped()","ipv4_mapped?()","ipv6?()","mask()","mask!()","native()","new()","new_ntoh()","ntop()","reverse()","set()","succ()","to_i()","to_range()","to_s()","to_string()","|()","~()"],"longSearchIndex":["ipaddr","ipaddr::addressfamilyerror","ipaddr::error","ipaddr::invalidaddresserror","ipaddr::invalidprefixerror","ipsocket","socket","ipaddr#&()","ipaddr#<<()","ipaddr#<=>()","ipaddr#==()","ipaddr#===()","ipaddr#>>()","ipaddr#eql?()","ipsocket::getaddress()","ipsocket::getaddress_orig()","ipaddr#hash()","ipaddr#hton()","ipaddr#include?()","ipaddr#inspect()","ipaddr#ip6_arpa()","ipaddr#ip6_int()","ipaddr#ipv4?()","ipaddr#ipv4_compat()","ipaddr#ipv4_compat?()","ipaddr#ipv4_mapped()","ipaddr#ipv4_mapped?()","ipaddr#ipv6?()","ipaddr#mask()","ipaddr#mask!()","ipaddr#native()","ipaddr::new()","ipaddr::new_ntoh()","ipaddr::ntop()","ipaddr#reverse()","ipaddr#set()","ipaddr#succ()","ipaddr#to_i()","ipaddr#to_range()","ipaddr#to_s()","ipaddr#to_string()","ipaddr#|()","ipaddr#~()"],"info":[["IPAddr","","IPAddr.html","","<p>IPAddr provides a set of methods to manipulate an IP address.  Both IPv4\nand IPv6 are supported.\n<p>Example …\n"],["IPAddr::AddressFamilyError","","IPAddr/AddressFamilyError.html","","<p>Raised when the address family is invalid such as an address with an\nunsupported family, an address with …\n"],["IPAddr::Error","","IPAddr/Error.html","","<p>Generic IPAddr related error. Exceptions raised in this class should\ninherit from Error.\n"],["IPAddr::InvalidAddressError","","IPAddr/InvalidAddressError.html","","<p>Raised when the provided IP address is an invalid address.\n"],["IPAddr::InvalidPrefixError","","IPAddr/InvalidPrefixError.html","","<p>Raised when the address is an invalid length.\n"],["IPSocket","","IPSocket.html","",""],["Socket","","Socket.html","",""],["&","IPAddr","IPAddr.html#method-i-26","(other)","<p>Returns a new ipaddr built by bitwise AND.\n"],["<<","IPAddr","IPAddr.html#method-i-3C-3C","(num)","<p>Returns a new ipaddr built by bitwise left shift.\n"],["<=>","IPAddr","IPAddr.html#method-i-3C-3D-3E","(other)","<p>Compares the ipaddr with another.\n"],["==","IPAddr","IPAddr.html#method-i-3D-3D","(other)","<p>Returns true if two ipaddrs are equal.\n"],["===","IPAddr","IPAddr.html#method-i-3D-3D-3D","(other)",""],[">>","IPAddr","IPAddr.html#method-i-3E-3E","(num)","<p>Returns a new ipaddr built by bitwise right-shift.\n"],["eql?","IPAddr","IPAddr.html#method-i-eql-3F","(other)","<p>Checks equality used by Hash.\n"],["getaddress","IPSocket","IPSocket.html#method-c-getaddress","(s)","<p>Returns a <code>String</code> based representation of a valid DNS hostname,\nIPv4 or IPv6 address.\n\n<pre>IPSocket.getaddress ...</pre>\n"],["getaddress_orig","IPSocket","IPSocket.html#method-c-getaddress_orig","(s)",""],["hash","IPAddr","IPAddr.html#method-i-hash","()","<p>Returns a hash value used by Hash, Set, and Array classes\n"],["hton","IPAddr","IPAddr.html#method-i-hton","()","<p>Returns a network byte ordered string form of the IP address.\n"],["include?","IPAddr","IPAddr.html#method-i-include-3F","(other)","<p>Returns true if the given ipaddr is in the range.\n<p>e.g.:\n\n<pre>require 'ipaddr'\nnet1 = IPAddr.new(&quot;192.168.2.0/24&quot;) ...</pre>\n"],["inspect","IPAddr","IPAddr.html#method-i-inspect","()","<p>Returns a string containing a human-readable representation of the ipaddr.\n(“#&lt;IPAddr: family:address/mask&gt;”) …\n"],["ip6_arpa","IPAddr","IPAddr.html#method-i-ip6_arpa","()","<p>Returns a string for DNS reverse lookup compatible with RFC3172.\n"],["ip6_int","IPAddr","IPAddr.html#method-i-ip6_int","()","<p>Returns a string for DNS reverse lookup compatible with RFC1886.\n"],["ipv4?","IPAddr","IPAddr.html#method-i-ipv4-3F","()","<p>Returns true if the ipaddr is an IPv4 address.\n"],["ipv4_compat","IPAddr","IPAddr.html#method-i-ipv4_compat","()","<p>Returns a new ipaddr built by converting the native IPv4 address into an\nIPv4-compatible IPv6 address. …\n"],["ipv4_compat?","IPAddr","IPAddr.html#method-i-ipv4_compat-3F","()","<p>Returns true if the ipaddr is an IPv4-compatible IPv6 address.\n"],["ipv4_mapped","IPAddr","IPAddr.html#method-i-ipv4_mapped","()","<p>Returns a new ipaddr built by converting the native IPv4 address into an\nIPv4-mapped IPv6 address.\n"],["ipv4_mapped?","IPAddr","IPAddr.html#method-i-ipv4_mapped-3F","()","<p>Returns true if the ipaddr is an IPv4-mapped IPv6 address.\n"],["ipv6?","IPAddr","IPAddr.html#method-i-ipv6-3F","()","<p>Returns true if the ipaddr is an IPv6 address.\n"],["mask","IPAddr","IPAddr.html#method-i-mask","(prefixlen)","<p>Returns a new ipaddr built by masking IP address with the given\nprefixlen/netmask. (e.g. 8, 64, “255.255.255.0”, …\n"],["mask!","IPAddr","IPAddr.html#method-i-mask-21","(mask)","<p>Set current netmask to given mask.\n"],["native","IPAddr","IPAddr.html#method-i-native","()","<p>Returns a new ipaddr built by converting the IPv6 address into a native\nIPv4 address.  If the IP address …\n"],["new","IPAddr","IPAddr.html#method-c-new","(addr = '::', family = Socket::AF_UNSPEC)","<p>Creates a new ipaddr object either from a human readable IP address\nrepresentation in string, or from …\n"],["new_ntoh","IPAddr","IPAddr.html#method-c-new_ntoh","(addr)","<p>Creates a new ipaddr containing the given network byte ordered string form\nof an IP address.\n"],["ntop","IPAddr","IPAddr.html#method-c-ntop","(addr)","<p>Convert a network byte ordered string form of an IP address into human\nreadable form.\n"],["reverse","IPAddr","IPAddr.html#method-i-reverse","()","<p>Returns a string for DNS reverse lookup.  It returns a string in RFC3172\nform for an IPv6 address.\n"],["set","IPAddr","IPAddr.html#method-i-set","(addr, *family)","<p>Set +@addr+, the internal stored ip address, to given <code>addr</code>.\nThe parameter <code>addr</code> is validated using the …\n"],["succ","IPAddr","IPAddr.html#method-i-succ","()","<p>Returns the successor to the ipaddr.\n"],["to_i","IPAddr","IPAddr.html#method-i-to_i","()","<p>Returns the integer representation of the ipaddr.\n"],["to_range","IPAddr","IPAddr.html#method-i-to_range","()","<p>Creates a Range object for the network address.\n"],["to_s","IPAddr","IPAddr.html#method-i-to_s","()","<p>Returns a string containing the IP address representation.\n"],["to_string","IPAddr","IPAddr.html#method-i-to_string","()","<p>Returns a string containing the IP address representation in canonical\nform.\n"],["|","IPAddr","IPAddr.html#method-i-7C","(other)","<p>Returns a new ipaddr built by bitwise OR.\n"],["~","IPAddr","IPAddr.html#method-i-7E","()","<p>Returns a new ipaddr built by bitwise negation.\n"]]}}
var search_data = {"index":{"searchIndex":["irb","abort","context","contextextender","extendcommand","changeworkspace","currentworkingworkspace","foreground","fork","help","irbcommand","jobs","kill","load","nop","popworkspace","pushworkspace","require","source","workspaces","extendcommandbundle","fileinputmethod","frame","inputmethod","inspector","irb","irbloader","jobmanager","loadabort","locale","encoding","methodextender","notifier","abstractnotifier","compositenotifier","levelednotifier","nomsgnotifier","outputmethod","readlineinputmethod","slex","node","stdioinputmethod","stdiooutputmethod","workspace","object","rubylex","rubytoken","tkerror","tkid","tknode","tkopasgn","tkop","tkunknownchar","tkval","token","xmp","stringinputmethod","<=>()","currentcontext()","jobmanager()","string()","__evaluate__()","__exit__()","_set_last_value()","bottom()","bottom()","change_workspace()","conf()","debug?()","debug_level=()","def_extend_command()","def_extend_command()","def_inspector()","def_notifier()","def_notifier()","def_post_proc()","def_pre_proc()","default_src_encoding()","delete()","encoding()","encoding()","encoding()","eof?()","eof?()","eof?()","eof?()","eval_history=()","eval_input()","evaluate()","exec_if()","exit()","extend_object()","file_input?()","filter_backtrace()","find()","format()","gets()","gets()","gets()","gets()","gets()","gets()","history_file()","history_file=()","home_workspace()","init()","initialize_tracer()","insert()","inspect()","inspect()","inspect?()","inspect_mode=()","inspect_value()","install_alias_method()","install_extend_commands()","install_extend_commands()","irb()","irb()","irb_abort()","irb_at_exit()","irb_context()","irb_exit()","irb_exit()","irb_level()","irb_load()","irb_load()","irb_require()","keys_with_inspector()","kill()","level=()","level_notifier=()","line()","line()","load()","load_file()","main()","main_irb()","main_thread()","math_mode=()","n_jobs()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_alias_name()","notify?()","notify?()","notify?()","parse_printf_format()","pop_workspace()","pp()","pp()","ppx()","ppx()","print()","print()","print()","print()","print_usage()","printf()","printf()","printf()","printn()","printn()","prompt_mode=()","prompting?()","push_workspace()","puts()","puts()","puts()","puts()","puts()","readable_after_eof?()","readable_after_eof?()","readable_after_eof?()","readline()","require()","save_history()","save_history=()","search()","sender()","set_last_value()","signal_handle()","signal_status()","source_file()","start()","suspend_context()","suspend_input_method()","suspend_name()","suspend_workspace()","switch()","thread()","top()","top()","toplevel_load()","trace_func()","use_loader()","use_loader=()","use_loader?()","use_readline=()","use_tracer=()","verbose?()","version()","workspaces()","xmp()"],"longSearchIndex":["irb","irb::abort","irb::context","irb::contextextender","irb::extendcommand","irb::extendcommand::changeworkspace","irb::extendcommand::currentworkingworkspace","irb::extendcommand::foreground","irb::extendcommand::fork","irb::extendcommand::help","irb::extendcommand::irbcommand","irb::extendcommand::jobs","irb::extendcommand::kill","irb::extendcommand::load","irb::extendcommand::nop","irb::extendcommand::popworkspace","irb::extendcommand::pushworkspace","irb::extendcommand::require","irb::extendcommand::source","irb::extendcommand::workspaces","irb::extendcommandbundle","irb::fileinputmethod","irb::frame","irb::inputmethod","irb::inspector","irb::irb","irb::irbloader","irb::jobmanager","irb::loadabort","irb::locale","irb::locale::encoding","irb::methodextender","irb::notifier","irb::notifier::abstractnotifier","irb::notifier::compositenotifier","irb::notifier::levelednotifier","irb::notifier::nomsgnotifier","irb::outputmethod","irb::readlineinputmethod","irb::slex","irb::slex::node","irb::stdioinputmethod","irb::stdiooutputmethod","irb::workspace","object","rubylex","rubytoken","rubytoken::tkerror","rubytoken::tkid","rubytoken::tknode","rubytoken::tkopasgn","rubytoken::tkop","rubytoken::tkunknownchar","rubytoken::tkval","rubytoken::token","xmp","xmp::stringinputmethod","irb::notifier::levelednotifier#<=>()","irb::currentcontext()","irb::jobmanager()","irb::locale#string()","irb::workspace#__evaluate__()","irb::context#__exit__()","irb::context#_set_last_value()","irb::frame#bottom()","irb::frame::bottom()","irb::context#change_workspace()","irb::conf()","irb::context#debug?()","irb::context#debug_level=()","irb::contextextender::def_extend_command()","irb::extendcommandbundle::def_extend_command()","irb::inspector::def_inspector()","irb::notifier::def_notifier()","irb::notifier::compositenotifier#def_notifier()","irb::methodextender#def_post_proc()","irb::methodextender#def_pre_proc()","object#default_src_encoding()","irb::jobmanager#delete()","irb::fileinputmethod#encoding()","irb::readlineinputmethod#encoding()","irb::stdioinputmethod#encoding()","irb::fileinputmethod#eof?()","irb::readlineinputmethod#eof?()","irb::stdioinputmethod#eof?()","xmp::stringinputmethod#eof?()","irb::context#eval_history=()","irb::irb#eval_input()","irb::workspace#evaluate()","irb::notifier::abstractnotifier#exec_if()","irb::context#exit()","irb::extendcommandbundle::extend_object()","irb::context#file_input?()","irb::workspace#filter_backtrace()","irb::locale#find()","irb::locale#format()","irb::fileinputmethod#gets()","irb::inputmethod#gets()","irb::locale#gets()","irb::readlineinputmethod#gets()","irb::stdioinputmethod#gets()","xmp::stringinputmethod#gets()","irb::context#history_file()","irb::context#history_file=()","irb::context#home_workspace()","irb::inspector#init()","irb::initialize_tracer()","irb::jobmanager#insert()","irb::irb#inspect()","irb::jobmanager#inspect()","irb::context#inspect?()","irb::context#inspect_mode=()","irb::inspector#inspect_value()","irb::extendcommandbundle#install_alias_method()","irb::contextextender::install_extend_commands()","irb::extendcommandbundle::install_extend_commands()","irb::irb()","irb::jobmanager#irb()","irb::irb_abort()","irb::irb_at_exit()","irb::extendcommandbundle#irb_context()","irb::irb_exit()","irb::extendcommandbundle#irb_exit()","irb::context#irb_level()","irb::extendcommandbundle#irb_load()","irb::irbloader#irb_load()","irb::extendcommandbundle#irb_require()","irb::inspector::keys_with_inspector()","irb::jobmanager#kill()","irb::notifier::compositenotifier#level=()","irb::notifier::compositenotifier#level_notifier=()","irb::readlineinputmethod#line()","irb::stdioinputmethod#line()","irb::locale#load()","irb::irbloader#load_file()","irb::context#main()","irb::jobmanager#main_irb()","irb::jobmanager#main_thread()","irb::context#math_mode=()","irb::jobmanager#n_jobs()","irb::context::new()","irb::fileinputmethod::new()","irb::frame::new()","irb::inputmethod::new()","irb::inspector::new()","irb::irb::new()","irb::jobmanager::new()","irb::locale::new()","irb::notifier::abstractnotifier::new()","irb::notifier::compositenotifier::new()","irb::notifier::levelednotifier::new()","irb::notifier::nomsgnotifier::new()","irb::readlineinputmethod::new()","irb::stdioinputmethod::new()","irb::workspace::new()","xmp::new()","xmp::stringinputmethod::new()","irb::methodextender#new_alias_name()","irb::notifier::abstractnotifier#notify?()","irb::notifier::levelednotifier#notify?()","irb::notifier::nomsgnotifier#notify?()","irb::outputmethod#parse_printf_format()","irb::context#pop_workspace()","irb::notifier::abstractnotifier#pp()","irb::outputmethod#pp()","irb::notifier::abstractnotifier#ppx()","irb::outputmethod#ppx()","irb::locale#print()","irb::notifier::abstractnotifier#print()","irb::outputmethod#print()","irb::stdiooutputmethod#print()","irb::print_usage()","irb::locale#printf()","irb::notifier::abstractnotifier#printf()","irb::outputmethod#printf()","irb::notifier::abstractnotifier#printn()","irb::outputmethod#printn()","irb::context#prompt_mode=()","irb::context#prompting?()","irb::context#push_workspace()","irb::locale#puts()","irb::notifier::abstractnotifier#puts()","irb::outputmethod#puts()","xmp#puts()","xmp::stringinputmethod#puts()","irb::inputmethod#readable_after_eof?()","irb::readlineinputmethod#readable_after_eof?()","irb::stdioinputmethod#readable_after_eof?()","irb::locale#readline()","irb::locale#require()","irb::context#save_history()","irb::context#save_history=()","irb::jobmanager#search()","irb::frame::sender()","irb::context#set_last_value()","irb::irb#signal_handle()","irb::irb#signal_status()","irb::irbloader#source_file()","irb::start()","irb::irb#suspend_context()","irb::irb#suspend_input_method()","irb::irb#suspend_name()","irb::irb#suspend_workspace()","irb::jobmanager#switch()","irb::jobmanager#thread()","irb::frame::top()","irb::frame#top()","irb::locale#toplevel_load()","irb::frame#trace_func()","irb::context#use_loader()","irb::context#use_loader=()","irb::context#use_loader?()","irb::context#use_readline=()","irb::context#use_tracer=()","irb::context#verbose?()","irb::version()","irb::context#workspaces()","object#xmp()"],"info":[["IRB","","IRB.html","","<p>IRB stands for “interactive Ruby” and is a tool to interactively execute\nRuby expressions read …\n"],["IRB::Abort","","IRB/Abort.html","","<p>An exception raised by IRB.irb_abort\n"],["IRB::Context","","IRB/Context.html","","<p>A class that wraps the current state of the irb session, including the\nconfiguration of IRB.conf.\n"],["IRB::ContextExtender","","IRB/ContextExtender.html","","<p>Extends methods for the Context module\n"],["IRB::ExtendCommand","","IRB/ExtendCommand.html","",""],["IRB::ExtendCommand::ChangeWorkspace","","IRB/ExtendCommand/ChangeWorkspace.html","",""],["IRB::ExtendCommand::CurrentWorkingWorkspace","","IRB/ExtendCommand/CurrentWorkingWorkspace.html","",""],["IRB::ExtendCommand::Foreground","","IRB/ExtendCommand/Foreground.html","",""],["IRB::ExtendCommand::Fork","","IRB/ExtendCommand/Fork.html","",""],["IRB::ExtendCommand::Help","","IRB/ExtendCommand/Help.html","",""],["IRB::ExtendCommand::IrbCommand","","IRB/ExtendCommand/IrbCommand.html","",""],["IRB::ExtendCommand::Jobs","","IRB/ExtendCommand/Jobs.html","",""],["IRB::ExtendCommand::Kill","","IRB/ExtendCommand/Kill.html","",""],["IRB::ExtendCommand::Load","","IRB/ExtendCommand/Load.html","",""],["IRB::ExtendCommand::Nop","","IRB/ExtendCommand/Nop.html","",""],["IRB::ExtendCommand::PopWorkspace","","IRB/ExtendCommand/PopWorkspace.html","",""],["IRB::ExtendCommand::PushWorkspace","","IRB/ExtendCommand/PushWorkspace.html","",""],["IRB::ExtendCommand::Require","","IRB/ExtendCommand/Require.html","",""],["IRB::ExtendCommand::Source","","IRB/ExtendCommand/Source.html","",""],["IRB::ExtendCommand::Workspaces","","IRB/ExtendCommand/Workspaces.html","",""],["IRB::ExtendCommandBundle","","IRB/ExtendCommandBundle.html","","<p>Installs the default irb extensions command bundle.\n"],["IRB::FileInputMethod","","IRB/FileInputMethod.html","","<p>Use a File for IO with irb, see InputMethod\n"],["IRB::Frame","","IRB/Frame.html","",""],["IRB::InputMethod","","IRB/InputMethod.html","",""],["IRB::Inspector","","IRB/Inspector.html","","<p>An irb inspector\n<p>In order to create your own custom inspector there are two things you\nshould be aware …\n"],["IRB::Irb","","IRB/Irb.html","",""],["IRB::IrbLoader","","IRB/IrbLoader.html","","<p>Provides a few commands for loading files within an irb session.\n<p>See ExtendCommandBundle for more information. …\n"],["IRB::JobManager","","IRB/JobManager.html","",""],["IRB::LoadAbort","","IRB/LoadAbort.html","","<p>Raised in the event of an exception in a file loaded from an Irb session\n"],["IRB::Locale","","IRB/Locale.html","",""],["IRB::Locale::Encoding","","IRB/Locale/Encoding.html","",""],["IRB::MethodExtender","","IRB/MethodExtender.html","","<p>A convenience module for extending Ruby methods.\n"],["IRB::Notifier","","IRB/Notifier.html","","<p>An output formatter used internally by the lexer.\n"],["IRB::Notifier::AbstractNotifier","","IRB/Notifier/AbstractNotifier.html","","<p>An abstract class, or superclass, for CompositeNotifier and LeveledNotifier\nto inherit. It provides several …\n"],["IRB::Notifier::CompositeNotifier","","IRB/Notifier/CompositeNotifier.html","","<p>A class that can be used to create a group of notifier objects with the\nintent of representing a leveled …\n"],["IRB::Notifier::LeveledNotifier","","IRB/Notifier/LeveledNotifier.html","","<p>A leveled notifier is comparable to the composite group from\nCompositeNotifier#notifiers.\n"],["IRB::Notifier::NoMsgNotifier","","IRB/Notifier/NoMsgNotifier.html","","<p>NoMsgNotifier is a LeveledNotifier that’s used as the default notifier when\ncreating a new CompositeNotifier …\n"],["IRB::OutputMethod","","IRB/OutputMethod.html","","<p>An abstract output class for IO in irb. This is mainly used internally by\nIRB::Notifier. You can define …\n"],["IRB::ReadlineInputMethod","","IRB/ReadlineInputMethod.html","",""],["IRB::SLex","","IRB/SLex.html","",""],["IRB::SLex::Node","","IRB/SLex/Node.html","",""],["IRB::StdioInputMethod","","IRB/StdioInputMethod.html","",""],["IRB::StdioOutputMethod","","IRB/StdioOutputMethod.html","","<p>A standard output printer\n"],["IRB::WorkSpace","","IRB/WorkSpace.html","",""],["Object","","Object.html","",""],["RubyLex","","RubyLex.html","",""],["RubyToken","","RubyToken.html","",""],["RubyToken::TkError","","RubyToken/TkError.html","",""],["RubyToken::TkId","","RubyToken/TkId.html","",""],["RubyToken::TkNode","","RubyToken/TkNode.html","",""],["RubyToken::TkOPASGN","","RubyToken/TkOPASGN.html","",""],["RubyToken::TkOp","","RubyToken/TkOp.html","",""],["RubyToken::TkUnknownChar","","RubyToken/TkUnknownChar.html","",""],["RubyToken::TkVal","","RubyToken/TkVal.html","",""],["RubyToken::Token","","RubyToken/Token.html","",""],["XMP","","XMP.html","","<p>An example printer for irb.\n<p>It’s much like the standard library PrettyPrint, that shows the value of\neach …\n"],["XMP::StringInputMethod","","XMP/StringInputMethod.html","","<p>A custom InputMethod class used by XMP for evaluating string io.\n"],["<=>","IRB::Notifier::LeveledNotifier","IRB/Notifier/LeveledNotifier.html#method-i-3C-3D-3E","(other)","<p>Compares the level of this notifier object with the given\n<code>other</code> notifier.\n<p>See the Comparable module for …\n"],["CurrentContext","IRB","IRB.html#method-c-CurrentContext","()","<p>The current IRB::Context of the session, see IRB.conf\n\n<pre>irb\nirb(main):001:0&gt; IRB.CurrentContext.irb_name ...</pre>\n"],["JobManager","IRB","IRB.html#method-c-JobManager","()","<p>The current JobManager in the session\n"],["String","IRB::Locale","IRB/Locale.html#method-i-String","(mes)",""],["__evaluate__","IRB::WorkSpace","IRB/WorkSpace.html#method-i-__evaluate__","(context, statements, file = nil, line = nil)",""],["__exit__","IRB::Context","IRB/Context.html#method-i-__exit__","(ret = 0)",""],["_set_last_value","IRB::Context","IRB/Context.html#method-i-_set_last_value","(value)","<p>See #set_last_value\n"],["bottom","IRB::Frame","IRB/Frame.html#method-i-bottom","(n = 0)","<p>Returns the <code>n</code> number of frames on the call stack from the\nfirst frame initialized.\n<p>Raises FrameOverflow …\n"],["bottom","IRB::Frame","IRB/Frame.html#method-c-bottom","(n = 0)","<p>Convenience method for Frame#bottom\n"],["change_workspace","IRB::Context","IRB/Context.html#method-i-change_workspace","(*_main)","<p>Changes the current workspace to given object or binding.\n<p>If the optional argument is omitted, the workspace …\n"],["conf","IRB","IRB.html#method-c-conf","()","<p>Displays current configuration.\n<p>Modifing the configuration is achieved by sending a message to IRB.conf …\n"],["debug?","IRB::Context","IRB/Context.html#method-i-debug-3F","()","<p>Whether or not debug mode is enabled, see #debug_level=.\n"],["debug_level=","IRB::Context","IRB/Context.html#method-i-debug_level-3D","(value)","<p>Sets the debug level of irb\n<p>Can also be set using the <code>--irb_debug</code> command line option.\n<p>See IRB@Command+line+options …\n"],["def_extend_command","IRB::ContextExtender","IRB/ContextExtender.html#method-c-def_extend_command","(cmd_name, load_file, *aliases)","<p>Evaluate the given <code>command</code> from the given\n<code>load_file</code> on the Context module.\n<p>Will also define any given …\n"],["def_extend_command","IRB::ExtendCommandBundle","IRB/ExtendCommandBundle.html#method-c-def_extend_command","(cmd_name, cmd_class, load_file = nil, *aliases)","<p>Evaluate the given <code>cmd_name</code> on the given\n<code>cmd_class</code> Class.\n<p>Will also define any given <code>aliases</code> for the method. …\n"],["def_inspector","IRB::Inspector","IRB/Inspector.html#method-c-def_inspector","(key, arg=nil, &block)","<p>Example\n\n<pre>Inspector.def_inspector(key, init_p=nil){|v| v.inspect}\nInspector.def_inspector([key1,..], init_p=nil){|v| ...</pre>\n"],["def_notifier","IRB::Notifier","IRB/Notifier.html#method-c-def_notifier","(prefix = \"\", output_method = StdioOutputMethod.new)","<p>Define a new Notifier output source, returning a new CompositeNotifier with\nthe given <code>prefix</code> and <code>output_method</code> …\n"],["def_notifier","IRB::Notifier::CompositeNotifier","IRB/Notifier/CompositeNotifier.html#method-i-def_notifier","(level, prefix = \"\")","<p>Creates a new LeveledNotifier in the composite #notifiers group.\n<p>The given <code>prefix</code> will be assigned to …\n"],["def_post_proc","IRB::MethodExtender","IRB/MethodExtender.html#method-i-def_post_proc","(base_method, extend_method)","<p>Extends the given <code>base_method</code> with a postfix call to the given\n<code>extend_method</code>.\n"],["def_pre_proc","IRB::MethodExtender","IRB/MethodExtender.html#method-i-def_pre_proc","(base_method, extend_method)","<p>Extends the given <code>base_method</code> with a prefix call to the given\n<code>extend_method</code>.\n"],["default_src_encoding","Object","Object.html#method-i-default_src_encoding","()","<p>DO NOT WRITE ANY MAGIC COMMENT HERE.\n"],["delete","IRB::JobManager","IRB/JobManager.html#method-i-delete","(key)","<p>Deletes the job at the given <code>key</code>.\n"],["encoding","IRB::FileInputMethod","IRB/FileInputMethod.html#method-i-encoding","()","<p>The external encoding for standard input.\n"],["encoding","IRB::ReadlineInputMethod","IRB/ReadlineInputMethod.html#method-i-encoding","()","<p>The external encoding for standard input.\n"],["encoding","IRB::StdioInputMethod","IRB/StdioInputMethod.html#method-i-encoding","()","<p>The external encoding for standard input.\n"],["eof?","IRB::FileInputMethod","IRB/FileInputMethod.html#method-i-eof-3F","()","<p>Whether the end of this input method has been reached, returns\n<code>true</code> if there is no more data to read. …\n"],["eof?","IRB::ReadlineInputMethod","IRB/ReadlineInputMethod.html#method-i-eof-3F","()","<p>Whether the end of this input method has been reached, returns\n<code>true</code> if there is no more data to read. …\n"],["eof?","IRB::StdioInputMethod","IRB/StdioInputMethod.html#method-i-eof-3F","()","<p>Whether the end of this input method has been reached, returns\n<code>true</code> if there is no more data to read. …\n"],["eof?","XMP::StringInputMethod","XMP/StringInputMethod.html#method-i-eof-3F","()","<p>Whether there are any expressions left in this printer.\n"],["eval_history=","IRB::Context","IRB/Context.html#method-i-eval_history-3D","(no)","<p>Sets command result history limit.\n<p><code>no</code> is an Integer or <code>nil</code>.\n<p>Returns <code>no</code> of history items if greater than …\n"],["eval_input","IRB::Irb","IRB/Irb.html#method-i-eval_input","()","<p>Evaluates input for this session.\n"],["evaluate","IRB::WorkSpace","IRB/WorkSpace.html#method-i-evaluate","(context, statements, file = nil, line = nil)","<p>Evaluate the context of this workspace and use the Tracer library to output\nthe exact lines of code are …\n"],["exec_if","IRB::Notifier::AbstractNotifier","IRB/Notifier/AbstractNotifier.html#method-i-exec_if","()","<p>Execute the given block if notifications are enabled.\n"],["exit","IRB::Context","IRB/Context.html#method-i-exit","(ret = 0)","<p>Exits the current session, see IRB.irb_exit\n"],["extend_object","IRB::ExtendCommandBundle","IRB/ExtendCommandBundle.html#method-c-extend_object","(obj)","<p>Installs alias methods for the default irb commands on the given object\nusing #install_alias_method. …\n"],["file_input?","IRB::Context","IRB/Context.html#method-i-file_input-3F","()","<p>Whether #io uses a File for the <code>input_method</code> passed when\ncreating the current context, see ::new\n"],["filter_backtrace","IRB::WorkSpace","IRB/WorkSpace.html#method-i-filter_backtrace","(bt)","<p>error message manipulator\n"],["find","IRB::Locale","IRB/Locale.html#method-i-find","(file , paths = $:)",""],["format","IRB::Locale","IRB/Locale.html#method-i-format","(*opts)",""],["gets","IRB::FileInputMethod","IRB/FileInputMethod.html#method-i-gets","()","<p>Reads the next line from this input method.\n<p>See IO#gets for more information.\n"],["gets","IRB::InputMethod","IRB/InputMethod.html#method-i-gets","()","<p>Reads the next line from this input method.\n<p>See IO#gets for more information.\n"],["gets","IRB::Locale","IRB/Locale.html#method-i-gets","(*rs)",""],["gets","IRB::ReadlineInputMethod","IRB/ReadlineInputMethod.html#method-i-gets","()","<p>Reads the next line from this input method.\n<p>See IO#gets for more information.\n"],["gets","IRB::StdioInputMethod","IRB/StdioInputMethod.html#method-i-gets","()","<p>Reads the next line from this input method.\n<p>See IO#gets for more information.\n"],["gets","XMP::StringInputMethod","XMP/StringInputMethod.html#method-i-gets","()","<p>Reads the next expression from this printer.\n<p>See IO#gets for more information.\n"],["history_file","IRB::Context","IRB/Context.html#method-i-history_file","()","<p>A copy of the default <code>IRB.conf[:HISTORY_FILE]</code>\n"],["history_file=","IRB::Context","IRB/Context.html#method-i-history_file-3D","(hist)","<p>Set <code>IRB.conf[:HISTORY_FILE]</code> to the given <code>hist</code>.\n"],["home_workspace","IRB::Context","IRB/Context.html#method-i-home_workspace","()","<p>Inherited from <code>TOPLEVEL_BINDING</code>.\n"],["init","IRB::Inspector","IRB/Inspector.html#method-i-init","()","<p>Proc to call when the inspector is activated, good for requiring dependent\nlibraries.\n"],["initialize_tracer","IRB","IRB.html#method-c-initialize_tracer","()","<p>initialize tracing function\n"],["insert","IRB::JobManager","IRB/JobManager.html#method-i-insert","(irb)","<p>Add the given <code>irb</code> session to the jobs Array.\n"],["inspect","IRB::Irb","IRB/Irb.html#method-i-inspect","()","<p>Outputs the local variables to this current session, including\n#signal_status and #context, using IRB::Locale …\n"],["inspect","IRB::JobManager","IRB/JobManager.html#method-i-inspect","()","<p>Outputs a list of jobs, see the irb command <code>irb_jobs</code>, or\n<code>jobs</code>.\n"],["inspect?","IRB::Context","IRB/Context.html#method-i-inspect-3F","()","<p>Whether #inspect_mode is set or not, see #inspect_mode= for more detail.\n"],["inspect_mode=","IRB::Context","IRB/Context.html#method-i-inspect_mode-3D","(opt)","<p>Specifies the inspect mode with <code>opt</code>:\n<p>true &mdash; display <code>inspect</code>\n<p>false &mdash; display <code>to_s</code>\n"],["inspect_value","IRB::Inspector","IRB/Inspector.html#method-i-inspect_value","(v)","<p>Proc to call when the input is evaluated and output in irb.\n"],["install_alias_method","IRB::ExtendCommandBundle","IRB/ExtendCommandBundle.html#method-i-install_alias_method","(to, from, override = NO_OVERRIDE)","<p>Installs alias methods for the default irb commands, see\n::install_extend_commands.\n"],["install_extend_commands","IRB::ContextExtender","IRB/ContextExtender.html#method-c-install_extend_commands","()","<p>Installs the default context extensions as irb commands:\n<p>Context#eval_history= &mdash; <code>irb/ext/history.rb</code>\n<p>Context#use_tracer= … &mdash; "],["install_extend_commands","IRB::ExtendCommandBundle","IRB/ExtendCommandBundle.html#method-c-install_extend_commands","()","<p>Installs the default irb commands:\n<p>irb_current_working_workspace &mdash; Context#main\n<p>irb_change_workspace &mdash; Context#change_workspace …\n"],["irb","IRB","IRB.html#method-c-irb","(file = nil, *main)","<p>Creates a new IRB session, see Irb.new.\n<p>The optional <code>file</code> argument is given to Context.new, along with\n…\n"],["irb","IRB::JobManager","IRB/JobManager.html#method-i-irb","(key)","<p>Returns the irb session for the given <code>key</code> object, see #search\nfor more information.\n"],["irb_abort","IRB","IRB.html#method-c-irb_abort","(irb, exception = Abort)","<p>Aborts then interrupts irb.\n<p>Will raise an Abort exception, or the given <code>exception</code>.\n"],["irb_at_exit","IRB","IRB.html#method-c-irb_at_exit","()","<p>Calls each event hook of IRB.conf when the current session quits.\n"],["irb_context","IRB::ExtendCommandBundle","IRB/ExtendCommandBundle.html#method-i-irb_context","()","<p>Displays current configuration.\n<p>Modifing the configuration is achieved by sending a message to IRB.conf …\n"],["irb_exit","IRB","IRB.html#method-c-irb_exit","(irb, ret)","<p>Quits irb\n"],["irb_exit","IRB::ExtendCommandBundle","IRB/ExtendCommandBundle.html#method-i-irb_exit","(ret = 0)","<p>Quits the current irb context\n<p><code>ret</code> is the optional signal or message to send to Context#exit\n<p>Same as <code>IRB.CurrentContext.exit</code> …\n"],["irb_level","IRB::Context","IRB/Context.html#method-i-irb_level","()","<p>Size of the current WorkSpace stack\n"],["irb_load","IRB::ExtendCommandBundle","IRB/ExtendCommandBundle.html#method-i-irb_load","(*opts, &b)","<p>Loads the given file similarly to Kernel#load, see IrbLoader#irb_load\n"],["irb_load","IRB::IrbLoader","IRB/IrbLoader.html#method-i-irb_load","(fn, priv = nil)","<p>Loads the given file similarly to Kernel#load\n"],["irb_require","IRB::ExtendCommandBundle","IRB/ExtendCommandBundle.html#method-i-irb_require","(*opts, &b)","<p>Loads the given file similarly to Kernel#require\n"],["keys_with_inspector","IRB::Inspector","IRB/Inspector.html#method-c-keys_with_inspector","(inspector)","<p>Determines the inspector to use where <code>inspector</code> is one of the\nkeys passed during inspector definition. …\n"],["kill","IRB::JobManager","IRB/JobManager.html#method-i-kill","(*keys)","<p>Terminates the irb sessions specified by the given <code>keys</code>.\n<p>Raises an IrbAlreadyDead exception if one of …\n"],["level=","IRB::Notifier::CompositeNotifier","IRB/Notifier/CompositeNotifier.html#method-i-level-3D","(value)",""],["level_notifier=","IRB::Notifier::CompositeNotifier","IRB/Notifier/CompositeNotifier.html#method-i-level_notifier-3D","(value)","<p>Sets the leveled notifier for this object.\n<p>When the given <code>value</code> is an instance of AbstractNotifier,\n#level_notifier …\n"],["line","IRB::ReadlineInputMethod","IRB/ReadlineInputMethod.html#method-i-line","(line_no)","<p>Returns the current line number for #io.\n<p>#line counts the number of times #gets is called.\n<p>See IO#lineno …\n"],["line","IRB::StdioInputMethod","IRB/StdioInputMethod.html#method-i-line","(line_no)","<p>Returns the current line number for #io.\n<p>#line counts the number of times #gets is called.\n<p>See IO#lineno …\n"],["load","IRB::Locale","IRB/Locale.html#method-i-load","(file, priv=nil)",""],["load_file","IRB::IrbLoader","IRB/IrbLoader.html#method-i-load_file","(path, priv = nil)","<p>Loads the given file in the current session’s context and evaluates it.\n<p>See Irb#suspend_input_method for …\n"],["main","IRB::Context","IRB/Context.html#method-i-main","()","<p>The top-level workspace, see WorkSpace#main\n"],["main_irb","IRB::JobManager","IRB/JobManager.html#method-i-main_irb","()","<p>Returns the top level irb session.\n"],["main_thread","IRB::JobManager","IRB/JobManager.html#method-i-main_thread","()","<p>Returns the top level thread.\n"],["math_mode=","IRB::Context","IRB/Context.html#method-i-math_mode-3D","(opt)","<p>Sets bc mode, which loads <code>lib/mathn.rb</code> so fractions or matrix\nare available.\n<p>Also available as the <code>-m</code> …\n"],["n_jobs","IRB::JobManager","IRB/JobManager.html#method-i-n_jobs","()","<p>The total number of irb sessions, used to set <code>irb_name</code> of the\ncurrent Context.\n"],["new","IRB::Context","IRB/Context.html#method-c-new","(irb, workspace = nil, input_method = nil, output_method = nil)","<p>Creates a new IRB context.\n<p>The optional <code>input_method</code> argument:\n<p>nil &mdash; uses stdin or Readline\n"],["new","IRB::FileInputMethod","IRB/FileInputMethod.html#method-c-new","(file)","<p>Creates a new input method object\n"],["new","IRB::Frame","IRB/Frame.html#method-c-new","()","<p>Creates a new stack frame\n"],["new","IRB::InputMethod","IRB/InputMethod.html#method-c-new","(file = STDIN_FILE_NAME)","<p>Creates a new input method object\n"],["new","IRB::Inspector","IRB/Inspector.html#method-c-new","(inspect_proc, init_proc = nil)","<p>Creates a new inspector object, using the given <code>inspect_proc</code>\nwhen output return values in irb.\n"],["new","IRB::Irb","IRB/Irb.html#method-c-new","(workspace = nil, input_method = nil, output_method = nil)","<p>Creates a new irb session\n"],["new","IRB::JobManager","IRB/JobManager.html#method-c-new","()","<p>Creates a new JobManager object\n"],["new","IRB::Locale","IRB/Locale.html#method-c-new","(locale = nil)",""],["new","IRB::Notifier::AbstractNotifier","IRB/Notifier/AbstractNotifier.html#method-c-new","(prefix, base_notifier)","<p>Creates a new Notifier object\n"],["new","IRB::Notifier::CompositeNotifier","IRB/Notifier/CompositeNotifier.html#method-c-new","(prefix, base_notifier)","<p>Create a new composite notifier object with the given <code>prefix</code>,\nand <code>base_notifier</code> to use for output.\n"],["new","IRB::Notifier::LeveledNotifier","IRB/Notifier/LeveledNotifier.html#method-c-new","(base, level, prefix)","<p>Create a new leveled notifier with the given <code>base</code>, and\n<code>prefix</code> to send to AbstractNotifier.new\n<p>The given …\n"],["new","IRB::Notifier::NoMsgNotifier","IRB/Notifier/NoMsgNotifier.html#method-c-new","()","<p>Creates a new notifier that should not be used to output messages.\n"],["new","IRB::ReadlineInputMethod","IRB/ReadlineInputMethod.html#method-c-new","()","<p>Creates a new input method object using Readline\n"],["new","IRB::StdioInputMethod","IRB/StdioInputMethod.html#method-c-new","()","<p>Creates a new input method object\n"],["new","IRB::WorkSpace","IRB/WorkSpace.html#method-c-new","(*main)","<p>Creates a new workspace.\n<p>set self to main if specified, otherwise inherit main from\nTOPLEVEL_BINDING. …\n"],["new","XMP","XMP.html#method-c-new","(bind = nil)","<p>Creates a new XMP object.\n<p>The top-level binding or, optional <code>bind</code> parameter will be used\nwhen creating …\n"],["new","XMP::StringInputMethod","XMP/StringInputMethod.html#method-c-new","()","<p>Creates a new StringInputMethod object\n"],["new_alias_name","IRB::MethodExtender","IRB/MethodExtender.html#method-i-new_alias_name","(name, prefix = \"__alias_of__\", postfix = \"__\")","<p>Returns a unique method name to use as an alias for the given\n<code>name</code>.\n<p>Usually returns <code>#{prefix}#{name}#{postfix}&lt;num&gt;</code> …\n"],["notify?","IRB::Notifier::AbstractNotifier","IRB/Notifier/AbstractNotifier.html#method-i-notify-3F","()","<p>A wrapper method used to determine whether notifications are enabled.\n<p>Defaults to <code>true</code>.\n"],["notify?","IRB::Notifier::LeveledNotifier","IRB/Notifier/LeveledNotifier.html#method-i-notify-3F","()","<p>Whether to output messages to the output method, depending on the level of\nthis notifier object.\n"],["notify?","IRB::Notifier::NoMsgNotifier","IRB/Notifier/NoMsgNotifier.html#method-i-notify-3F","()","<p>Ensures notifications are ignored, see AbstractNotifier#notify? for more\ninformation.\n"],["parse_printf_format","IRB::OutputMethod","IRB/OutputMethod.html#method-i-parse_printf_format","(format, opts)","<p>Returns an array of the given <code>format</code> and <code>opts</code> to\nbe used by Kernel#sprintf, if there was a successful …\n"],["pop_workspace","IRB::Context","IRB/Context.html#method-i-pop_workspace","()","<p>Removes the last element from the current #workspaces stack and returns it,\nor <code>nil</code> if the current workspace …\n"],["pp","IRB::Notifier::AbstractNotifier","IRB/Notifier/AbstractNotifier.html#method-i-pp","(*objs)","<p>Same as #ppx, except it uses the #prefix given during object\ninitialization. See OutputMethod#ppx for …\n"],["pp","IRB::OutputMethod","IRB/OutputMethod.html#method-i-pp","(*objs)","<p>Prints the given <code>objs</code> calling Object#inspect on each.\n<p>See #puts for more detail.\n"],["ppx","IRB::Notifier::AbstractNotifier","IRB/Notifier/AbstractNotifier.html#method-i-ppx","(prefix, *objs)","<p>Same as #pp, except it concatenates the given <code>prefix</code> with the\n#prefix given during object initialization. …\n"],["ppx","IRB::OutputMethod","IRB/OutputMethod.html#method-i-ppx","(prefix, *objs)","<p>Prints the given <code>objs</code> calling Object#inspect on each and\nappending the given <code>prefix</code>.\n<p>See #puts for more …\n"],["print","IRB::Locale","IRB/Locale.html#method-i-print","(*opts)",""],["print","IRB::Notifier::AbstractNotifier","IRB/Notifier/AbstractNotifier.html#method-i-print","(*opts)","<p>See OutputMethod#print for more detail.\n"],["print","IRB::OutputMethod","IRB/OutputMethod.html#method-i-print","(*opts)","<p>Open this method to implement your own output method, raises a\nNotImplementedError if you don’t define …\n"],["print","IRB::StdioOutputMethod","IRB/StdioOutputMethod.html#method-i-print","(*opts)","<p>Prints the given <code>opts</code> to standard output, see IO#print for\nmore information.\n"],["print_usage","IRB","IRB.html#method-c-print_usage","()","<p>Outputs the irb help message, see IRB@Command+line+options.\n"],["printf","IRB::Locale","IRB/Locale.html#method-i-printf","(*opts)",""],["printf","IRB::Notifier::AbstractNotifier","IRB/Notifier/AbstractNotifier.html#method-i-printf","(format, *opts)","<p>See OutputMethod#printf for more detail.\n"],["printf","IRB::OutputMethod","IRB/OutputMethod.html#method-i-printf","(format, *opts)","<p>Extends IO#printf to format the given <code>opts</code> for Kernel#sprintf\nusing #parse_printf_format\n"],["printn","IRB::Notifier::AbstractNotifier","IRB/Notifier/AbstractNotifier.html#method-i-printn","(*opts)","<p>See OutputMethod#printn for more detail.\n"],["printn","IRB::OutputMethod","IRB/OutputMethod.html#method-i-printn","(*opts)","<p>Prints the given <code>opts</code>, with a newline delimiter.\n"],["prompt_mode=","IRB::Context","IRB/Context.html#method-i-prompt_mode-3D","(mode)","<p>Sets the <code>mode</code> of the prompt in this context.\n<p>See IRB@Customizing+the+IRB+Prompt for more information. …\n"],["prompting?","IRB::Context","IRB/Context.html#method-i-prompting-3F","()","<p>Whether #verbose? is <code>true</code>, and <code>input_method</code> is\neither StdioInputMethod or ReadlineInputMethod, see #io …\n"],["push_workspace","IRB::Context","IRB/Context.html#method-i-push_workspace","(*_main)","<p>Creates a new workspace with the given object or binding, and appends it\nonto the current #workspaces …\n"],["puts","IRB::Locale","IRB/Locale.html#method-i-puts","(*opts)",""],["puts","IRB::Notifier::AbstractNotifier","IRB/Notifier/AbstractNotifier.html#method-i-puts","(*objs)","<p>See OutputMethod#puts for more detail.\n"],["puts","IRB::OutputMethod","IRB/OutputMethod.html#method-i-puts","(*objs)","<p>Calls #print on each element in the given <code>objs</code>, followed by a\nnewline character.\n"],["puts","XMP","XMP.html#method-i-puts","(exps)","<p>Evaluates the given <code>exps</code>, for example:\n\n<pre>require 'irb/xmp'\nx = XMP.new\n\nx.puts '{:a =&gt; 1, :b =&gt; 2, :c =&gt; ...</pre>\n"],["puts","XMP::StringInputMethod","XMP/StringInputMethod.html#method-i-puts","(exps)","<p>Concatenates all expressions in this printer, separated by newlines.\n<p>An Encoding::CompatibilityError is …\n"],["readable_after_eof?","IRB::InputMethod","IRB/InputMethod.html#method-i-readable_after_eof-3F","()","<p>Whether this input method is still readable when there is no more data to\nread.\n<p>See IO#eof for more information. …\n"],["readable_after_eof?","IRB::ReadlineInputMethod","IRB/ReadlineInputMethod.html#method-i-readable_after_eof-3F","()","<p>Whether this input method is still readable when there is no more data to\nread.\n<p>See IO#eof for more information. …\n"],["readable_after_eof?","IRB::StdioInputMethod","IRB/StdioInputMethod.html#method-i-readable_after_eof-3F","()","<p>Whether this input method is still readable when there is no more data to\nread.\n<p>See IO#eof for more information. …\n"],["readline","IRB::Locale","IRB/Locale.html#method-i-readline","(*rs)",""],["require","IRB::Locale","IRB/Locale.html#method-i-require","(file, priv = nil)",""],["save_history","IRB::Context","IRB/Context.html#method-i-save_history","()","<p>A copy of the default <code>IRB.conf[:SAVE_HISTORY]</code>\n"],["save_history=","IRB::Context","IRB/Context.html#method-i-save_history-3D","(val)","<p>Sets <code>IRB.conf[:SAVE_HISTORY]</code> to the given <code>val</code> and\ncalls #init_save_history with this context.\n<p>Will store …\n"],["search","IRB::JobManager","IRB/JobManager.html#method-i-search","(key)","<p>Returns the associated job for the given <code>key</code>.\n<p>If given an Integer, it will return the <code>key</code> index for the …\n"],["sender","IRB::Frame","IRB/Frame.html#method-c-sender","()","<p>Returns the binding context of the caller from the last frame initialized\n"],["set_last_value","IRB::Context","IRB/Context.html#method-i-set_last_value","(value)","<p>Sets the return value from the last statement evaluated in this context to\n#last_value.\n"],["signal_handle","IRB::Irb","IRB/Irb.html#method-i-signal_handle","()","<p>Handler for the signal SIGINT, see Kernel#trap for more information.\n"],["signal_status","IRB::Irb","IRB/Irb.html#method-i-signal_status","(status)","<p>Evaluates the given block using the given <code>status</code>.\n"],["source_file","IRB::IrbLoader","IRB/IrbLoader.html#method-i-source_file","(path)","<p>Loads a given file in the current session and displays the source lines\n<p>See Irb#suspend_input_method for …\n"],["start","IRB","IRB.html#method-c-start","(ap_path = nil)","<p>Initializes IRB and creates a new Irb.irb object at the\n<code>TOPLEVEL_BINDING</code>\n"],["suspend_context","IRB::Irb","IRB/Irb.html#method-i-suspend_context","(context)","<p>Evaluates the given block using the given <code>context</code> as the\nContext.\n"],["suspend_input_method","IRB::Irb","IRB/Irb.html#method-i-suspend_input_method","(input_method)","<p>Evaluates the given block using the given <code>input_method</code> as the\nContext#io.\n<p>Used by the irb commands <code>source</code> …\n"],["suspend_name","IRB::Irb","IRB/Irb.html#method-i-suspend_name","(path = nil, name = nil)","<p>Evaluates the given block using the given <code>path</code> as the\nContext#irb_path and <code>name</code> as the Context#irb_name …\n"],["suspend_workspace","IRB::Irb","IRB/Irb.html#method-i-suspend_workspace","(workspace)","<p>Evaluates the given block using the given <code>workspace</code> as the\nContext#workspace.\n<p>Used by the irb command …\n"],["switch","IRB::JobManager","IRB/JobManager.html#method-i-switch","(key)","<p>Changes the current active irb session to the given <code>key</code> in the\njobs Array.\n<p>Raises an IrbAlreadyDead exception …\n"],["thread","IRB::JobManager","IRB/JobManager.html#method-i-thread","(key)","<p>Returns the thread for the given <code>key</code> object, see #search for\nmore information.\n"],["top","IRB::Frame","IRB/Frame.html#method-c-top","(n = 0)","<p>Convenience method for Frame#top\n"],["top","IRB::Frame","IRB/Frame.html#method-i-top","(n = 0)","<p>Returns the <code>n</code> number of frames on the call stack from the last\nframe initialized.\n<p>Raises FrameUnderflow …\n"],["toplevel_load","IRB::Locale","IRB/Locale.html#method-i-toplevel_load","(file, priv=nil)",""],["trace_func","IRB::Frame","IRB/Frame.html#method-i-trace_func","(event, file, line, id, binding)","<p>Used by Kernel#set_trace_func to register each event in the call stack\n"],["use_loader","IRB::Context","IRB/Context.html#method-i-use_loader","()","<p>Returns whether <code>irb</code>‘s own file reader method is used by\n<code>load</code>/<code>require</code> or not.\n<p>This mode is globally affected …\n"],["use_loader=","IRB::Context","IRB/Context.html#method-i-use_loader-3D","(opt)","<p>Sets IRB.conf\n<p>See #use_loader for more information.\n"],["use_loader?","IRB::Context","IRB/Context.html#method-i-use_loader-3F","()",""],["use_readline=","IRB::Context","IRB/Context.html#method-i-use_readline-3D","(opt)","<p>Obsolete method.\n<p>Can be set using the <code>--noreadline</code> and <code>--readline</code>\ncommand line options.\n<p>See IRB@Command+line+options …\n"],["use_tracer=","IRB::Context","IRB/Context.html#method-i-use_tracer-3D","(opt)","<p>Sets whether or not to use the Tracer library when evaluating statements in\nthis context.\n<p>See <code>lib/tracer.rb</code> …\n"],["verbose?","IRB::Context","IRB/Context.html#method-i-verbose-3F","()","<p>Returns whether messages are displayed or not.\n"],["version","IRB","IRB.html#method-c-version","()","<p>Returns the current version of IRB, including release version and last\nupdated date.\n"],["workspaces","IRB::Context","IRB/Context.html#method-i-workspaces","()","<p>WorkSpaces in the current stack\n"],["xmp","Object","Object.html#method-i-xmp","(exps, bind = nil)","<p>A convenience method that’s only available when the you require the\nIRB::XMP standard library.\n<p>Creates …\n"]]}}
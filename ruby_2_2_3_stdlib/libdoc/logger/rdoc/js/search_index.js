var search_data = {"index":{"searchIndex":["logger","formatter","logdevice","logdevicemutex","period","severity","<<()","add()","call()","close()","close()","datetime_format()","datetime_format=()","debug()","debug?()","error()","error?()","fatal()","fatal?()","info()","info?()","log()","new()","new()","new()","next_rotate_time()","previous_period_end()","unknown()","warn()","warn?()","write()"],"longSearchIndex":["logger","logger::formatter","logger::logdevice","logger::logdevice::logdevicemutex","logger::period","logger::severity","logger#<<()","logger#add()","logger::formatter#call()","logger#close()","logger::logdevice#close()","logger#datetime_format()","logger#datetime_format=()","logger#debug()","logger#debug?()","logger#error()","logger#error?()","logger#fatal()","logger#fatal?()","logger#info()","logger#info?()","logger#log()","logger::new()","logger::formatter::new()","logger::logdevice::new()","logger::period#next_rotate_time()","logger::period#previous_period_end()","logger#unknown()","logger#warn()","logger#warn?()","logger::logdevice#write()"],"info":[["Logger","","Logger.html","","<p>Description\n<p>The Logger class provides a simple but sophisticated logging utility that\nyou can use to output …\n"],["Logger::Formatter","","Logger/Formatter.html","","<p>Default formatter for log messages.\n"],["Logger::LogDevice","","Logger/LogDevice.html","","<p>Device used for logging messages.\n"],["Logger::LogDevice::LogDeviceMutex","","Logger/LogDevice/LogDeviceMutex.html","",""],["Logger::Period","","Logger/Period.html","",""],["Logger::Severity","","Logger/Severity.html","","<p>Logging severity.\n"],["<<","Logger","Logger.html#method-i-3C-3C","(msg)","<p>Dump given message to the log device without any formatting.  If no log\ndevice exists, return <code>nil</code>.\n"],["add","Logger","Logger.html#method-i-add","(severity, message = nil, progname = nil, &block)","<p>Args\n<p>severity &mdash; Severity.  Constants are defined in Logger namespace: <code>DEBUG</code>,\n<code>INFO</code>, <code>WARN</code>, <code>ERROR</code>,\n<code>FATAL</code>, or …\n"],["call","Logger::Formatter","Logger/Formatter.html#method-i-call","(severity, time, progname, msg)",""],["close","Logger","Logger.html#method-i-close","()","<p>Close the logging device.\n"],["close","Logger::LogDevice","Logger/LogDevice.html#method-i-close","()",""],["datetime_format","Logger","Logger.html#method-i-datetime_format","()","<p>Returns the date format being used.  See #datetime_format=\n"],["datetime_format=","Logger","Logger.html#method-i-datetime_format-3D","(datetime_format)","<p>Set date-time format.\n<p>datetime_format &mdash; A string suitable for passing to <code>strftime</code>.\n\n"],["debug","Logger","Logger.html#method-i-debug","(progname = nil, &block)","<p>Log a <code>DEBUG</code> message.\n<p>See #info for more information.\n"],["debug?","Logger","Logger.html#method-i-debug-3F","()","<p>Returns <code>true</code> iff the current severity level allows for the\nprinting of <code>DEBUG</code> messages.\n"],["error","Logger","Logger.html#method-i-error","(progname = nil, &block)","<p>Log an <code>ERROR</code> message.\n<p>See #info for more information.\n"],["error?","Logger","Logger.html#method-i-error-3F","()","<p>Returns <code>true</code> iff the current severity level allows for the\nprinting of <code>ERROR</code> messages.\n"],["fatal","Logger","Logger.html#method-i-fatal","(progname = nil, &block)","<p>Log a <code>FATAL</code> message.\n<p>See #info for more information.\n"],["fatal?","Logger","Logger.html#method-i-fatal-3F","()","<p>Returns <code>true</code> iff the current severity level allows for the\nprinting of <code>FATAL</code> messages.\n"],["info","Logger","Logger.html#method-i-info","(progname = nil, &block)","<p>Log an <code>INFO</code> message.\n<p>message &mdash; The message to log; does not need to be a String.\n<p>progname &mdash; In the block form, …\n"],["info?","Logger","Logger.html#method-i-info-3F","()","<p>Returns <code>true</code> iff the current severity level allows for the\nprinting of <code>INFO</code> messages.\n"],["log","Logger","Logger.html#method-i-log","(severity, message = nil, progname = nil, &block)",""],["new","Logger","Logger.html#method-c-new","(logdev, shift_age = 0, shift_size = 1048576)","<p>Args\n<p>logdev &mdash; The log device.  This is a filename (String) or IO object (typically\n<code>STDOUT</code>, <code>STDERR</code>, or an …\n"],["new","Logger::Formatter","Logger/Formatter.html#method-c-new","()",""],["new","Logger::LogDevice","Logger/LogDevice.html#method-c-new","(log = nil, opt = {})",""],["next_rotate_time","Logger::Period","Logger/Period.html#method-i-next_rotate_time","(now, shift_age)",""],["previous_period_end","Logger::Period","Logger/Period.html#method-i-previous_period_end","(now, shift_age)",""],["unknown","Logger","Logger.html#method-i-unknown","(progname = nil, &block)","<p>Log an <code>UNKNOWN</code> message.  This will be printed no matter what\nthe logger’s level is.\n<p>See #info for more …\n"],["warn","Logger","Logger.html#method-i-warn","(progname = nil, &block)","<p>Log a <code>WARN</code> message.\n<p>See #info for more information.\n"],["warn?","Logger","Logger.html#method-i-warn-3F","()","<p>Returns <code>true</code> iff the current severity level allows for the\nprinting of <code>WARN</code> messages.\n"],["write","Logger::LogDevice","Logger/LogDevice.html#method-i-write","(message)",""]]}}
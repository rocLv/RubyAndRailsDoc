var search_data = {"index":{"searchIndex":["array","makemakefile","file","logging","rbconfig","string_or_failed_format","object","string","check_signedness()","check_sizeof()","convertible_int()","create_header()","create_makefile()","depend_rules()","dir_config()","dummy_makefile()","enable_config()","find_executable()","find_header()","find_library()","find_type()","have_const()","have_framework()","have_func()","have_header()","have_library()","have_macro()","have_struct_member()","have_type()","have_var()","pkg_config()","try_const()","try_type()","with_config()"],"longSearchIndex":["array","makemakefile","makemakefile::file","makemakefile::logging","makemakefile::rbconfig","makemakefile::string_or_failed_format","object","string","makemakefile#check_signedness()","makemakefile#check_sizeof()","makemakefile#convertible_int()","makemakefile#create_header()","makemakefile#create_makefile()","makemakefile#depend_rules()","makemakefile#dir_config()","makemakefile#dummy_makefile()","makemakefile#enable_config()","makemakefile#find_executable()","makemakefile#find_header()","makemakefile#find_library()","makemakefile#find_type()","makemakefile#have_const()","makemakefile#have_framework()","makemakefile#have_func()","makemakefile#have_header()","makemakefile#have_library()","makemakefile#have_macro()","makemakefile#have_struct_member()","makemakefile#have_type()","makemakefile#have_var()","makemakefile#pkg_config()","makemakefile#try_const()","makemakefile#try_type()","makemakefile#with_config()"],"info":[["Array","","Array.html","",""],["MakeMakefile","","MakeMakefile.html","","<p>mkmf.rb is used by Ruby C extensions to generate a Makefile which will\ncorrectly compile and link the …\n"],["MakeMakefile::File","","MakeMakefile/File.html","",""],["MakeMakefile::Logging","","MakeMakefile/Logging.html","",""],["MakeMakefile::RbConfig","","MakeMakefile/RbConfig.html","",""],["MakeMakefile::STRING_OR_FAILED_FORMAT","","MakeMakefile/STRING_OR_FAILED_FORMAT.html","",""],["Object","","Object.html","",""],["String","","String.html","",""],["check_signedness","MakeMakefile","MakeMakefile.html#method-i-check_signedness","(type, headers = nil, opts = nil, &b)","<p>Returns the signedness of the given <code>type</code>.  You may optionally\nspecify additional <code>headers</code> to search in …\n"],["check_sizeof","MakeMakefile","MakeMakefile.html#method-i-check_sizeof","(type, headers = nil, opts = \"\", &b)","<p>Returns the size of the given <code>type</code>.  You may optionally\nspecify additional <code>headers</code> to search in for the …\n"],["convertible_int","MakeMakefile","MakeMakefile.html#method-i-convertible_int","(type, headers = nil, opts = nil, &b)","<p>Returns the convertible integer type of the given <code>type</code>.  You\nmay optionally specify additional <code>headers</code> …\n"],["create_header","MakeMakefile","MakeMakefile.html#method-i-create_header","(header = \"extconf.h\")","<p>Generates a header file consisting of the various macro definitions\ngenerated by other methods such as …\n"],["create_makefile","MakeMakefile","MakeMakefile.html#method-i-create_makefile","(target, srcprefix = nil)","<p>Generates the Makefile for your extension, passing along any options and\npreprocessor constants that …\n"],["depend_rules","MakeMakefile","MakeMakefile.html#method-i-depend_rules","(depend)","<p>Processes the data contents of the “depend” file.  Each line of this file\nis expected to be …\n"],["dir_config","MakeMakefile","MakeMakefile.html#method-i-dir_config","(target, idefault=nil, ldefault=nil)","<p>Sets a <code>target</code> name that the user can then use to configure\nvarious “with” options with on the …\n"],["dummy_makefile","MakeMakefile","MakeMakefile.html#method-i-dummy_makefile","(srcdir)","<p>creates a stub Makefile.\n"],["enable_config","MakeMakefile","MakeMakefile.html#method-i-enable_config","(config, default=nil)","<p>Tests for the presence of an <code>--enable-</code><em>config</em> or\n<code>--disable-</code><em>config</em> option. Returns <code>true</code> if\nthe enable option …\n"],["find_executable","MakeMakefile","MakeMakefile.html#method-i-find_executable","(bin, path = nil)","<p>Searches for the executable <code>bin</code> on <code>path</code>.  The\ndefault path is your <code>PATH</code> environment variable. If that …\n"],["find_header","MakeMakefile","MakeMakefile.html#method-i-find_header","(header, *paths)","<p>Instructs mkmf to search for the given <code>header</code> in any of the\n<code>paths</code> provided, and returns whether or not …\n"],["find_library","MakeMakefile","MakeMakefile.html#method-i-find_library","(lib, func, *paths, &b)","<p>Returns whether or not the entry point <code>func</code> can be found\nwithin the library <code>lib</code> in one of the <code>paths</code>\nspecified, …\n"],["find_type","MakeMakefile","MakeMakefile.html#method-i-find_type","(type, opt, *headers, &b)","<p>Returns where the static type <code>type</code> is defined.\n<p>You may also pass additional flags to <code>opt</code> which are then …\n"],["have_const","MakeMakefile","MakeMakefile.html#method-i-have_const","(const, headers = nil, opt = \"\", &b)","<p>Returns whether or not the constant <code>const</code> is defined.  You may\noptionally pass the <code>type</code> of <code>const</code> as  …\n"],["have_framework","MakeMakefile","MakeMakefile.html#method-i-have_framework","(fw, &b)","<p>Returns whether or not the given <code>framework</code> can be found on\nyour system. If found, a macro is passed as …\n"],["have_func","MakeMakefile","MakeMakefile.html#method-i-have_func","(func, headers = nil, opt = \"\", &b)","<p>Returns whether or not the function <code>func</code> can be found in the\ncommon header files, or within any <code>headers</code> …\n"],["have_header","MakeMakefile","MakeMakefile.html#method-i-have_header","(header, preheaders = nil, opt = \"\", &b)","<p>Returns whether or not the given <code>header</code> file can be found on\nyour system. If found, a macro is passed …\n"],["have_library","MakeMakefile","MakeMakefile.html#method-i-have_library","(lib, func = nil, headers = nil, opt = \"\", &b)","<p>Returns whether or not the given entry point <code>func</code> can be found\nwithin <code>lib</code>.  If <code>func</code> is <code>nil</code>, the\n<code>main()</code> …\n"],["have_macro","MakeMakefile","MakeMakefile.html#method-i-have_macro","(macro, headers = nil, opt = \"\", &b)","<p>Returns whether or not <code>macro</code> is defined either in the common\nheader files or within any <code>headers</code> you provide. …\n"],["have_struct_member","MakeMakefile","MakeMakefile.html#method-i-have_struct_member","(type, member, headers = nil, opt = \"\", &b)","<p>Returns whether or not the struct of type <code>type</code> contains\n<code>member</code>.  If it does not, or the struct type can’t …\n"],["have_type","MakeMakefile","MakeMakefile.html#method-i-have_type","(type, headers = nil, opt = \"\", &b)","<p>Returns whether or not the static type <code>type</code> is defined.  You\nmay optionally pass additional <code>headers</code> to …\n"],["have_var","MakeMakefile","MakeMakefile.html#method-i-have_var","(var, headers = nil, opt = \"\", &b)","<p>Returns whether or not the variable <code>var</code> can be found in the\ncommon header files, or within any <code>headers</code> …\n"],["pkg_config","MakeMakefile","MakeMakefile.html#method-i-pkg_config","(pkg, option=nil)","<p>Returns compile/link information about an installed library in a tuple of\n<code>[cflags, ldflags, libs]</code>, by …\n"],["try_const","MakeMakefile","MakeMakefile.html#method-i-try_const","(const, headers = nil, opt = \"\", &b)","<p>Returns whether or not the constant <code>const</code> is defined.\n<p>See also <code>have_const</code>\n"],["try_type","MakeMakefile","MakeMakefile.html#method-i-try_type","(type, headers = nil, opt = \"\", &b)","<p>Returns whether or not the static type <code>type</code> is defined.\n<p>See also <code>have_type</code>\n"],["with_config","MakeMakefile","MakeMakefile.html#method-i-with_config","(config, default=nil)","<p>Tests for the presence of a <code>--with-</code><em>config</em> or\n<code>--without-</code><em>config</em> option.  Returns <code>true</code>\nif the with option …\n"]]}}
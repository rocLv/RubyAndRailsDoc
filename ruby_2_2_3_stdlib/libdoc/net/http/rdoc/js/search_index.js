var search_data = {"index":{"searchIndex":["exception_type","exception_type","exception_type","exception_type","httpmovedtemporarily","httpmultiplechoice","httprequesturitoolarge","net","http","copy","delete","get","head","lock","mkcol","move","options","patch","post","propfind","proppatch","put","trace","unlock","httpaccepted","httpbadgateway","httpbadrequest","httpbadresponse","httpclienterror","httpconflict","httpcontinue","httpcreated","exception_type","httpexceptions","httpexpectationfailed","httpfaileddependency","httpfatalerror","httpforbidden","httpmovedtemporarily","httpgatewaytimeout","httpgenericrequest","httpgone","httpheader","httpheadersyntaxerror","httpimused","httpinformation","httpinsufficientstorage","httpinternalservererror","httplengthrequired","httplocked","httpmethodnotallowed","httpmovedpermanently","httpmultistatus","httpmultiplechoice","httpnetworkauthenticationrequired","httpnocontent","httpnonauthoritativeinformation","httpnotacceptable","httpnotfound","httpnotimplemented","httpnotmodified","httpok","httppartialcontent","httppaymentrequired","httppermanentredirect","httppreconditionfailed","httppreconditionrequired","httpproxyauthenticationrequired","httpredirection","httprequest","httprequestentitytoolarge","httprequestheaderfieldstoolarge","httprequesttimeout","httprequesturitoolarge","httprequestedrangenotsatisfiable","httpresetcontent","httpresponse","exception_type","httpseeother","httpservererror","httpserverexception","httpserviceunavailable","httpsuccess","httpswitchprotocol","httptemporaryredirect","httptoomanyrequests","httpunauthorized","httpunknownresponse","httpunprocessableentity","httpunsupportedmediatype","httpupgraderequired","httpuseproxy","httpversionnotsupported","proxy()","[]()","[]=()","active?()","add_field()","basic_auth()","body()","body=()","body=()","body_exist?()","body_permitted?()","body_stream=()","canonical_each()","chunked?()","connection_close?()","connection_keep_alive?()","content_length()","content_length=()","content_range()","content_type()","content_type=()","continue_timeout=()","copy()","default_port()","delete()","delete()","each()","each_capitalized()","each_capitalized_name()","each_header()","each_key()","each_name()","each_value()","entity()","fetch()","finish()","form_data=()","get()","get()","get2()","get_fields()","get_print()","get_response()","head()","head2()","http_default_port()","https_default_port()","initialize_http_header()","inspect()","inspect()","inspect()","is_version_1_2?()","key?()","lock()","main_type()","mkcol()","move()","new()","new()","new()","new()","newobj()","options()","patch()","peer_cert()","post()","post2()","post_form()","propfind()","proppatch()","proxy?()","proxy_address()","proxy_basic_auth()","proxy_class?()","proxy_from_env?()","proxy_pass()","proxy_port()","proxy_user()","proxyaddr()","proxyport()","range()","range=()","range_length()","read_body()","read_timeout=()","request()","request_body_permitted?()","request_get()","request_head()","request_post()","response_body_permitted?()","send_request()","set_content_type()","set_debug_output()","set_form()","set_form_data()","set_range()","start()","start()","started?()","sub_type()","to_hash()","trace()","type_params()","unlock()","use_ssl=()","use_ssl?()","value()","version_1_2()","version_1_2?()"],"longSearchIndex":["exception_type","exception_type","exception_type","exception_type","httpmovedtemporarily","httpmultiplechoice","httprequesturitoolarge","net","net::http","net::http::copy","net::http::delete","net::http::get","net::http::head","net::http::lock","net::http::mkcol","net::http::move","net::http::options","net::http::patch","net::http::post","net::http::propfind","net::http::proppatch","net::http::put","net::http::trace","net::http::unlock","net::httpaccepted","net::httpbadgateway","net::httpbadrequest","net::httpbadresponse","net::httpclienterror","net::httpconflict","net::httpcontinue","net::httpcreated","net::httperror","net::httpexceptions","net::httpexpectationfailed","net::httpfaileddependency","net::httpfatalerror","net::httpforbidden","net::httpfound","net::httpgatewaytimeout","net::httpgenericrequest","net::httpgone","net::httpheader","net::httpheadersyntaxerror","net::httpimused","net::httpinformation","net::httpinsufficientstorage","net::httpinternalservererror","net::httplengthrequired","net::httplocked","net::httpmethodnotallowed","net::httpmovedpermanently","net::httpmultistatus","net::httpmultiplechoices","net::httpnetworkauthenticationrequired","net::httpnocontent","net::httpnonauthoritativeinformation","net::httpnotacceptable","net::httpnotfound","net::httpnotimplemented","net::httpnotmodified","net::httpok","net::httppartialcontent","net::httppaymentrequired","net::httppermanentredirect","net::httppreconditionfailed","net::httppreconditionrequired","net::httpproxyauthenticationrequired","net::httpredirection","net::httprequest","net::httprequestentitytoolarge","net::httprequestheaderfieldstoolarge","net::httprequesttimeout","net::httprequesturitoolong","net::httprequestedrangenotsatisfiable","net::httpresetcontent","net::httpresponse","net::httpretriableerror","net::httpseeother","net::httpservererror","net::httpserverexception","net::httpserviceunavailable","net::httpsuccess","net::httpswitchprotocol","net::httptemporaryredirect","net::httptoomanyrequests","net::httpunauthorized","net::httpunknownresponse","net::httpunprocessableentity","net::httpunsupportedmediatype","net::httpupgraderequired","net::httpuseproxy","net::httpversionnotsupported","net::http::proxy()","net::httpheader#[]()","net::httpheader#[]=()","net::http#active?()","net::httpheader#add_field()","net::httpheader#basic_auth()","net::httpresponse#body()","net::httpgenericrequest#body=()","net::httpresponse#body=()","net::httpgenericrequest#body_exist?()","net::httpresponse::body_permitted?()","net::httpgenericrequest#body_stream=()","net::httpheader#canonical_each()","net::httpheader#chunked?()","net::httpheader#connection_close?()","net::httpheader#connection_keep_alive?()","net::httpheader#content_length()","net::httpheader#content_length=()","net::httpheader#content_range()","net::httpheader#content_type()","net::httpheader#content_type=()","net::http#continue_timeout=()","net::http#copy()","net::http::default_port()","net::http#delete()","net::httpheader#delete()","net::httpheader#each()","net::httpheader#each_capitalized()","net::httpheader#each_capitalized_name()","net::httpheader#each_header()","net::httpheader#each_key()","net::httpheader#each_name()","net::httpheader#each_value()","net::httpresponse#entity()","net::httpheader#fetch()","net::http#finish()","net::httpheader#form_data=()","net::http#get()","net::http::get()","net::http#get2()","net::httpheader#get_fields()","net::http::get_print()","net::http::get_response()","net::http#head()","net::http#head2()","net::http::http_default_port()","net::http::https_default_port()","net::httpheader#initialize_http_header()","net::http#inspect()","net::httpgenericrequest#inspect()","net::httpresponse#inspect()","net::http::is_version_1_2?()","net::httpheader#key?()","net::http#lock()","net::httpheader#main_type()","net::http#mkcol()","net::http#move()","net::http::new()","net::http::new()","net::httpgenericrequest::new()","net::httprequest::new()","net::http::newobj()","net::http#options()","net::http#patch()","net::http#peer_cert()","net::http#post()","net::http#post2()","net::http::post_form()","net::http#propfind()","net::http#proppatch()","net::http#proxy?()","net::http#proxy_address()","net::httpheader#proxy_basic_auth()","net::http::proxy_class?()","net::http#proxy_from_env?()","net::http#proxy_pass()","net::http#proxy_port()","net::http#proxy_user()","net::http#proxyaddr()","net::http#proxyport()","net::httpheader#range()","net::httpheader#range=()","net::httpheader#range_length()","net::httpresponse#read_body()","net::http#read_timeout=()","net::http#request()","net::httpgenericrequest#request_body_permitted?()","net::http#request_get()","net::http#request_head()","net::http#request_post()","net::httpgenericrequest#response_body_permitted?()","net::http#send_request()","net::httpheader#set_content_type()","net::http#set_debug_output()","net::httpheader#set_form()","net::httpheader#set_form_data()","net::httpheader#set_range()","net::http#start()","net::http::start()","net::http#started?()","net::httpheader#sub_type()","net::httpheader#to_hash()","net::http#trace()","net::httpheader#type_params()","net::http#unlock()","net::http#use_ssl=()","net::http#use_ssl?()","net::httpresponse#value()","net::http::version_1_2()","net::http::version_1_2?()"],"info":[["EXCEPTION_TYPE","","EXCEPTION_TYPE.html","",""],["EXCEPTION_TYPE","","EXCEPTION_TYPE.html","",""],["EXCEPTION_TYPE","","EXCEPTION_TYPE.html","",""],["EXCEPTION_TYPE","","EXCEPTION_TYPE.html","",""],["HTTPMovedTemporarily","","HTTPMovedTemporarily.html","",""],["HTTPMultipleChoice","","HTTPMultipleChoice.html","",""],["HTTPRequestURITooLarge","","HTTPRequestURITooLarge.html","",""],["Net","","Net.html","",""],["Net::HTTP","","Net/HTTP.html","","<p>An HTTP client API for Ruby.\n<p>Net::HTTP provides a rich library which can be used to build HTTP\nuser-agents. …\n"],["Net::HTTP::Copy","","Net/HTTP/Copy.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Delete","","Net/HTTP/Delete.html","","<p>See Net::HTTPGenericRequest for attributes and methods. See Net::HTTP for\nusage examples.\n"],["Net::HTTP::Get","","Net/HTTP/Get.html","","<p>See Net::HTTPGenericRequest for attributes and methods. See Net::HTTP for\nusage examples.\n"],["Net::HTTP::Head","","Net/HTTP/Head.html","","<p>See Net::HTTPGenericRequest for attributes and methods. See Net::HTTP for\nusage examples.\n"],["Net::HTTP::Lock","","Net/HTTP/Lock.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Mkcol","","Net/HTTP/Mkcol.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Move","","Net/HTTP/Move.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Options","","Net/HTTP/Options.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Patch","","Net/HTTP/Patch.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Post","","Net/HTTP/Post.html","","<p>See Net::HTTPGenericRequest for attributes and methods. See Net::HTTP for\nusage examples.\n"],["Net::HTTP::Propfind","","Net/HTTP/Propfind.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Proppatch","","Net/HTTP/Proppatch.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Put","","Net/HTTP/Put.html","","<p>See Net::HTTPGenericRequest for attributes and methods. See Net::HTTP for\nusage examples.\n"],["Net::HTTP::Trace","","Net/HTTP/Trace.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Unlock","","Net/HTTP/Unlock.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTPAccepted","","Net/HTTPAccepted.html","",""],["Net::HTTPBadGateway","","Net/HTTPBadGateway.html","",""],["Net::HTTPBadRequest","","Net/HTTPBadRequest.html","",""],["Net::HTTPBadResponse","","Net/HTTPBadResponse.html","",""],["Net::HTTPClientError","","Net/HTTPClientError.html","",""],["Net::HTTPConflict","","Net/HTTPConflict.html","",""],["Net::HTTPContinue","","Net/HTTPContinue.html","",""],["Net::HTTPCreated","","Net/HTTPCreated.html","",""],["Net::HTTPError","","Net/HTTPError.html","",""],["Net::HTTPExceptions","","Net/HTTPExceptions.html","","<p>Net::HTTP exception class. You cannot use Net::HTTPExceptions directly;\ninstead, you must use its subclasses. …\n"],["Net::HTTPExpectationFailed","","Net/HTTPExpectationFailed.html","",""],["Net::HTTPFailedDependency","","Net/HTTPFailedDependency.html","",""],["Net::HTTPFatalError","","Net/HTTPFatalError.html","",""],["Net::HTTPForbidden","","Net/HTTPForbidden.html","",""],["Net::HTTPFound","","Net/HTTPFound.html","",""],["Net::HTTPGatewayTimeOut","","Net/HTTPGatewayTimeOut.html","",""],["Net::HTTPGenericRequest","","Net/HTTPGenericRequest.html","","<p>HTTPGenericRequest is the parent of the HTTPRequest class. Do not use this\ndirectly; use a subclass of …\n"],["Net::HTTPGone","","Net/HTTPGone.html","",""],["Net::HTTPHeader","","Net/HTTPHeader.html","","<p>The HTTPHeader module defines methods for reading and writing HTTP headers.\n<p>It is used as a mixin by other …\n"],["Net::HTTPHeaderSyntaxError","","Net/HTTPHeaderSyntaxError.html","",""],["Net::HTTPIMUsed","","Net/HTTPIMUsed.html","","<p>208 Already Reported - RFC 5842; experimental\n"],["Net::HTTPInformation","","Net/HTTPInformation.html","",""],["Net::HTTPInsufficientStorage","","Net/HTTPInsufficientStorage.html","","<p>506 Variant Also Negotiates - RFC 2295; experimental\n"],["Net::HTTPInternalServerError","","Net/HTTPInternalServerError.html","","<p>444 No Response - Nginx 449 Retry With - Microsoft 450 Blocked by Windows\nParental Controls - Microsoft …\n"],["Net::HTTPLengthRequired","","Net/HTTPLengthRequired.html","",""],["Net::HTTPLocked","","Net/HTTPLocked.html","",""],["Net::HTTPMethodNotAllowed","","Net/HTTPMethodNotAllowed.html","",""],["Net::HTTPMovedPermanently","","Net/HTTPMovedPermanently.html","",""],["Net::HTTPMultiStatus","","Net/HTTPMultiStatus.html","",""],["Net::HTTPMultipleChoices","","Net/HTTPMultipleChoices.html","",""],["Net::HTTPNetworkAuthenticationRequired","","Net/HTTPNetworkAuthenticationRequired.html","","<p>508 Loop Detected - RFC 5842; experimental 509 Bandwidth Limit Exceeded -\nApache bw/limited extension …\n"],["Net::HTTPNoContent","","Net/HTTPNoContent.html","",""],["Net::HTTPNonAuthoritativeInformation","","Net/HTTPNonAuthoritativeInformation.html","",""],["Net::HTTPNotAcceptable","","Net/HTTPNotAcceptable.html","",""],["Net::HTTPNotFound","","Net/HTTPNotFound.html","",""],["Net::HTTPNotImplemented","","Net/HTTPNotImplemented.html","",""],["Net::HTTPNotModified","","Net/HTTPNotModified.html","",""],["Net::HTTPOK","","Net/HTTPOK.html","","<p>102 - RFC 2518; removed in RFC 4918\n"],["Net::HTTPPartialContent","","Net/HTTPPartialContent.html","",""],["Net::HTTPPaymentRequired","","Net/HTTPPaymentRequired.html","",""],["Net::HTTPPermanentRedirect","","Net/HTTPPermanentRedirect.html","",""],["Net::HTTPPreconditionFailed","","Net/HTTPPreconditionFailed.html","",""],["Net::HTTPPreconditionRequired","","Net/HTTPPreconditionRequired.html","",""],["Net::HTTPProxyAuthenticationRequired","","Net/HTTPProxyAuthenticationRequired.html","",""],["Net::HTTPRedirection","","Net/HTTPRedirection.html","",""],["Net::HTTPRequest","","Net/HTTPRequest.html","","<p>HTTP request class. This class wraps together the request header and the\nrequest path. You cannot use …\n"],["Net::HTTPRequestEntityTooLarge","","Net/HTTPRequestEntityTooLarge.html","",""],["Net::HTTPRequestHeaderFieldsTooLarge","","Net/HTTPRequestHeaderFieldsTooLarge.html","",""],["Net::HTTPRequestTimeOut","","Net/HTTPRequestTimeOut.html","",""],["Net::HTTPRequestURITooLong","","Net/HTTPRequestURITooLong.html","",""],["Net::HTTPRequestedRangeNotSatisfiable","","Net/HTTPRequestedRangeNotSatisfiable.html","",""],["Net::HTTPResetContent","","Net/HTTPResetContent.html","",""],["Net::HTTPResponse","","Net/HTTPResponse.html","","<p>HTTP response class.\n<p>This class wraps together the response header and the response body (the\nentity requested). …\n"],["Net::HTTPRetriableError","","Net/HTTPRetriableError.html","",""],["Net::HTTPSeeOther","","Net/HTTPSeeOther.html","",""],["Net::HTTPServerError","","Net/HTTPServerError.html","",""],["Net::HTTPServerException","","Net/HTTPServerException.html","",""],["Net::HTTPServiceUnavailable","","Net/HTTPServiceUnavailable.html","",""],["Net::HTTPSuccess","","Net/HTTPSuccess.html","",""],["Net::HTTPSwitchProtocol","","Net/HTTPSwitchProtocol.html","",""],["Net::HTTPTemporaryRedirect","","Net/HTTPTemporaryRedirect.html","","<p>306 Switch Proxy - no longer unused\n"],["Net::HTTPTooManyRequests","","Net/HTTPTooManyRequests.html","",""],["Net::HTTPUnauthorized","","Net/HTTPUnauthorized.html","",""],["Net::HTTPUnknownResponse","","Net/HTTPUnknownResponse.html","",""],["Net::HTTPUnprocessableEntity","","Net/HTTPUnprocessableEntity.html","","<p>418 I’m a teapot - RFC 2324; a joke RFC 420 Enhance Your Calm - Twitter\n"],["Net::HTTPUnsupportedMediaType","","Net/HTTPUnsupportedMediaType.html","",""],["Net::HTTPUpgradeRequired","","Net/HTTPUpgradeRequired.html","","<p>425 Unordered Collection - existed only in draft\n"],["Net::HTTPUseProxy","","Net/HTTPUseProxy.html","",""],["Net::HTTPVersionNotSupported","","Net/HTTPVersionNotSupported.html","",""],["Proxy","Net::HTTP","Net/HTTP.html#method-c-Proxy","(p_addr = :ENV, p_port = nil, p_user = nil, p_pass = nil)","<p>Creates an HTTP proxy class which behaves like Net::HTTP, but performs all\naccess via the specified proxy. …\n"],["[]","Net::HTTPHeader","Net/HTTPHeader.html#method-i-5B-5D","(key)","<p>Returns the header field corresponding to the case-insensitive key. For\nexample, a key of “Content-Type” …\n"],["[]=","Net::HTTPHeader","Net/HTTPHeader.html#method-i-5B-5D-3D","(key, val)","<p>Sets the header field corresponding to the case-insensitive key.\n"],["active?","Net::HTTP","Net/HTTP.html#method-i-active-3F","()",""],["add_field","Net::HTTPHeader","Net/HTTPHeader.html#method-i-add_field","(key, val)","<p>Ruby 1.8.3 &mdash; Adds a value to a named header field, instead of replacing its value.\nSecond argument <code>val</code> …\n"],["basic_auth","Net::HTTPHeader","Net/HTTPHeader.html#method-i-basic_auth","(account, password)","<p>Set the Authorization: header for “Basic” authorization.\n"],["body","Net::HTTPResponse","Net/HTTPResponse.html#method-i-body","()","<p>Returns the full entity body.\n<p>Calling this method a second or subsequent time will return the string\nalready …\n"],["body=","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-body-3D","(str)",""],["body=","Net::HTTPResponse","Net/HTTPResponse.html#method-i-body-3D","(value)","<p>Because it may be necessary to modify the body, Eg, decompression this\nmethod facilitates that.\n"],["body_exist?","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-body_exist-3F","()",""],["body_permitted?","Net::HTTPResponse","Net/HTTPResponse.html#method-c-body_permitted-3F","()","<p>true if the response has a body.\n"],["body_stream=","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-body_stream-3D","(input)",""],["canonical_each","Net::HTTPHeader","Net/HTTPHeader.html#method-i-canonical_each","()",""],["chunked?","Net::HTTPHeader","Net/HTTPHeader.html#method-i-chunked-3F","()","<p>Returns “true” if the “transfer-encoding” header is present and set to\n“chunked”. …\n"],["connection_close?","Net::HTTPHeader","Net/HTTPHeader.html#method-i-connection_close-3F","()",""],["connection_keep_alive?","Net::HTTPHeader","Net/HTTPHeader.html#method-i-connection_keep_alive-3F","()",""],["content_length","Net::HTTPHeader","Net/HTTPHeader.html#method-i-content_length","()","<p>Returns an Integer object which represents the HTTP Content-Length: header\nfield, or <code>nil</code> if that field …\n"],["content_length=","Net::HTTPHeader","Net/HTTPHeader.html#method-i-content_length-3D","(len)",""],["content_range","Net::HTTPHeader","Net/HTTPHeader.html#method-i-content_range","()","<p>Returns a Range object which represents the value of the Content-Range:\nheader field. For a partial entity …\n"],["content_type","Net::HTTPHeader","Net/HTTPHeader.html#method-i-content_type","()","<p>Returns a content type string such as “text/html”. This method returns nil\nif Content-Type: …\n"],["content_type=","Net::HTTPHeader","Net/HTTPHeader.html#method-i-content_type-3D","(type, params = {})",""],["continue_timeout=","Net::HTTP","Net/HTTP.html#method-i-continue_timeout-3D","(sec)","<p>Setter for the continue_timeout attribute.\n"],["copy","Net::HTTP","Net/HTTP.html#method-i-copy","(path, initheader = nil)","<p>Sends a COPY request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["default_port","Net::HTTP","Net/HTTP.html#method-c-default_port","()","<p>The default port to use for HTTP requests; defaults to 80.\n"],["delete","Net::HTTP","Net/HTTP.html#method-i-delete","(path, initheader = {'Depth' => 'Infinity'})","<p>Sends a DELETE request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["delete","Net::HTTPHeader","Net/HTTPHeader.html#method-i-delete","(key)","<p>Removes a header field, specified by case-insensitive key.\n"],["each","Net::HTTPHeader","Net/HTTPHeader.html#method-i-each","()",""],["each_capitalized","Net::HTTPHeader","Net/HTTPHeader.html#method-i-each_capitalized","()","<p>As for #each_header, except the keys are provided in capitalized form.\n<p>Note that header names are capitalized …\n"],["each_capitalized_name","Net::HTTPHeader","Net/HTTPHeader.html#method-i-each_capitalized_name","()","<p>Iterates through the header names in the header, passing capitalized header\nnames to the code block. …\n"],["each_header","Net::HTTPHeader","Net/HTTPHeader.html#method-i-each_header","()","<p>Iterates through the header names and values, passing in the name and value\nto the code block supplied. …\n"],["each_key","Net::HTTPHeader","Net/HTTPHeader.html#method-i-each_key","()",""],["each_name","Net::HTTPHeader","Net/HTTPHeader.html#method-i-each_name","()","<p>Iterates through the header names in the header, passing each header name\nto the code block.\n"],["each_value","Net::HTTPHeader","Net/HTTPHeader.html#method-i-each_value","()","<p>Iterates through header values, passing each value to the code block.\n"],["entity","Net::HTTPResponse","Net/HTTPResponse.html#method-i-entity","()",""],["fetch","Net::HTTPHeader","Net/HTTPHeader.html#method-i-fetch","(key, *args)","<p>Returns the header field corresponding to the case-insensitive key. Returns\nthe default value <code>args</code>, or …\n"],["finish","Net::HTTP","Net/HTTP.html#method-i-finish","()","<p>Finishes the HTTP session and closes the TCP connection. Raises IOError if\nthe session has not been started. …\n"],["form_data=","Net::HTTPHeader","Net/HTTPHeader.html#method-i-form_data-3D","(params, sep = '&')",""],["get","Net::HTTP","Net/HTTP.html#method-i-get","(path, initheader = nil, dest = nil)","<p>Retrieves data from <code>path</code> on the connected-to host which may be\nan absolute path String or a URI to extract …\n"],["get","Net::HTTP","Net/HTTP.html#method-c-get","(uri_or_host, path = nil, port = nil)","<p>Sends a GET request to the target and returns the HTTP response as a\nstring.  The target can either be …\n"],["get2","Net::HTTP","Net/HTTP.html#method-i-get2","(path, initheader = nil)",""],["get_fields","Net::HTTPHeader","Net/HTTPHeader.html#method-i-get_fields","(key)","<p>Ruby 1.8.3 &mdash; Returns an array of header field strings corresponding to the\ncase-insensitive <code>key</code>.  This …\n"],["get_print","Net::HTTP","Net/HTTP.html#method-c-get_print","(uri_or_host, path = nil, port = nil)","<p>Gets the body text from the target and outputs it to $stdout.  The target\ncan either be specified as …\n"],["get_response","Net::HTTP","Net/HTTP.html#method-c-get_response","(uri_or_host, path = nil, port = nil, &block)","<p>Sends a GET request to the target and returns the HTTP response as a\nNet::HTTPResponse object.  The target …\n"],["head","Net::HTTP","Net/HTTP.html#method-i-head","(path, initheader = nil)","<p>Gets only the header from <code>path</code> on the connected-to host.\n<code>header</code> is a Hash like { ‘Accept’ =&gt; ‘<strong>/</strong>’, …\n"],["head2","Net::HTTP","Net/HTTP.html#method-i-head2","(path, initheader = nil, &block)",""],["http_default_port","Net::HTTP","Net/HTTP.html#method-c-http_default_port","()","<p>The default port to use for HTTP requests; defaults to 80.\n"],["https_default_port","Net::HTTP","Net/HTTP.html#method-c-https_default_port","()","<p>The default port to use for HTTPS requests; defaults to 443.\n"],["initialize_http_header","Net::HTTPHeader","Net/HTTPHeader.html#method-i-initialize_http_header","(initheader)",""],["inspect","Net::HTTP","Net/HTTP.html#method-i-inspect","()",""],["inspect","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-inspect","()",""],["inspect","Net::HTTPResponse","Net/HTTPResponse.html#method-i-inspect","()",""],["is_version_1_2?","Net::HTTP","Net/HTTP.html#method-c-is_version_1_2-3F","()",""],["key?","Net::HTTPHeader","Net/HTTPHeader.html#method-i-key-3F","(key)","<p>true if <code>key</code> header exists.\n"],["lock","Net::HTTP","Net/HTTP.html#method-i-lock","(path, body, initheader = nil)","<p>Sends a LOCK request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["main_type","Net::HTTPHeader","Net/HTTPHeader.html#method-i-main_type","()","<p>Returns a content type string such as “text”. This method returns nil if\nContent-Type: header …\n"],["mkcol","Net::HTTP","Net/HTTP.html#method-i-mkcol","(path, body = nil, initheader = nil)","<p>Sends a MKCOL request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["move","Net::HTTP","Net/HTTP.html#method-i-move","(path, initheader = nil)","<p>Sends a MOVE request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["new","Net::HTTP","Net/HTTP.html#method-c-new","(address, port = nil, p_addr = :ENV, p_port = nil, p_user = nil, p_pass = nil)","<p>Creates a new Net::HTTP object without opening a TCP connection or HTTP\nsession.\n<p>The <code>address</code> should be …\n"],["new","Net::HTTP","Net/HTTP.html#method-c-new","(address, port = nil)","<p>Creates a new Net::HTTP object for the specified server address, without\nopening the TCP connection or …\n"],["new","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-c-new","(m, reqbody, resbody, uri_or_path, initheader = nil)",""],["new","Net::HTTPRequest","Net/HTTPRequest.html#method-c-new","(path, initheader = nil)","<p>Creates an HTTP request object for <code>path</code>.\n<p><code>initheader</code> are the default headers to use.  Net::HTTP adds\nAccept-Encoding ...\n"],["newobj","Net::HTTP","Net/HTTP.html#method-c-newobj","(address, port = nil, p_addr = :ENV, p_port = nil, p_user = nil, p_pass = nil)",""],["options","Net::HTTP","Net/HTTP.html#method-i-options","(path, initheader = nil)","<p>Sends a OPTIONS request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["patch","Net::HTTP","Net/HTTP.html#method-i-patch","(path, data, initheader = nil, dest = nil)","<p>Sends a PATCH request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["peer_cert","Net::HTTP","Net/HTTP.html#method-i-peer_cert","()","<p>Returns the X.509 certificates the server presented.\n"],["post","Net::HTTP","Net/HTTP.html#method-i-post","(path, data, initheader = nil, dest = nil)","<p>Posts <code>data</code> (must be a String) to <code>path</code>.\n<code>header</code> must be a Hash like { ‘Accept’ =&gt;\n‘<strong>/</strong>’, … }.\n<p>This method …\n"],["post2","Net::HTTP","Net/HTTP.html#method-i-post2","(path, data, initheader = nil)",""],["post_form","Net::HTTP","Net/HTTP.html#method-c-post_form","(url, params)","<p>Posts HTML form data to the specified URI object. The form data must be\nprovided as a Hash mapping from …\n"],["propfind","Net::HTTP","Net/HTTP.html#method-i-propfind","(path, body = nil, initheader = {'Depth' => '0'})","<p>Sends a PROPFIND request to the <code>path</code> and gets a response, as\nan HTTPResponse object.\n"],["proppatch","Net::HTTP","Net/HTTP.html#method-i-proppatch","(path, body, initheader = nil)","<p>Sends a PROPPATCH request to the <code>path</code> and gets a response, as\nan HTTPResponse object.\n"],["proxy?","Net::HTTP","Net/HTTP.html#method-i-proxy-3F","()","<p>True if requests for this connection will be proxied\n"],["proxy_address","Net::HTTP","Net/HTTP.html#method-i-proxy_address","()","<p>The address of the proxy server, if one is configured.\n"],["proxy_basic_auth","Net::HTTPHeader","Net/HTTPHeader.html#method-i-proxy_basic_auth","(account, password)","<p>Set Proxy-Authorization: header for “Basic” authorization.\n"],["proxy_class?","Net::HTTP","Net/HTTP.html#method-c-proxy_class-3F","()","<p>returns true if self is a class which was created by HTTP::Proxy.\n"],["proxy_from_env?","Net::HTTP","Net/HTTP.html#method-i-proxy_from_env-3F","()","<p>True if the proxy for this connection is determined from the environment\n"],["proxy_pass","Net::HTTP","Net/HTTP.html#method-i-proxy_pass","()","<p>The proxy password, if one is configured\n"],["proxy_port","Net::HTTP","Net/HTTP.html#method-i-proxy_port","()","<p>The port of the proxy server, if one is configured.\n"],["proxy_user","Net::HTTP","Net/HTTP.html#method-i-proxy_user","()","<p>The proxy username, if one is configured\n"],["proxyaddr","Net::HTTP","Net/HTTP.html#method-i-proxyaddr","()",""],["proxyport","Net::HTTP","Net/HTTP.html#method-i-proxyport","()",""],["range","Net::HTTPHeader","Net/HTTPHeader.html#method-i-range","()","<p>Returns an Array of Range objects which represent the Range: HTTP header\nfield, or <code>nil</code> if there is no …\n"],["range=","Net::HTTPHeader","Net/HTTPHeader.html#method-i-range-3D","(r, e = nil)",""],["range_length","Net::HTTPHeader","Net/HTTPHeader.html#method-i-range_length","()","<p>The length of the range represented in Content-Range: header.\n"],["read_body","Net::HTTPResponse","Net/HTTPResponse.html#method-i-read_body","(dest = nil, &block)","<p>Gets the entity body returned by the remote HTTP server.\n<p>If a block is given, the body is passed to the …\n"],["read_timeout=","Net::HTTP","Net/HTTP.html#method-i-read_timeout-3D","(sec)","<p>Setter for the read_timeout attribute.\n"],["request","Net::HTTP","Net/HTTP.html#method-i-request","(req, body = nil)","<p>Sends an HTTPRequest object <code>req</code> to the HTTP server.\n<p>If <code>req</code> is a Net::HTTP::Post or Net::HTTP::Put request …\n"],["request_body_permitted?","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-request_body_permitted-3F","()",""],["request_get","Net::HTTP","Net/HTTP.html#method-i-request_get","(path, initheader = nil)","<p>Sends a GET request to the <code>path</code>. Returns the response as a\nNet::HTTPResponse object.\n<p>When called with …\n"],["request_head","Net::HTTP","Net/HTTP.html#method-i-request_head","(path, initheader = nil, &block)","<p>Sends a HEAD request to the <code>path</code> and returns the response as a\nNet::HTTPResponse object.\n<p>Returns the response. …\n"],["request_post","Net::HTTP","Net/HTTP.html#method-i-request_post","(path, data, initheader = nil)","<p>Sends a POST request to the <code>path</code>.\n<p>Returns the response as a Net::HTTPResponse object.\n<p>When called with …\n"],["response_body_permitted?","Net::HTTPGenericRequest","Net/HTTPGenericRequest.html#method-i-response_body_permitted-3F","()",""],["send_request","Net::HTTP","Net/HTTP.html#method-i-send_request","(name, path, data = nil, header = nil)","<p>Sends an HTTP request to the HTTP server. Also sends a DATA string if\n<code>data</code> is given.\n<p>Returns a Net::HTTPResponse …\n"],["set_content_type","Net::HTTPHeader","Net/HTTPHeader.html#method-i-set_content_type","(type, params = {})","<p>Sets the content type in an HTTP header. The <code>type</code> should be a\nfull HTTP content type, e.g. “text/html”. …\n"],["set_debug_output","Net::HTTP","Net/HTTP.html#method-i-set_debug_output","(output)","<p><strong>WARNING</strong> This method opens a serious security hole. Never\nuse this method in production code.\n<p>Sets an output …\n"],["set_form","Net::HTTPHeader","Net/HTTPHeader.html#method-i-set_form","(params, enctype='application/x-www-form-urlencoded', formopt={})","<p>Set a HTML form data set. <code>params</code> is the form data set; it is\nan Array of Arrays or a Hash +enctype is …\n"],["set_form_data","Net::HTTPHeader","Net/HTTPHeader.html#method-i-set_form_data","(params, sep = '&')","<p>Set header fields and a body from HTML form data. <code>params</code>\nshould be an Array of Arrays or a Hash containing …\n"],["set_range","Net::HTTPHeader","Net/HTTPHeader.html#method-i-set_range","(r, e = nil)","<p>Sets the HTTP Range: header. Accepts either a Range object as a single\nargument, or a beginning index …\n"],["start","Net::HTTP","Net/HTTP.html#method-i-start","()","<p>Opens a TCP connection and HTTP session.\n<p>When this method is called with a block, it passes the Net::HTTP …\n"],["start","Net::HTTP","Net/HTTP.html#method-c-start","(address, *arg)","<p>Creates a new Net::HTTP object, then additionally opens the TCP connection\nand HTTP session.\n<p>Arguments …\n"],["started?","Net::HTTP","Net/HTTP.html#method-i-started-3F","()","<p>Returns true if the HTTP session has been started.\n"],["sub_type","Net::HTTPHeader","Net/HTTPHeader.html#method-i-sub_type","()","<p>Returns a content type string such as “html”. This method returns nil if\nContent-Type: header …\n"],["to_hash","Net::HTTPHeader","Net/HTTPHeader.html#method-i-to_hash","()","<p>Returns a Hash consisting of header names and array of values. e.g.\n{“cache-control” =&gt; …\n"],["trace","Net::HTTP","Net/HTTP.html#method-i-trace","(path, initheader = nil)","<p>Sends a TRACE request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["type_params","Net::HTTPHeader","Net/HTTPHeader.html#method-i-type_params","()","<p>Any parameters specified for the content type, returned as a Hash. For\nexample, a header of Content-Type: …\n"],["unlock","Net::HTTP","Net/HTTP.html#method-i-unlock","(path, body, initheader = nil)","<p>Sends a UNLOCK request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["use_ssl=","Net::HTTP","Net/HTTP.html#method-i-use_ssl-3D","(flag)","<p>Turn on/off SSL. This flag must be set before starting session. If you\nchange use_ssl value after session …\n"],["use_ssl?","Net::HTTP","Net/HTTP.html#method-i-use_ssl-3F","()","<p>Returns true if SSL/TLS is being used with HTTP.\n"],["value","Net::HTTPResponse","Net/HTTPResponse.html#method-i-value","()","<p>Raises an HTTP error if the response is not 2xx (success).\n"],["version_1_2","Net::HTTP","Net/HTTP.html#method-c-version_1_2","()","<p>Turns on net/http 1.2 (Ruby 1.8) features. Defaults to ON in Ruby 1.8 or\nlater.\n"],["version_1_2?","Net::HTTP","Net/HTTP.html#method-c-version_1_2-3F","()","<p>Returns true if net/http is in version 1.2 mode. Defaults to true.\n"]]}}
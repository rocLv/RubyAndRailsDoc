var search_data = {"index":{"searchIndex":["net","imap","badresponseerror","bodytypeattachment","bodytypebasic","bodytypeextension","bodytypemessage","bodytypemultipart","bodytypetext","byeresponseerror","crammd5authenticator","dataformaterror","digestmd5authenticator","error","flagcounterror","loginauthenticator","noresponseerror","numvalidator","openssl","plainauthenticator","responseerror","responseparseerror","add_authenticator()","add_response_handler()","append()","authenticate()","capability()","check()","close()","copy()","create()","debug()","debug=()","decode_utf7()","default_imap_port()","default_imaps_port()","default_port()","default_ssl_port()","default_tls_port()","delete()","disconnect()","disconnected?()","encode_utf7()","ensure_number()","ensure_nz_number()","examine()","expunge()","fetch()","format_date()","format_datetime()","getacl()","getquota()","getquotaroot()","idle()","idle_done()","list()","login()","logout()","lsub()","max_flag_count()","max_flag_count=()","media_subtype()","media_subtype()","media_subtype()","media_subtype()","multipart?()","multipart?()","multipart?()","multipart?()","multipart?()","multipart?()","new()","new()","new()","new()","new()","new()","noop()","process()","process()","process()","process()","remove_response_handler()","rename()","search()","select()","setacl()","setquota()","sort()","starttls()","status()","store()","subscribe()","thread()","uid_copy()","uid_fetch()","uid_search()","uid_sort()","uid_store()","uid_thread()","unsubscribe()","valid_number?()","valid_nz_number?()","xlist()"],"longSearchIndex":["net","net::imap","net::imap::badresponseerror","net::imap::bodytypeattachment","net::imap::bodytypebasic","net::imap::bodytypeextension","net::imap::bodytypemessage","net::imap::bodytypemultipart","net::imap::bodytypetext","net::imap::byeresponseerror","net::imap::crammd5authenticator","net::imap::dataformaterror","net::imap::digestmd5authenticator","net::imap::error","net::imap::flagcounterror","net::imap::loginauthenticator","net::imap::noresponseerror","net::imap::numvalidator","net::imap::openssl","net::imap::plainauthenticator","net::imap::responseerror","net::imap::responseparseerror","net::imap::add_authenticator()","net::imap#add_response_handler()","net::imap#append()","net::imap#authenticate()","net::imap#capability()","net::imap#check()","net::imap#close()","net::imap#copy()","net::imap#create()","net::imap::debug()","net::imap::debug=()","net::imap::decode_utf7()","net::imap::default_imap_port()","net::imap::default_imaps_port()","net::imap::default_port()","net::imap::default_ssl_port()","net::imap::default_tls_port()","net::imap#delete()","net::imap#disconnect()","net::imap#disconnected?()","net::imap::encode_utf7()","net::imap::numvalidator::ensure_number()","net::imap::numvalidator::ensure_nz_number()","net::imap#examine()","net::imap#expunge()","net::imap#fetch()","net::imap::format_date()","net::imap::format_datetime()","net::imap#getacl()","net::imap#getquota()","net::imap#getquotaroot()","net::imap#idle()","net::imap#idle_done()","net::imap#list()","net::imap#login()","net::imap#logout()","net::imap#lsub()","net::imap::max_flag_count()","net::imap::max_flag_count=()","net::imap::bodytypebasic#media_subtype()","net::imap::bodytypemessage#media_subtype()","net::imap::bodytypemultipart#media_subtype()","net::imap::bodytypetext#media_subtype()","net::imap::bodytypeattachment#multipart?()","net::imap::bodytypebasic#multipart?()","net::imap::bodytypeextension#multipart?()","net::imap::bodytypemessage#multipart?()","net::imap::bodytypemultipart#multipart?()","net::imap::bodytypetext#multipart?()","net::imap::new()","net::imap::crammd5authenticator::new()","net::imap::digestmd5authenticator::new()","net::imap::loginauthenticator::new()","net::imap::plainauthenticator::new()","net::imap::responseerror::new()","net::imap#noop()","net::imap::crammd5authenticator#process()","net::imap::digestmd5authenticator#process()","net::imap::loginauthenticator#process()","net::imap::plainauthenticator#process()","net::imap#remove_response_handler()","net::imap#rename()","net::imap#search()","net::imap#select()","net::imap#setacl()","net::imap#setquota()","net::imap#sort()","net::imap#starttls()","net::imap#status()","net::imap#store()","net::imap#subscribe()","net::imap#thread()","net::imap#uid_copy()","net::imap#uid_fetch()","net::imap#uid_search()","net::imap#uid_sort()","net::imap#uid_store()","net::imap#uid_thread()","net::imap#unsubscribe()","net::imap::numvalidator::valid_number?()","net::imap::numvalidator::valid_nz_number?()","net::imap#xlist()"],"info":[["Net","","Net.html","",""],["Net::IMAP","","Net/IMAP.html","","<p>Net::IMAP implements Internet Message Access Protocol (IMAP) client\nfunctionality.  The protocol is described …\n"],["Net::IMAP::BadResponseError","","Net/IMAP/BadResponseError.html","","<p>Error raised upon a “BAD” response from the server, indicating that the\nclient command violated …\n"],["Net::IMAP::BodyTypeAttachment","","Net/IMAP/BodyTypeAttachment.html","","<p>Net::IMAP::BodyTypeAttachment represents attachment body structures of\nmessages.\n<p>Fields:\n<p>media_type &mdash; Returns …\n"],["Net::IMAP::BodyTypeBasic","","Net/IMAP/BodyTypeBasic.html","","<p>Net::IMAP::BodyTypeBasic represents basic body structures of messages.\n<p>Fields:\n<p>media_type &mdash; Returns the content …\n"],["Net::IMAP::BodyTypeExtension","","Net/IMAP/BodyTypeExtension.html","",""],["Net::IMAP::BodyTypeMessage","","Net/IMAP/BodyTypeMessage.html","","<p>Net::IMAP::BodyTypeMessage represents MESSAGE/RFC822 body structures of\nmessages.\n<p>Fields:\n<p>envelope &mdash; Returns …\n"],["Net::IMAP::BodyTypeMultipart","","Net/IMAP/BodyTypeMultipart.html","","<p>Net::IMAP::BodyTypeMultipart represents multipart body structures of\nmessages.\n<p>Fields:\n<p>media_type &mdash; Returns …\n"],["Net::IMAP::BodyTypeText","","Net/IMAP/BodyTypeText.html","","<p>Net::IMAP::BodyTypeText represents TEXT body structures of messages.\n<p>Fields:\n<p>lines &mdash; Returns the size of …\n"],["Net::IMAP::ByeResponseError","","Net/IMAP/ByeResponseError.html","","<p>Error raised upon a “BYE” response from the server, indicating that the\nclient is not being …\n"],["Net::IMAP::CramMD5Authenticator","","Net/IMAP/CramMD5Authenticator.html","","<p>Authenticator for the “CRAM-MD5” authentication type.  See #authenticate().\n"],["Net::IMAP::DataFormatError","","Net/IMAP/DataFormatError.html","","<p>Error raised when data is in the incorrect format.\n"],["Net::IMAP::DigestMD5Authenticator","","Net/IMAP/DigestMD5Authenticator.html","","<p>Authenticator for the “DIGEST-MD5” authentication type.  See\n#authenticate().\n"],["Net::IMAP::Error","","Net/IMAP/Error.html","","<p>Superclass of IMAP errors.\n"],["Net::IMAP::FlagCountError","","Net/IMAP/FlagCountError.html","","<p>Error raised when too many flags are interned to symbols.\n"],["Net::IMAP::LoginAuthenticator","","Net/IMAP/LoginAuthenticator.html","","<p>Authenticator for the “LOGIN” authentication type.  See #authenticate().\n"],["Net::IMAP::NoResponseError","","Net/IMAP/NoResponseError.html","","<p>Error raised upon a “NO” response from the server, indicating that the\nclient command could …\n"],["Net::IMAP::NumValidator","","Net/IMAP/NumValidator.html","","<p>Common validators of number and nz_number types\n"],["Net::IMAP::OpenSSL","","Net/IMAP/OpenSSL.html","",""],["Net::IMAP::PlainAuthenticator","","Net/IMAP/PlainAuthenticator.html","","<p>Authenticator for the “PLAIN” authentication type.  See #authenticate().\n"],["Net::IMAP::ResponseError","","Net/IMAP/ResponseError.html","","<p>Superclass of all errors used to encapsulate “fail” responses from the\nserver.\n"],["Net::IMAP::ResponseParseError","","Net/IMAP/ResponseParseError.html","","<p>Error raised when a response from the server is non-parseable.\n"],["add_authenticator","Net::IMAP","Net/IMAP.html#method-c-add_authenticator","(auth_type, authenticator)","<p>Adds an authenticator for Net::IMAP#authenticate.  <code>auth_type</code>\nis the type of authentication this authenticator …\n"],["add_response_handler","Net::IMAP","Net/IMAP.html#method-i-add_response_handler","(handler = Proc.new)","<p>Adds a response handler. For example, to detect when the server sends a new\nEXISTS response (which normally …\n"],["append","Net::IMAP","Net/IMAP.html#method-i-append","(mailbox, message, flags = nil, date_time = nil)","<p>Sends a APPEND command to append the <code>message</code> to the end of the\n<code>mailbox</code>. The optional <code>flags</code> argument is …\n"],["authenticate","Net::IMAP","Net/IMAP.html#method-i-authenticate","(auth_type, *args)","<p>Sends an AUTHENTICATE command to authenticate the client. The\n<code>auth_type</code> parameter is a string that represents …\n"],["capability","Net::IMAP","Net/IMAP.html#method-i-capability","()","<p>Sends a CAPABILITY command, and returns an array of capabilities that the\nserver supports.  Each capability …\n"],["check","Net::IMAP","Net/IMAP.html#method-i-check","()","<p>Sends a CHECK command to request a checkpoint of the currently selected\nmailbox.  This performs implementation-specific …\n"],["close","Net::IMAP","Net/IMAP.html#method-i-close","()","<p>Sends a CLOSE command to close the currently selected mailbox. The CLOSE\ncommand permanently removes …\n"],["copy","Net::IMAP","Net/IMAP.html#method-i-copy","(set, mailbox)","<p>Sends a COPY command to copy the specified message(s) to the end of the\nspecified destination <code>mailbox</code> …\n"],["create","Net::IMAP","Net/IMAP.html#method-i-create","(mailbox)","<p>Sends a CREATE command to create a new <code>mailbox</code>.\n<p>A Net::IMAP::NoResponseError is raised if a mailbox with …\n"],["debug","Net::IMAP","Net/IMAP.html#method-c-debug","()","<p>Returns the debug mode.\n"],["debug=","Net::IMAP","Net/IMAP.html#method-c-debug-3D","(val)","<p>Sets the debug mode.\n"],["decode_utf7","Net::IMAP","Net/IMAP.html#method-c-decode_utf7","(s)","<p>Decode a string from modified UTF-7 format to UTF-8.\n<p>UTF-7 is a 7-bit encoding of Unicode [UTF7].  IMAP …\n"],["default_imap_port","Net::IMAP","Net/IMAP.html#method-c-default_imap_port","()",""],["default_imaps_port","Net::IMAP","Net/IMAP.html#method-c-default_imaps_port","()",""],["default_port","Net::IMAP","Net/IMAP.html#method-c-default_port","()","<p>The default port for IMAP connections, port 143\n"],["default_ssl_port","Net::IMAP","Net/IMAP.html#method-c-default_ssl_port","()",""],["default_tls_port","Net::IMAP","Net/IMAP.html#method-c-default_tls_port","()","<p>The default port for IMAPS connections, port 993\n"],["delete","Net::IMAP","Net/IMAP.html#method-i-delete","(mailbox)","<p>Sends a DELETE command to remove the <code>mailbox</code>.\n<p>A Net::IMAP::NoResponseError is raised if a mailbox with …\n"],["disconnect","Net::IMAP","Net/IMAP.html#method-i-disconnect","()","<p>Disconnects from the server.\n"],["disconnected?","Net::IMAP","Net/IMAP.html#method-i-disconnected-3F","()","<p>Returns true if disconnected from the server.\n"],["encode_utf7","Net::IMAP","Net/IMAP.html#method-c-encode_utf7","(s)","<p>Encode a string from UTF-8 format to modified UTF-7.\n"],["ensure_number","Net::IMAP::NumValidator","Net/IMAP/NumValidator.html#method-c-ensure_number","(num)","<p>Ensure argument is ‘number’ or raise DataFormatError\n"],["ensure_nz_number","Net::IMAP::NumValidator","Net/IMAP/NumValidator.html#method-c-ensure_nz_number","(num)","<p>Ensure argument is ‘nz_number’ or raise DataFormatError\n"],["examine","Net::IMAP","Net/IMAP.html#method-i-examine","(mailbox)","<p>Sends a EXAMINE command to select a <code>mailbox</code> so that messages\nin the <code>mailbox</code> can be accessed.  Behaves …\n"],["expunge","Net::IMAP","Net/IMAP.html#method-i-expunge","()","<p>Sends a EXPUNGE command to permanently remove from the currently selected\nmailbox all messages that have …\n"],["fetch","Net::IMAP","Net/IMAP.html#method-i-fetch","(set, attr)","<p>Sends a FETCH command to retrieve data associated with a message in the\nmailbox.\n<p>The <code>set</code> parameter is …\n"],["format_date","Net::IMAP","Net/IMAP.html#method-c-format_date","(time)","<p>Formats <code>time</code> as an IMAP-style date.\n"],["format_datetime","Net::IMAP","Net/IMAP.html#method-c-format_datetime","(time)","<p>Formats <code>time</code> as an IMAP-style date-time.\n"],["getacl","Net::IMAP","Net/IMAP.html#method-i-getacl","(mailbox)","<p>Send the GETACL command along with a specified <code>mailbox</code>. If\nthis mailbox exists, an array containing objects …\n"],["getquota","Net::IMAP","Net/IMAP.html#method-i-getquota","(mailbox)","<p>Sends the GETQUOTA command along with specified <code>mailbox</code>. If\nthis mailbox exists, then an array containing …\n"],["getquotaroot","Net::IMAP","Net/IMAP.html#method-i-getquotaroot","(mailbox)","<p>Sends the GETQUOTAROOT command along with the specified\n<code>mailbox</code>. This command is generally available …\n"],["idle","Net::IMAP","Net/IMAP.html#method-i-idle","(&response_handler)","<p>Sends an IDLE command that waits for notifications of new or expunged\nmessages.  Yields responses from …\n"],["idle_done","Net::IMAP","Net/IMAP.html#method-i-idle_done","()","<p>Leaves IDLE.\n"],["list","Net::IMAP","Net/IMAP.html#method-i-list","(refname, mailbox)","<p>Sends a LIST command, and returns a subset of names from the complete set\nof all names available to the …\n"],["login","Net::IMAP","Net/IMAP.html#method-i-login","(user, password)","<p>Sends a LOGIN command to identify the client and carries the plaintext\n<code>password</code> authenticating this  …\n"],["logout","Net::IMAP","Net/IMAP.html#method-i-logout","()","<p>Sends a LOGOUT command to inform the server that the client is done with\nthe connection.\n"],["lsub","Net::IMAP","Net/IMAP.html#method-i-lsub","(refname, mailbox)","<p>Sends a LSUB command, and returns a subset of names from the set of names\nthat the user has declared …\n"],["max_flag_count","Net::IMAP","Net/IMAP.html#method-c-max_flag_count","()","<p>Returns the max number of flags interned to symbols.\n"],["max_flag_count=","Net::IMAP","Net/IMAP.html#method-c-max_flag_count-3D","(count)","<p>Sets the max number of flags interned to symbols.\n"],["media_subtype","Net::IMAP::BodyTypeBasic","Net/IMAP/BodyTypeBasic.html#method-i-media_subtype","()","<p>Obsolete: use <code>subtype</code> instead.  Calling this will generate a\nwarning message to <code>stderr</code>, then return the …\n"],["media_subtype","Net::IMAP::BodyTypeMessage","Net/IMAP/BodyTypeMessage.html#method-i-media_subtype","()","<p>Obsolete: use <code>subtype</code> instead.  Calling this will generate a\nwarning message to <code>stderr</code>, then return the …\n"],["media_subtype","Net::IMAP::BodyTypeMultipart","Net/IMAP/BodyTypeMultipart.html#method-i-media_subtype","()","<p>Obsolete: use <code>subtype</code> instead.  Calling this will generate a\nwarning message to <code>stderr</code>, then return the …\n"],["media_subtype","Net::IMAP::BodyTypeText","Net/IMAP/BodyTypeText.html#method-i-media_subtype","()","<p>Obsolete: use <code>subtype</code> instead.  Calling this will generate a\nwarning message to <code>stderr</code>, then return the …\n"],["multipart?","Net::IMAP::BodyTypeAttachment","Net/IMAP/BodyTypeAttachment.html#method-i-multipart-3F","()",""],["multipart?","Net::IMAP::BodyTypeBasic","Net/IMAP/BodyTypeBasic.html#method-i-multipart-3F","()",""],["multipart?","Net::IMAP::BodyTypeExtension","Net/IMAP/BodyTypeExtension.html#method-i-multipart-3F","()",""],["multipart?","Net::IMAP::BodyTypeMessage","Net/IMAP/BodyTypeMessage.html#method-i-multipart-3F","()",""],["multipart?","Net::IMAP::BodyTypeMultipart","Net/IMAP/BodyTypeMultipart.html#method-i-multipart-3F","()",""],["multipart?","Net::IMAP::BodyTypeText","Net/IMAP/BodyTypeText.html#method-i-multipart-3F","()",""],["new","Net::IMAP","Net/IMAP.html#method-c-new","(host, port_or_options = {}, usessl = false, certs = nil, verify = true)","<p>Creates a new Net::IMAP object and connects it to the specified\n<code>host</code>.\n<p><code>options</code> is an option hash, each ...\n"],["new","Net::IMAP::CramMD5Authenticator","Net/IMAP/CramMD5Authenticator.html#method-c-new","(user, password)",""],["new","Net::IMAP::DigestMD5Authenticator","Net/IMAP/DigestMD5Authenticator.html#method-c-new","(user, password, authname = nil)",""],["new","Net::IMAP::LoginAuthenticator","Net/IMAP/LoginAuthenticator.html#method-c-new","(user, password)",""],["new","Net::IMAP::PlainAuthenticator","Net/IMAP/PlainAuthenticator.html#method-c-new","(user, password)",""],["new","Net::IMAP::ResponseError","Net/IMAP/ResponseError.html#method-c-new","(response)",""],["noop","Net::IMAP","Net/IMAP.html#method-i-noop","()","<p>Sends a NOOP command to the server. It does nothing.\n"],["process","Net::IMAP::CramMD5Authenticator","Net/IMAP/CramMD5Authenticator.html#method-i-process","(challenge)",""],["process","Net::IMAP::DigestMD5Authenticator","Net/IMAP/DigestMD5Authenticator.html#method-i-process","(challenge)",""],["process","Net::IMAP::LoginAuthenticator","Net/IMAP/LoginAuthenticator.html#method-i-process","(data)",""],["process","Net::IMAP::PlainAuthenticator","Net/IMAP/PlainAuthenticator.html#method-i-process","(data)",""],["remove_response_handler","Net::IMAP","Net/IMAP.html#method-i-remove_response_handler","(handler)","<p>Removes the response handler.\n"],["rename","Net::IMAP","Net/IMAP.html#method-i-rename","(mailbox, newname)","<p>Sends a RENAME command to change the name of the <code>mailbox</code> to\n<code>newname</code>.\n<p>A Net::IMAP::NoResponseError is raised …\n"],["search","Net::IMAP","Net/IMAP.html#method-i-search","(keys, charset = nil)","<p>Sends a SEARCH command to search the mailbox for messages that match the\ngiven searching criteria, and …\n"],["select","Net::IMAP","Net/IMAP.html#method-i-select","(mailbox)","<p>Sends a SELECT command to select a <code>mailbox</code> so that messages in\nthe <code>mailbox</code> can be accessed.\n<p>After you …\n"],["setacl","Net::IMAP","Net/IMAP.html#method-i-setacl","(mailbox, user, rights)","<p>Sends the SETACL command along with <code>mailbox</code>, <code>user</code>\nand the <code>rights</code> that user is to have on that mailbox. …\n"],["setquota","Net::IMAP","Net/IMAP.html#method-i-setquota","(mailbox, quota)","<p>Sends a SETQUOTA command along with the specified <code>mailbox</code> and\n<code>quota</code>.  If <code>quota</code> is nil, then <code>quota</code>\nwill …\n"],["sort","Net::IMAP","Net/IMAP.html#method-i-sort","(sort_keys, search_keys, charset)","<p>Sends a SORT command to sort messages in the mailbox. Returns an array of\nmessage sequence numbers.  …\n"],["starttls","Net::IMAP","Net/IMAP.html#method-i-starttls","(options = {}, verify = true)","<p>Sends a STARTTLS command to start TLS session.\n"],["status","Net::IMAP","Net/IMAP.html#method-i-status","(mailbox, attr)","<p>Sends a STATUS command, and returns the status of the indicated\n<code>mailbox</code>. <code>attr</code> is a list of one or more …\n"],["store","Net::IMAP","Net/IMAP.html#method-i-store","(set, attr, flags)","<p>Sends a STORE command to alter data associated with messages in the\nmailbox, in particular their flags. …\n"],["subscribe","Net::IMAP","Net/IMAP.html#method-i-subscribe","(mailbox)","<p>Sends a SUBSCRIBE command to add the specified <code>mailbox</code> name to\nthe server’s set of “active” …\n"],["thread","Net::IMAP","Net/IMAP.html#method-i-thread","(algorithm, search_keys, charset)","<p>Similar to #search(), but returns message sequence numbers in threaded\nformat, as a Net::IMAP::ThreadMember …\n"],["uid_copy","Net::IMAP","Net/IMAP.html#method-i-uid_copy","(set, mailbox)","<p>Similar to #copy(), but <code>set</code> contains unique identifiers.\n"],["uid_fetch","Net::IMAP","Net/IMAP.html#method-i-uid_fetch","(set, attr)","<p>Similar to #fetch(), but <code>set</code> contains unique identifiers.\n"],["uid_search","Net::IMAP","Net/IMAP.html#method-i-uid_search","(keys, charset = nil)","<p>Similar to #search(), but returns unique identifiers.\n"],["uid_sort","Net::IMAP","Net/IMAP.html#method-i-uid_sort","(sort_keys, search_keys, charset)","<p>Similar to #sort(), but returns an array of unique identifiers.\n"],["uid_store","Net::IMAP","Net/IMAP.html#method-i-uid_store","(set, attr, flags)","<p>Similar to #store(), but <code>set</code> contains unique identifiers.\n"],["uid_thread","Net::IMAP","Net/IMAP.html#method-i-uid_thread","(algorithm, search_keys, charset)","<p>Similar to #thread(), but returns unique identifiers instead of message\nsequence numbers.\n"],["unsubscribe","Net::IMAP","Net/IMAP.html#method-i-unsubscribe","(mailbox)","<p>Sends a UNSUBSCRIBE command to remove the specified <code>mailbox</code>\nname from the server’s set of “active” …\n"],["valid_number?","Net::IMAP::NumValidator","Net/IMAP/NumValidator.html#method-c-valid_number-3F","(num)","<p>Check is passed argument valid ‘number’ in RFC 3501 terminology\n"],["valid_nz_number?","Net::IMAP::NumValidator","Net/IMAP/NumValidator.html#method-c-valid_nz_number-3F","(num)","<p>Check is passed argument valid ‘nz_number’ in RFC 3501 terminology\n"],["xlist","Net::IMAP","Net/IMAP.html#method-i-xlist","(refname, mailbox)","<p>Sends a XLIST command, and returns a subset of names from the complete set\nof all names available to …\n"]]}}
var search_data = {"index":{"searchIndex":["net","smtp","response","smtpauthenticationerror","smtperror","smtpfatalerror","smtpserverbusy","smtpsyntaxerror","smtpunknownerror","smtpunsupportedcommand","auth_cram_md5()","auth_login()","auth_plain()","authenticate()","capabilities()","capable_auth_types()","capable_cram_md5_auth?()","capable_login_auth?()","capable_plain_auth?()","capable_starttls?()","continue?()","cram_md5_challenge()","data()","debug_output=()","default_port()","default_ssl_context()","default_ssl_port()","default_submission_port()","default_tls_port()","disable_ssl()","disable_starttls()","disable_tls()","ehlo()","enable_ssl()","enable_starttls()","enable_starttls_auto()","enable_tls()","exception_class()","finish()","helo()","inspect()","mailfrom()","message()","new()","new()","open_message_stream()","parse()","quit()","rcptto()","rcptto_list()","read_timeout=()","ready()","rset()","send_mail()","send_message()","sendmail()","set_debug_output()","ssl?()","start()","start()","started?()","starttls()","starttls?()","starttls_always?()","starttls_auto?()","status_type_char()","success?()","tls?()"],"longSearchIndex":["net","net::smtp","net::smtp::response","net::smtpauthenticationerror","net::smtperror","net::smtpfatalerror","net::smtpserverbusy","net::smtpsyntaxerror","net::smtpunknownerror","net::smtpunsupportedcommand","net::smtp#auth_cram_md5()","net::smtp#auth_login()","net::smtp#auth_plain()","net::smtp#authenticate()","net::smtp::response#capabilities()","net::smtp#capable_auth_types()","net::smtp#capable_cram_md5_auth?()","net::smtp#capable_login_auth?()","net::smtp#capable_plain_auth?()","net::smtp#capable_starttls?()","net::smtp::response#continue?()","net::smtp::response#cram_md5_challenge()","net::smtp#data()","net::smtp#debug_output=()","net::smtp::default_port()","net::smtp::default_ssl_context()","net::smtp::default_ssl_port()","net::smtp::default_submission_port()","net::smtp::default_tls_port()","net::smtp#disable_ssl()","net::smtp#disable_starttls()","net::smtp#disable_tls()","net::smtp#ehlo()","net::smtp#enable_ssl()","net::smtp#enable_starttls()","net::smtp#enable_starttls_auto()","net::smtp#enable_tls()","net::smtp::response#exception_class()","net::smtp#finish()","net::smtp#helo()","net::smtp#inspect()","net::smtp#mailfrom()","net::smtp::response#message()","net::smtp::new()","net::smtp::response::new()","net::smtp#open_message_stream()","net::smtp::response::parse()","net::smtp#quit()","net::smtp#rcptto()","net::smtp#rcptto_list()","net::smtp#read_timeout=()","net::smtp#ready()","net::smtp#rset()","net::smtp#send_mail()","net::smtp#send_message()","net::smtp#sendmail()","net::smtp#set_debug_output()","net::smtp#ssl?()","net::smtp::start()","net::smtp#start()","net::smtp#started?()","net::smtp#starttls()","net::smtp#starttls?()","net::smtp#starttls_always?()","net::smtp#starttls_auto?()","net::smtp::response#status_type_char()","net::smtp::response#success?()","net::smtp#tls?()"],"info":[["Net","","Net.html","",""],["Net::SMTP","","Net/SMTP.html","","<p>What is This Library?\n<p>This library provides functionality to send internet mail via SMTP, the\nSimple  …\n"],["Net::SMTP::Response","","Net/SMTP/Response.html","","<p>This class represents a response received by the SMTP server. Instances of\nthis class are created by …\n"],["Net::SMTPAuthenticationError","","Net/SMTPAuthenticationError.html","","<p>Represents an SMTP authentication error.\n"],["Net::SMTPError","","Net/SMTPError.html","","<p>Module mixed in to all SMTP error classes\n"],["Net::SMTPFatalError","","Net/SMTPFatalError.html","","<p>Represents a fatal SMTP error (error code 5xx, except for 500)\n"],["Net::SMTPServerBusy","","Net/SMTPServerBusy.html","","<p>Represents SMTP error code 420 or 450, a temporary error.\n"],["Net::SMTPSyntaxError","","Net/SMTPSyntaxError.html","","<p>Represents an SMTP command syntax error (error code 500)\n"],["Net::SMTPUnknownError","","Net/SMTPUnknownError.html","","<p>Unexpected reply code returned from server.\n"],["Net::SMTPUnsupportedCommand","","Net/SMTPUnsupportedCommand.html","","<p>Command is not supported on server.\n"],["auth_cram_md5","Net::SMTP","Net/SMTP.html#method-i-auth_cram_md5","(user, secret)",""],["auth_login","Net::SMTP","Net/SMTP.html#method-i-auth_login","(user, secret)",""],["auth_plain","Net::SMTP","Net/SMTP.html#method-i-auth_plain","(user, secret)",""],["authenticate","Net::SMTP","Net/SMTP.html#method-i-authenticate","(user, secret, authtype = DEFAULT_AUTH_TYPE)",""],["capabilities","Net::SMTP::Response","Net/SMTP/Response.html#method-i-capabilities","()","<p>Returns a hash of the human readable reply text in the response if it is\nmultiple lines. It does not …\n"],["capable_auth_types","Net::SMTP","Net/SMTP.html#method-i-capable_auth_types","()","<p>Returns supported authentication methods on this server. You cannot get\nvalid value before opening SMTP …\n"],["capable_cram_md5_auth?","Net::SMTP","Net/SMTP.html#method-i-capable_cram_md5_auth-3F","()","<p>true if server advertises AUTH CRAM-MD5. You cannot get valid value before\nopening SMTP session.\n"],["capable_login_auth?","Net::SMTP","Net/SMTP.html#method-i-capable_login_auth-3F","()","<p>true if server advertises AUTH LOGIN. You cannot get valid value before\nopening SMTP session.\n"],["capable_plain_auth?","Net::SMTP","Net/SMTP.html#method-i-capable_plain_auth-3F","()","<p>true if server advertises AUTH PLAIN. You cannot get valid value before\nopening SMTP session.\n"],["capable_starttls?","Net::SMTP","Net/SMTP.html#method-i-capable_starttls-3F","()","<p>true if server advertises STARTTLS. You cannot get valid value before\nopening SMTP session.\n"],["continue?","Net::SMTP::Response","Net/SMTP/Response.html#method-i-continue-3F","()","<p>Determines whether the response received was a Positive Intermediate reply\n(3xx reply code)\n"],["cram_md5_challenge","Net::SMTP::Response","Net/SMTP/Response.html#method-i-cram_md5_challenge","()","<p>Creates a CRAM-MD5 challenge. You can view more information on CRAM-MD5 on\nWikipedia: en.wikipedia.org/wiki/CRAM-MD5 …\n"],["data","Net::SMTP","Net/SMTP.html#method-i-data","(msgstr = nil)","<p>This method sends a message. If <code>msgstr</code> is given, sends it as a\nmessage. If block is given, yield a message …\n"],["debug_output=","Net::SMTP","Net/SMTP.html#method-i-debug_output-3D","(arg)","<p>WARNING: This method causes serious security holes. Use this method for\nonly debugging.\n<p>Set an output …\n"],["default_port","Net::SMTP","Net/SMTP.html#method-c-default_port","()","<p>The default SMTP port number, 25.\n"],["default_ssl_context","Net::SMTP","Net/SMTP.html#method-c-default_ssl_context","()",""],["default_ssl_port","Net::SMTP","Net/SMTP.html#method-c-default_ssl_port","()",""],["default_submission_port","Net::SMTP","Net/SMTP.html#method-c-default_submission_port","()","<p>The default mail submission port number, 587.\n"],["default_tls_port","Net::SMTP","Net/SMTP.html#method-c-default_tls_port","()","<p>The default SMTPS port number, 465.\n"],["disable_ssl","Net::SMTP","Net/SMTP.html#method-i-disable_ssl","()",""],["disable_starttls","Net::SMTP","Net/SMTP.html#method-i-disable_starttls","()","<p>Disables SMTP/TLS (STARTTLS) for this object.  Must be called before the\nconnection is established to …\n"],["disable_tls","Net::SMTP","Net/SMTP.html#method-i-disable_tls","()","<p>Disables SMTP/TLS for this object.  Must be called before the connection is\nestablished to have any effect. …\n"],["ehlo","Net::SMTP","Net/SMTP.html#method-i-ehlo","(domain)",""],["enable_ssl","Net::SMTP","Net/SMTP.html#method-i-enable_ssl","(context = SMTP.default_ssl_context)",""],["enable_starttls","Net::SMTP","Net/SMTP.html#method-i-enable_starttls","(context = SMTP.default_ssl_context)","<p>Enables SMTP/TLS (STARTTLS) for this object. <code>context</code> is a\nOpenSSL::SSL::SSLContext object.\n"],["enable_starttls_auto","Net::SMTP","Net/SMTP.html#method-i-enable_starttls_auto","(context = SMTP.default_ssl_context)","<p>Enables SMTP/TLS (STARTTLS) for this object if server accepts.\n<code>context</code> is a OpenSSL::SSL::SSLContext …\n"],["enable_tls","Net::SMTP","Net/SMTP.html#method-i-enable_tls","(context = SMTP.default_ssl_context)","<p>Enables SMTP/TLS (SMTPS: SMTP over direct TLS connection) for this object. \nMust be called before the …\n"],["exception_class","Net::SMTP::Response","Net/SMTP/Response.html#method-i-exception_class","()","<p>Determines whether there was an error and raises the appropriate error\nbased on the reply code of the …\n"],["finish","Net::SMTP","Net/SMTP.html#method-i-finish","()","<p>Finishes the SMTP session and closes TCP connection. Raises IOError if not\nstarted.\n"],["helo","Net::SMTP","Net/SMTP.html#method-i-helo","(domain)",""],["inspect","Net::SMTP","Net/SMTP.html#method-i-inspect","()","<p>Provide human-readable stringification of class state.\n"],["mailfrom","Net::SMTP","Net/SMTP.html#method-i-mailfrom","(from_addr)",""],["message","Net::SMTP::Response","Net/SMTP/Response.html#method-i-message","()","<p>The first line of the human readable reply text\n"],["new","Net::SMTP","Net/SMTP.html#method-c-new","(address, port = nil)","<p>Creates a new Net::SMTP object.\n<p><code>address</code> is the hostname or ip address of your SMTP server. \n<code>port</code> is the ...\n"],["new","Net::SMTP::Response","Net/SMTP/Response.html#method-c-new","(status, string)","<p>Creates a new instance of the Response class and sets the status and string\nattributes\n"],["open_message_stream","Net::SMTP","Net/SMTP.html#method-i-open_message_stream","(from_addr, *to_addrs)","<p>Opens a message writer stream and gives it to the block. The stream is\nvalid only in the block, and has …\n"],["parse","Net::SMTP::Response","Net/SMTP/Response.html#method-c-parse","(str)","<p>Parses the received response and separates the reply code and the human\nreadable reply text\n"],["quit","Net::SMTP","Net/SMTP.html#method-i-quit","()",""],["rcptto","Net::SMTP","Net/SMTP.html#method-i-rcptto","(to_addr)",""],["rcptto_list","Net::SMTP","Net/SMTP.html#method-i-rcptto_list","(to_addrs)",""],["read_timeout=","Net::SMTP","Net/SMTP.html#method-i-read_timeout-3D","(sec)","<p>Set the number of seconds to wait until timing-out a read(2) call.\n"],["ready","Net::SMTP","Net/SMTP.html#method-i-ready","(from_addr, *to_addrs)",""],["rset","Net::SMTP","Net/SMTP.html#method-i-rset","()","<p>Aborts the current mail transaction\n"],["send_mail","Net::SMTP","Net/SMTP.html#method-i-send_mail","(msgstr, from_addr, *to_addrs)",""],["send_message","Net::SMTP","Net/SMTP.html#method-i-send_message","(msgstr, from_addr, *to_addrs)","<p>Sends <code>msgstr</code> as a message.  Single CR (“r”) and LF (“n”) found\nin the <code>msgstr</code>, are …\n"],["sendmail","Net::SMTP","Net/SMTP.html#method-i-sendmail","(msgstr, from_addr, *to_addrs)",""],["set_debug_output","Net::SMTP","Net/SMTP.html#method-i-set_debug_output","(arg)",""],["ssl?","Net::SMTP","Net/SMTP.html#method-i-ssl-3F","()",""],["start","Net::SMTP","Net/SMTP.html#method-c-start","(address, port = nil, helo = 'localhost', user = nil, secret = nil, authtype = nil)","<p>Creates a new Net::SMTP object and connects to the server.\n<p>This method is equivalent to:\n\n<pre>Net::SMTP.new(address, ...</pre>\n"],["start","Net::SMTP","Net/SMTP.html#method-i-start","(helo = 'localhost', user = nil, secret = nil, authtype = nil)","<p>Opens a TCP connection and starts the SMTP session.\n<p>Parameters\n<p><code>helo</code> is the <em>HELO</em> <em>domain</em> that you'll dispatch\n...\n"],["started?","Net::SMTP","Net/SMTP.html#method-i-started-3F","()","<p><code>true</code> if the SMTP session has been started.\n"],["starttls","Net::SMTP","Net/SMTP.html#method-i-starttls","()",""],["starttls?","Net::SMTP","Net/SMTP.html#method-i-starttls-3F","()","<p>Returns truth value if this object uses STARTTLS. If this object always\nuses STARTTLS, returns :always. …\n"],["starttls_always?","Net::SMTP","Net/SMTP.html#method-i-starttls_always-3F","()","<p>true if this object uses STARTTLS.\n"],["starttls_auto?","Net::SMTP","Net/SMTP.html#method-i-starttls_auto-3F","()","<p>true if this object uses STARTTLS when server advertises STARTTLS.\n"],["status_type_char","Net::SMTP::Response","Net/SMTP/Response.html#method-i-status_type_char","()","<p>Takes the first digit of the reply code to determine the status type\n"],["success?","Net::SMTP::Response","Net/SMTP/Response.html#method-i-success-3F","()","<p>Determines whether the response received was a Positive Completion reply\n(2xx reply code)\n"],["tls?","Net::SMTP","Net/SMTP.html#method-i-tls-3F","()","<p>true if this object uses SMTP/TLS (SMTPS).\n"]]}}
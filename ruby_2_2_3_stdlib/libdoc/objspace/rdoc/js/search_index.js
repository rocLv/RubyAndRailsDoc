var search_data = {"index":{"searchIndex":["objectspace","internalobjectwrapper","allocation_class_path()","allocation_generation()","allocation_method_id()","allocation_sourcefile()","allocation_sourceline()","count_nodes()","count_objects_size()","count_tdata_objects()","dump()","dump_all()","inspect()","internal_object_id()","memsize_of()","memsize_of_all()","reachable_objects_from()","reachable_objects_from_root()","trace_object_allocations()","trace_object_allocations_clear()","trace_object_allocations_debug_start()","trace_object_allocations_start()","trace_object_allocations_stop()","type()"],"longSearchIndex":["objectspace","objectspace::internalobjectwrapper","objectspace::allocation_class_path()","objectspace::allocation_generation()","objectspace::allocation_method_id()","objectspace::allocation_sourcefile()","objectspace::allocation_sourceline()","objectspace::count_nodes()","objectspace::count_objects_size()","objectspace::count_tdata_objects()","objectspace::dump()","objectspace::dump_all()","objectspace::internalobjectwrapper#inspect()","objectspace::internalobjectwrapper#internal_object_id()","objectspace::memsize_of()","objectspace::memsize_of_all()","objectspace::reachable_objects_from()","objectspace::reachable_objects_from_root()","objectspace::trace_object_allocations()","objectspace::trace_object_allocations_clear()","objectspace::trace_object_allocations_debug_start()","objectspace::trace_object_allocations_start()","objectspace::trace_object_allocations_stop()","objectspace::internalobjectwrapper#type()"],"info":[["ObjectSpace","","ObjectSpace.html","","<p>The objspace library extends the ObjectSpace module and adds several\nmethods to get internal statistic ...\n"],["ObjectSpace::InternalObjectWrapper","","ObjectSpace/InternalObjectWrapper.html","","<p>This class is used as a return value from\nObjectSpace::reachable_objects_from.\n<p>When ObjectSpace::reachable_objects_from …\n"],["allocation_class_path","ObjectSpace","ObjectSpace.html#method-c-allocation_class_path","(p1)","<p>Returns the class for the given <code>object</code>.\n\n<pre>class A\n  def foo\n    ObjectSpace::trace_object_allocations do ...</pre>\n"],["allocation_generation","ObjectSpace","ObjectSpace.html#method-c-allocation_generation","(p1)","<p>Returns garbage collector generation for the given <code>object</code>.\n\n<pre>class B\n  include ObjectSpace\n\n  def foo\n  ...</pre>\n"],["allocation_method_id","ObjectSpace","ObjectSpace.html#method-c-allocation_method_id","(p1)","<p>Returns the method identifier for the given <code>object</code>.\n\n<pre>class A\n  include ObjectSpace\n\n  def foo\n    trace_object_allocations ...</pre>\n"],["allocation_sourcefile","ObjectSpace","ObjectSpace.html#method-c-allocation_sourcefile","(p1)","<p>Returns the source file origin from the given <code>object</code>.\n<p>See ::trace_object_allocations for more information …\n"],["allocation_sourceline","ObjectSpace","ObjectSpace.html#method-c-allocation_sourceline","(p1)","<p>Returns the original line from source for from the given\n<code>object</code>.\n<p>See ::trace_object_allocations for more …\n"],["count_nodes","ObjectSpace","ObjectSpace.html#method-c-count_nodes","(p1 = v1)","<p>Counts nodes for each node type.\n<p>This method is only for MRI developers interested in performance and …\n"],["count_objects_size","ObjectSpace","ObjectSpace.html#method-c-count_objects_size","(p1 = v1)","<p>Counts objects size (in bytes) for each type.\n<p>Note that this information is incomplete.  You need to deal …\n"],["count_tdata_objects","ObjectSpace","ObjectSpace.html#method-c-count_tdata_objects","(p1 = v1)","<p>Counts objects for each <code>T_DATA</code> type.\n<p>This method is only for MRI developers interested in performance …\n"],["dump","ObjectSpace","ObjectSpace.html#method-c-dump","(p1, p2 = {})","<p>Dump the contents of a ruby object as JSON.\n<p>This method is only expected to work with C Ruby. This is …\n"],["dump_all","ObjectSpace","ObjectSpace.html#method-c-dump_all","(p1 = {})","<p>Dump the contents of the ruby heap as JSON.\n<p>This method is only expected to work with C Ruby. This is …\n"],["inspect","ObjectSpace::InternalObjectWrapper","ObjectSpace/InternalObjectWrapper.html#method-i-inspect","()","<p>See Object#inspect.\n"],["internal_object_id","ObjectSpace::InternalObjectWrapper","ObjectSpace/InternalObjectWrapper.html#method-i-internal_object_id","()","<p>Returns the Object#object_id of the internal object.\n"],["memsize_of","ObjectSpace","ObjectSpace.html#method-c-memsize_of","(p1)","<p>Return consuming memory size of obj.\n<p>Note that the return size is incomplete.  You need to deal with this …\n"],["memsize_of_all","ObjectSpace","ObjectSpace.html#method-c-memsize_of_all","(p1 = v1)","<p>Return consuming memory size of all living objects.\n<p>If <code>klass</code> (should be Class object) is given, return …\n"],["reachable_objects_from","ObjectSpace","ObjectSpace.html#method-c-reachable_objects_from","(p1)","<p>MRI specific feature &mdash; Return all reachable objects from `obj’.\n\n<p>This method returns all reachable objects …\n"],["reachable_objects_from_root","ObjectSpace","ObjectSpace.html#method-c-reachable_objects_from_root","()","<p>MRI specific feature &mdash; Return all reachable objects from root.\n\n"],["trace_object_allocations","ObjectSpace","ObjectSpace.html#method-c-trace_object_allocations","()","<p>Starts tracing object allocations from the ObjectSpace extension module.\n<p>For example:\n\n<pre>require 'objspace' ...</pre>\n"],["trace_object_allocations_clear","ObjectSpace","ObjectSpace.html#method-c-trace_object_allocations_clear","()","<p>Clear recorded tracing information.\n"],["trace_object_allocations_debug_start","ObjectSpace","ObjectSpace.html#method-c-trace_object_allocations_debug_start","()",""],["trace_object_allocations_start","ObjectSpace","ObjectSpace.html#method-c-trace_object_allocations_start","()","<p>Starts tracing object allocations.\n"],["trace_object_allocations_stop","ObjectSpace","ObjectSpace.html#method-c-trace_object_allocations_stop","()","<p>Stop tracing object allocations.\n<p>Note that if ::trace_object_allocations_start is called n-times, then …\n"],["type","ObjectSpace::InternalObjectWrapper","ObjectSpace/InternalObjectWrapper.html#method-i-type","()","<p>Returns the type of the internal object.\n"]]}}
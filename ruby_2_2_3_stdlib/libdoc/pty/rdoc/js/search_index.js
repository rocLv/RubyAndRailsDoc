var search_data = {"index":{"searchIndex":["io","pty","childexited","check()","expect()","getpty()","open()","spawn()","status()"],"longSearchIndex":["io","pty","pty::childexited","pty::check()","io#expect()","pty::getpty()","pty::open()","pty::spawn()","pty::childexited#status()"],"info":[["IO","","IO.html","","<p>Expect library adds the IO instance method #expect, which does similar act\nto tcl’s expect extension. …\n"],["PTY","","PTY.html","","<p>Creates and managed pseudo terminals (PTYs).  See also\nen.wikipedia.org/wiki/Pseudo_terminal\n<p>PTY allows …\n"],["PTY::ChildExited","","PTY/ChildExited.html","","<p>Thrown when PTY::check is called for a pid that represents a process that\nhas exited.\n"],["check","PTY","PTY.html#method-c-check","(p1, p2 = v2)","<p>Checks the status of the child process specified by <code>pid</code>.\nReturns <code>nil</code> if the process is still alive.\n<p>If …\n"],["expect","IO","IO.html#method-i-expect","(pat,timeout=9999999)","<p>Reads from the IO until the given <code>pattern</code> matches or the\n<code>timeout</code> is over.\n<p>It returns an array with the …\n"],["getpty","PTY","PTY.html#method-c-getpty","(*args)","<p>Spawns the specified command on a newly allocated pty. You can also use the\nalias ::getpty.\n<p>The command’s …\n"],["open","PTY","PTY.html#method-c-open","()","<p>Allocates a pty (pseudo-terminal).\n<p>In the block form, yields two arguments <code>master_io, slave_file</code>\nand the …\n"],["spawn","PTY","PTY.html#method-c-spawn","(*args)","<p>Spawns the specified command on a newly allocated pty. You can also use the\nalias ::getpty.\n<p>The command’s …\n"],["status","PTY::ChildExited","PTY/ChildExited.html#method-i-status","()","<p>Returns the exit status of the child for which PTY#check raised this\nexception\n"]]}}
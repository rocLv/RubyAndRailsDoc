var search_data = {"index":{"searchIndex":["readline","unknown","basic_quote_characters()","basic_quote_characters=()","basic_word_break_characters()","basic_word_break_characters=()","completer_quote_characters()","completer_quote_characters=()","completer_word_break_characters()","completer_word_break_characters=()","completion_append_character()","completion_append_character=()","completion_case_fold()","completion_case_fold=()","completion_proc()","completion_proc=()","delete_text()","emacs_editing_mode()","emacs_editing_mode?()","filename_quote_characters()","filename_quote_characters=()","get_screen_size()","input=()","insert_text()","line_buffer()","output=()","point()","point=()","pre_input_hook()","pre_input_hook=()","readline()","redisplay()","refresh_line()","set_screen_size()","special_prefixes()","special_prefixes=()","vi_editing_mode()","vi_editing_mode?()"],"longSearchIndex":["readline","unknown","readline::basic_quote_characters()","readline::basic_quote_characters=()","readline::basic_word_break_characters()","readline::basic_word_break_characters=()","readline::completer_quote_characters()","readline::completer_quote_characters=()","readline::completer_word_break_characters()","readline::completer_word_break_characters=()","readline::completion_append_character()","readline::completion_append_character=()","readline::completion_case_fold()","readline::completion_case_fold=()","readline::completion_proc()","readline::completion_proc=()","readline::delete_text()","readline::emacs_editing_mode()","readline::emacs_editing_mode?()","readline::filename_quote_characters()","readline::filename_quote_characters=()","readline::get_screen_size()","readline::input=()","readline::insert_text()","readline::line_buffer()","readline::output=()","readline::point()","readline::point=()","readline::pre_input_hook()","readline::pre_input_hook=()","readline::readline()","readline::redisplay()","readline::refresh_line()","readline::set_screen_size()","readline::special_prefixes()","readline::special_prefixes=()","readline::vi_editing_mode()","readline::vi_editing_mode?()"],"info":[["Readline","","Readline.html","","<p>The Readline module provides interface for GNU Readline. This module\ndefines a number of methods to facilitate ...\n"],["unknown","","unknown.html","",""],["basic_quote_characters","Readline","Readline.html#method-c-basic_quote_characters","()","<p>Gets a list of quote characters which can cause a word break.\n<p>Raises NotImplementedError if the using …\n"],["basic_quote_characters=","Readline","Readline.html#method-c-basic_quote_characters-3D","(p1)","<p>Sets a list of quote characters which can cause a word break.\n<p>Raises NotImplementedError if the using …\n"],["basic_word_break_characters","Readline","Readline.html#method-c-basic_word_break_characters","()","<p>Gets the basic list of characters that signal a break between words for the\ncompleter routine.\n<p>Raises …\n"],["basic_word_break_characters=","Readline","Readline.html#method-c-basic_word_break_characters-3D","(p1)","<p>Sets the basic list of characters that signal a break between words for the\ncompleter routine. The default …\n"],["completer_quote_characters","Readline","Readline.html#method-c-completer_quote_characters","()","<p>Gets a list of characters which can be used to quote a substring of the\nline.\n<p>Raises NotImplementedError …\n"],["completer_quote_characters=","Readline","Readline.html#method-c-completer_quote_characters-3D","(p1)","<p>Sets a list of characters which can be used to quote a substring of the\nline. Completion occurs on the …\n"],["completer_word_break_characters","Readline","Readline.html#method-c-completer_word_break_characters","()","<p>Gets the basic list of characters that signal a break between words for\nrl_complete_internal().\n<p>Raises …\n"],["completer_word_break_characters=","Readline","Readline.html#method-c-completer_word_break_characters-3D","(p1)","<p>Sets the basic list of characters that signal a break between words for\nrl_complete_internal(). The default …\n"],["completion_append_character","Readline","Readline.html#method-c-completion_append_character","()","<p>Returns a string containing a character to be appended on completion. The\ndefault is a space (“ …\n"],["completion_append_character=","Readline","Readline.html#method-c-completion_append_character-3D","(p1)","<p>Specifies a character to be appended on completion. Nothing will be\nappended if an empty string (“”) …\n"],["completion_case_fold","Readline","Readline.html#method-c-completion_case_fold","()","<p>Returns true if completion ignores case. If no, returns false.\n<p>NOTE: Returns the same object that is specified …\n"],["completion_case_fold=","Readline","Readline.html#method-c-completion_case_fold-3D","(p1)","<p>Sets whether or not to ignore case on completion.\n"],["completion_proc","Readline","Readline.html#method-c-completion_proc","()","<p>Returns the completion Proc object.\n"],["completion_proc=","Readline","Readline.html#method-c-completion_proc-3D","(p1)","<p>Specifies a Proc object <code>proc</code> to determine completion behavior.\nIt should take input string and return …\n"],["delete_text","Readline","Readline.html#method-c-delete_text","(*args)","<p>Delete text between start and end in the current line.\n<p>See GNU Readline’s rl_delete_text function.\n<p>Raises …\n"],["emacs_editing_mode","Readline","Readline.html#method-c-emacs_editing_mode","()","<p>Specifies Emacs editing mode. The default is this mode. See the manual of\nGNU Readline for details of …\n"],["emacs_editing_mode?","Readline","Readline.html#method-c-emacs_editing_mode-3F","()","<p>Returns true if emacs mode is active. Returns false if not.\n<p>Raises NotImplementedError if the using readline …\n"],["filename_quote_characters","Readline","Readline.html#method-c-filename_quote_characters","()","<p>Gets a list of characters that cause a filename to be quoted by the\ncompleter when they appear in a completed …\n"],["filename_quote_characters=","Readline","Readline.html#method-c-filename_quote_characters-3D","(p1)","<p>Sets a list of characters that cause a filename to be quoted by the\ncompleter when they appear in a completed …\n"],["get_screen_size","Readline","Readline.html#method-c-get_screen_size","()","<p>Returns the terminal’s rows and columns.\n<p>See GNU Readline’s rl_get_screen_size function.\n<p>Raises NotImplementedError …\n"],["input=","Readline","Readline.html#method-c-input-3D","(p1)","<p>Specifies a File object <code>input</code> that is input stream for\nReadline.readline method.\n"],["insert_text","Readline","Readline.html#method-c-insert_text","(p1)","<p>Insert text into the line at the current cursor position.\n<p>See GNU Readline’s rl_insert_text function. …\n"],["line_buffer","Readline","Readline.html#method-c-line_buffer","()","<p>Returns the full line that is being edited. This is useful from within the\ncomplete_proc for determining …\n"],["output=","Readline","Readline.html#method-c-output-3D","(p1)","<p>Specifies a File object <code>output</code> that is output stream for\nReadline.readline method.\n"],["point","Readline","Readline.html#method-c-point","()","<p>Returns the index of the current cursor position in\n<code>Readline.line_buffer</code>.\n<p>The index in <code>Readline.line_buffer</code> …\n"],["point=","Readline","Readline.html#method-c-point-3D","(p1)","<p>Set the index of the current cursor position in\n<code>Readline.line_buffer</code>.\n<p>Raises NotImplementedError if the …\n"],["pre_input_hook","Readline","Readline.html#method-c-pre_input_hook","()","<p>Returns a Proc object <code>proc</code> to call after the first prompt has\nbeen printed and just before readline starts …\n"],["pre_input_hook=","Readline","Readline.html#method-c-pre_input_hook-3D","(p1)","<p>Specifies a Proc object <code>proc</code> to call after the first prompt\nhas been printed and just before readline …\n"],["readline","Readline","Readline.html#method-c-readline","(p1 = v1, p2 = v2)","<p>Shows the <code>prompt</code> and reads the inputted line with line\nediting. The inputted line is added to the history …\n"],["redisplay","Readline","Readline.html#method-c-redisplay","()","<p>Change what’s displayed on the screen to reflect the current contents.\n<p>See GNU Readline’s rl_redisplay …\n"],["refresh_line","Readline","Readline.html#method-c-refresh_line","()","<p>Clear the current input line.\n"],["set_screen_size","Readline","Readline.html#method-c-set_screen_size","(p1, p2)","<p>Set terminal size to <code>rows</code> and <code>columns</code>.\n<p>See GNU Readline’s rl_set_screen_size function.\n<p>Raises NotImplementedError …\n"],["special_prefixes","Readline","Readline.html#method-c-special_prefixes","()","<p>Gets the list of characters that are word break characters, but should be\nleft in text when it is passed …\n"],["special_prefixes=","Readline","Readline.html#method-c-special_prefixes-3D","(p1)","<p>Sets the list of characters that are word break characters, but should be\nleft in text when it is passed …\n"],["vi_editing_mode","Readline","Readline.html#method-c-vi_editing_mode","()","<p>Specifies VI editing mode. See the manual of GNU Readline for details of VI\nediting mode.\n<p>Raises NotImplementedError …\n"],["vi_editing_mode?","Readline","Readline.html#method-c-vi_editing_mode-3F","()","<p>Returns true if vi mode is active. Returns false if not.\n<p>Raises NotImplementedError if the using readline …\n"]]}}
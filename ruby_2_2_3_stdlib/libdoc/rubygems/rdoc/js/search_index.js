var search_data = {"index":{"searchIndex":["gem","availableset","basicspecification","command","commandlineerror","commandmanager","commands","buildcommand","certcommand","checkcommand","cleanupcommand","contentscommand","dependencycommand","environmentcommand","fetchcommand","generateindexcommand","helpcommand","installcommand","listcommand","lockcommand","mirrorcommand","opencommand","outdatedcommand","ownercommand","pristinecommand","pushcommand","querycommand","rdoccommand","searchcommand","servercommand","setupcommand","sourcescommand","specificationcommand","stalecommand","uninstallcommand","unpackcommand","updatecommand","whichcommand","yankcommand","configfile","psych","conflicterror","consoleui","defaultuserinteraction","dependency","dependencyerror","dependencyinstaller","dependencylist","dependencyremovalexception","dependencyresolutionerror","deprecate","doctor","documenterror","endofyamlexception","errorreason","exception","ext","builderror","builder","cmakebuilder","configurebuilder","extconfbuilder","rakebuilder","fakefetcher","filepermissionerror","formatexception","gemnotfoundexception","gemnotinhomeexception","gemrunner","gemcutterutilities","impossibledependencieserror","indexer","installerror","installupdateoptions","installer","installertestcase","invalidspecificationexception","list","loaderror","localremoteoptions","mockgemui","inputeoferror","systemexitexception","tty","termerror","nametuple","noaliasyamltree","operationnotsupportederror","package","digestio","error","formaterror","nonseekableio","old","patherror","tarheader","tarinvaliderror","tarreader","entry","unexpectedeof","tartestcase","tarwriter","boundedstream","fileoverflow","restrictedstream","toolongfilename","packagetask","pathsupport","platform","platformmismatch","rbconfig","remoteerror","remotefetcher","fetcherror","unknownhosterror","remoteinstallationcancelled","remoteinstallationskipped","remotesourceexception","request","connectionpools","net","requestset","gemdependencyapi","lockfile","parseerror","requirement","badrequirementerror","resolver","apiset","apispecification","activationrequest","bestset","composedset","conflict","currentset","dependencyrequest","gitset","gitspecification","indexset","indexspecification","installedspecification","installerset","localspecification","lockset","lockspecification","requirementlist","set","specspecification","specification","stats","vendorset","vendorspecification","rubyversionmismatch","security","exception","policy","signer","trustdir","server","silentui","source","git","installed","local","lock","specificfile","vendor","sourcefetchproblem","sourcelist","specfetcher","specificgemnotfoundexception","specification","streamui","silentdownloadreporter","silentprogressreporter","simpleprogressreporter","verbosedownloadreporter","verboseprogressreporter","stringsink","stringsource","stubspecification","systemexitexception","testcase","specfetchersetup","staticset","text","uninstaller","unsatisfiabledependencyerror","uriformatter","userinteraction","util","validator","verificationerror","version","versionoption","kernel","object","openssl","tempio","yaml","syck","syck","<<()","<<()","<=>()","<=>()","<=>()","<=>()","<=>()","<=>()","<=>()","<=>()","<=>()","==()","==()","===()","===()","===()","=~()","=~()","=~()","asciiz()","sp()","sp_z()","z()","[]()","[]()","[]=()","_dump()","_gets_noecho()","_load()","abbreviate()","accept_uri_http()","activate()","activate_dependencies()","activated?()","add()","add()","add()","add()","add_git()","add_always_install()","add_bindir()","add_bulk_threshold_option()","add_checksums()","add_clear_sources_option()","add_common_option()","add_date()","add_dependency()","add_development_dependency()","add_extra_args()","add_file()","add_file_digest()","add_file_signed()","add_file_simple()","add_install_update_options()","add_key_option()","add_local()","add_local_remote_options()","add_option()","add_owners()","add_path()","add_platform()","add_platform_option()","add_prerelease_option()","add_proxy_option()","add_runtime_dependency()","add_self_to_load_path()","add_source_option()","add_spec()","add_specific_extra_args()","add_specs()","add_to_fetcher()","add_update_sources_option()","add_version_option()","alert()","alert()","alert_error()","alert_error()","alert_warning()","alert_warning()","alien()","all()","all=()","all_names()","all_spec_names()","all_specs()","alt_name_or_x509_entry()","api_endpoint()","api_endpoint()","api_key()","api_keys()","app_script_text()","approximate_recommendation()","arguments()","array_attributes()","ask()","ask()","ask()","ask_for_password()","ask_for_password()","ask_yes_no()","ask_yes_no()","assert_activate()","assert_contains_make_command()","assert_headers_equal()","assert_path_exists()","attribute_names()","author()","author=()","authors()","authors=()","available_specs()","backtrace()","backtrace()","backtracking!()","base_dir()","begins?()","bin_dir()","bin_file()","bin_path()","binary_mode()","bindir()","both?()","build()","build()","build()","build()","build()","build()","build()","build_args()","build_args()","build_args=()","build_extensions()","build_extensions()","build_indicies()","build_info_dir()","build_info_file()","build_marshal_gemspecs()","build_modern_index()","build_modern_indicies()","build_rake_in()","bump()","bundled_gem_in_old_ruby?()","bytes_read()","cache_dir()","cache_dir()","cache_file()","cache_update_path()","cache_update_path()","calc_checksum()","cert_files()","cert_path()","cert_path()","certificates_matching()","check_cert()","check_chain()","check_closed()","check_credentials_permissions()","check_data()","check_gems()","check_key()","check_root()","check_ruby_version()","check_trust()","choose_from_list()","choose_from_list()","class_name()","clean_gems()","clear()","clear()","clear()","clear_default_specs()","clear_paths()","close()","close()","close()","close()","close()","close_all()","closed?()","closed?()","command_names()","common_installer_setup()","common_installer_teardown()","common_options()","compact_specs()","complain()","compose_sets()","compress()","compress_indicies()","concat()","config_file()","config_file_name()","configuration()","configuration=()","configure_connection_for_https()","conflicting_dependencies()","conflicting_dependencies()","conflicts()","connection_for()","consider_local?()","consider_remote?()","contains_requirable_file?()","contents()","contents()","correct?()","correct_for_windows_path()","create()","create()","create()","create_cert()","create_cert_email()","create_cert_self_signed()","create_key()","create_tmpdir()","created_specs()","credentials_path()","datadir()","date()","date=()","debug()","declare()","default()","default_bindir()","default_cert_path()","default_dir()","default_exec_format()","default_ext_dir_for()","default_gem?()","default_gems_use_full_paths?()","default_key_path()","default_path()","default_rubygems_dirs()","default_sources()","default_spec_cache_dir()","default_spec_file()","default_specifications_dir()","default_value()","defaults_str()","define()","deflate()","delete()","dep()","dependencies()","dependencies()","dependencies()","dependency()","dependency_order()","dependency_request()","dependent_gems()","dependent_specs()","deprecate()","description()","description()","description=()","detect()","detect_gemdeps()","development?()","development?()","development_dependencies()","dir()","dir()","directory?()","dirs()","dirs=()","display()","doc_dir()","doc_root()","doctor()","doctor()","done()","done()","done()","done()","done()","done_installing()","download()","download()","download()","download()","download()","download_reporter()","download_to_cache()","download_to_cache()","each()","each()","each()","each()","each()","each()","each()","each_certificate()","each_entry()","each_source()","each_spec()","email_to_name()","empty?()","empty?()","empty?()","empty?()","enable_shared()","ensure_default_gem_subdirectories()","ensure_dependency()","ensure_gem_subdirectories()","ensure_loadable_spec()","eof?()","eql?()","eql?()","eql?()","error()","errors()","errors()","escape()","exact?()","exec_format()","executable()","executable=()","executables()","executables=()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","explain()","explanation()","explicit?()","extension_dir()","extensions()","extensions=()","extensions_dir()","extra_args()","extra_args=()","extra_rdoc_files()","extra_rdoc_files=()","extract_bin()","extract_files()","extract_files()","extract_files()","fetch()","fetch()","fetch()","fetch_file()","fetch_http()","fetch_https()","fetch_path()","fetch_path()","fetch_s3()","fetch_size()","fetch_size()","fetch_spec()","fetch_spec()","fetcher()","fetcher()","fetcher=()","file?()","file_name()","files()","files=()","files_in()","files_in_default_gem()","files_in_gem()","find()","find_all()","find_all()","find_all()","find_all()","find_all()","find_all()","find_all()","find_all()","find_all()","find_all()","find_all()","find_all_by_name()","find_by_name()","find_by_path()","find_command()","find_command_possibilities()","find_data()","find_files()","find_in_cache()","find_in_unresolved()","find_in_unresolved_tree()","find_inactive_by_path()","find_latest_files()","find_name()","find_paths()","find_spec()","find_spec_by_name_and_version()","find_unresolved_default_spec()","finish_resolve()","first()","flush()","for_cache()","for_current_gems()","for_spec?()","format_text()","formatted_program_filename()","from()","from()","from_list()","from_specs()","from_yaml()","full_gem_path()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_require_paths()","full_spec()","gem()","gem()","gem()","gem()","gem_contents()","gem_dir()","gem_dir()","gem_file_list()","gem_install_dir()","gem_original_require()","gem_repository?()","gems_dir()","gemspec()","generate_bin_script()","generate_bin_symlink()","generate_default_dirs()","generate_index()","generate_windows_script()","get_all_gem_names()","get_all_gem_names_and_versions()","get_candidate_gems()","get_cert_files()","get_env_editor()","get_gems_to_cleanup()","get_metadata()","get_one_gem_name()","get_one_optional_argument()","get_path()","get_primary_gems()","get_proxy_from_env()","getc()","git()","git_gem()","git_source()","group()","gunzip()","gunzip()","gzip()","gzip()","gzip()","gzip_to()","handle_arguments()","handle_options()","handles?()","hash()","have_git?()","have_rdoc_4_plus?()","header()","host()","host()","host=()","https?()","implicit?()","import()","include?()","inflate()","inflate()","init()","initialize()","initialize_copy()","inject_into_list()","input()","inspect()","install()","install()","install()","install()","install()","install()","install()","install()","install()","install_default_gems()","install_default_specs()","install_executables()","install_file()","install_from_gemdeps()","install_gem()","install_gem_user()","install_indicies()","install_into()","install_lib()","install_rdoc()","install_specs()","install_update_defaults_str()","installable?()","installable_platform?()","installable_platform?()","installable_platform?()","installation_satisfies_dependency?()","installed?()","installed_specs()","instance()","instance()","invoke()","invoke_with_build_args()","issuer_of()","iteration!()","key_path()","latest_rubygems_version()","latest_spec_for()","latest_specs()","latest_specs()","latest_version?()","latest_version_for()","launch()","legacy_platform()","levenshtein_distance()","lib_dirs_glob()","lib_files()","license()","license=()","licenses()","licenses=()","listen()","load()","load()","load_api_keys()","load_cert()","load_certificate()","load_default_cert()","load_default_key()","load_defaults()","load_env_plugins()","load_file()","load_gemdeps()","load_key()","load_path_insert_index()","load_plugins()","load_spec()","load_specs()","load_yaml()","loaded_from=()","loaded_spec_names()","local()","local?()","location_of_caller()","make()","make_command()","make_command()","make_destination_dirs()","make_temp_directories()","manage_owners()","map_gems_to_specs()","mark_version()","marshal_dump()","marshal_load()","marshal_version()","match()","match?()","match?()","match_platform!()","match_platform?()","matches_for_glob()","matches_spec?()","matches_spec?()","matching_specs()","merge()","merge_options()","missing_extensions?()","mkdir()","mu_pp()","name()","name()","name()","name()","name()","name_path()","name_tuple()","needs()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_default_spec()","next5()","nmake_found?()","noecho()","non_nil_attributes()","none?()","normalize()","normalize()","normalize_yaml_input()","null()","ok?()","ok_to_remove?()","open_editor()","open_gem()","open_uri_or_path()","others_possible?()","outdated()","outdated_and_latest_version()","output()","paranoid()","parent()","parse()","parse_make_command_line()","path()","path_ok?()","path_separator()","paths()","paths=()","pem_files_in()","pick_best!()","platform()","platform()","platform()","platform()","platform=()","platforms()","platforms()","platforms=()","popen()","pos()","post_build()","post_install()","post_reset()","post_uninstall()","pre_install()","pre_install_checks()","pre_reset()","pre_uninstall()","prefetch()","prefetch()","prefetch()","prefetch()","prefetch()","prefetch()","prefix()","prepend()","prepend()","prerelease=()","prerelease=()","prerelease?()","prerelease?()","prerelease?()","prerelease?()","prerelease_specs()","process_args()","process_based_port()","process_based_port()","progress_reporter()","proxy_uri()","quick()","quick_gem()","rb_files_in()","rdoc()","rdoc_options()","rdoc_options=()","re_sign()","read()","read()","read_binary()","read_binary()","read_cache()","read_checksums()","readpartial()","readpartial()","really_verbose()","record_depth()","record_requirements()","redirector()","refresh()","refute_path_exists()","register()","register_command()","register_default_spec()","release()","remote=()","remote?()","remove()","remove()","remove_all()","remove_by_name()","remove_executables()","remove_installed!()","remove_old_bin_files()","remove_old_lib_files()","remove_option()","remove_owners()","remove_spec()","remove_specs_unsatisfied_by()","remove_unresolved_default_spec()","replace()","req()","request()","request()","request_context()","request_path()","requester()","require_path()","require_path=()","require_paths()","require_paths=()","required_attribute?()","required_attributes()","required_ruby_version=()","required_rubygems_version=()","requirement()","requirement()","requirement!()","requirements()","requirements=()","requirements_list()","reset()","reset()","reset()","reset()","reset_nil_attributes_to_default()","resolve()","resolve()","resolve_current()","rewind()","rewind()","ri_dir()","root()","ruby()","ruby()","ruby=()","ruby_api_version()","ruby_engine()","ruby_version()","rubybin()","rubygems_api_key()","rubygems_api_key=()","rubygems_api_request()","rubygems_target_version()","rubygems_version()","run()","run()","run()","run()","run()","runtime_dependencies()","s3_expiration()","sanitize()","sanitize_string()","satisfied_by?()","satisfies_requirement?()","save_loaded_features()","say()","say()","scan_make_command_lines()","search_for_dependency()","searcher=()","seek()","send_gem()","set_encoding()","setup()","setup()","setup_signer()","shebang()","show_files()","show_help()","show_lookup_failure()","show_owners()","show_rdoc_for_pattern()","show_release_notes()","sign()","sign()","sign()","sign_in()","sign_s3_url()","silent_system()","size()","size()","skip_during()","sort_obj()","sorted()","sorted_requests()","source()","source()","source_for()","source_paths()","sources()","sources=()","spec()","spec()","spec()","spec()","spec()","spec()","spec_cache_dir()","spec_dir()","spec_fetcher()","spec_file()","spec_file()","spec_for()","spec_for()","spec_for_dependency()","spec_name()","spec_name()","spec_path()","spec_predecessors()","specific?()","specific?()","specific_extra_args()","specific_extra_args_hash()","specs()","specs()","specs()","specs_in()","string()","stubbed?()","stubbed?()","stubs()","suffix_pattern()","suffixes()","suggest_gems_from_name()","summary=()","tar_dir_header()","tar_file_header()","teardown()","terminate_interaction()","terminate_interaction()","terminate_interaction()","terminated?()","time()","to_a()","to_a()","to_a()","to_a()","to_ary()","to_basic()","to_fullpath()","to_oct()","to_request_set()","to_ruby()","to_ruby_for_cache()","to_s()","to_s()","to_s()","to_spec()","to_spec()","to_spec()","to_specs()","traverse()","traverse_parents()","trust_cert()","trust_dir()","trusted_certificates()","try_activate()","tsort_each_child()","tsort_each_node()","tty?()","tty?()","type()","ui()","ui()","ui()","ui=()","ui=()","unescape()","uninstall()","uninstall_all()","uninstall_dep()","uninstall_gem()","uninstall_gem()","uninstall_old_gemcutter()","uninstall_specific()","unpack()","unregister_command()","unresolved_deps()","unresolved_names()","unyank_gem()","update()","update()","update_cache?()","update_checksum()","update_gem()","update_gems()","update_index()","update_rubygems()","update_specs_index()","updated()","updated()","updated()","usage()","use_gemdeps()","use_paths()","use_ui()","use_ui()","user_agent()","user_dir()","user_home()","util_build_gem()","util_clear_gems()","util_dir_entry()","util_entry()","util_gem()","util_gzip()","util_inst_bindir()","util_installer()","util_make_exec()","util_make_gems()","util_remove_gem()","util_restore_ruby_version()","util_set_ruby_version()","util_set_arch()","util_setup_fake_fetcher()","util_setup_gem()","util_setup_spec_fetcher()","util_spec()","util_zip()","v()","validate()","validate_permissions()","vc_windows?()","vc_windows?()","vendor_gem()","verbose()","verify()","verify()","verify()","verify()","verify_api_key()","verify_entry()","verify_files()","verify_gem()","verify_gem_file()","verify_signatures()","version()","version()","version()","version()","version()","version=()","visit_string()","wait_for_child_process_to_exit()","when_invoked()","which_to_update()","why_not_ok?()","win_platform=()","win_platform?()","win_platform?()","win_platform?()","windows_stub_script()","with_response()","wordy()","wordy()","wrap()","wrap()","write()","write()","write()","write()","write()","write()","write()","write_build_info_file()","write_cache_file()","write_default_spec()","write_file()","write_spec()","yank_gem()"],"longSearchIndex":["gem","gem::availableset","gem::basicspecification","gem::command","gem::commandlineerror","gem::commandmanager","gem::commands","gem::commands::buildcommand","gem::commands::certcommand","gem::commands::checkcommand","gem::commands::cleanupcommand","gem::commands::contentscommand","gem::commands::dependencycommand","gem::commands::environmentcommand","gem::commands::fetchcommand","gem::commands::generateindexcommand","gem::commands::helpcommand","gem::commands::installcommand","gem::commands::listcommand","gem::commands::lockcommand","gem::commands::mirrorcommand","gem::commands::opencommand","gem::commands::outdatedcommand","gem::commands::ownercommand","gem::commands::pristinecommand","gem::commands::pushcommand","gem::commands::querycommand","gem::commands::rdoccommand","gem::commands::searchcommand","gem::commands::servercommand","gem::commands::setupcommand","gem::commands::sourcescommand","gem::commands::specificationcommand","gem::commands::stalecommand","gem::commands::uninstallcommand","gem::commands::unpackcommand","gem::commands::updatecommand","gem::commands::whichcommand","gem::commands::yankcommand","gem::configfile","gem::configfile::psych","gem::conflicterror","gem::consoleui","gem::defaultuserinteraction","gem::dependency","gem::dependencyerror","gem::dependencyinstaller","gem::dependencylist","gem::dependencyremovalexception","gem::dependencyresolutionerror","gem::deprecate","gem::doctor","gem::documenterror","gem::endofyamlexception","gem::errorreason","gem::exception","gem::ext","gem::ext::builderror","gem::ext::builder","gem::ext::cmakebuilder","gem::ext::configurebuilder","gem::ext::extconfbuilder","gem::ext::rakebuilder","gem::fakefetcher","gem::filepermissionerror","gem::formatexception","gem::gemnotfoundexception","gem::gemnotinhomeexception","gem::gemrunner","gem::gemcutterutilities","gem::impossibledependencieserror","gem::indexer","gem::installerror","gem::installupdateoptions","gem::installer","gem::installertestcase","gem::invalidspecificationexception","gem::list","gem::loaderror","gem::localremoteoptions","gem::mockgemui","gem::mockgemui::inputeoferror","gem::mockgemui::systemexitexception","gem::mockgemui::tty","gem::mockgemui::termerror","gem::nametuple","gem::noaliasyamltree","gem::operationnotsupportederror","gem::package","gem::package::digestio","gem::package::error","gem::package::formaterror","gem::package::nonseekableio","gem::package::old","gem::package::patherror","gem::package::tarheader","gem::package::tarinvaliderror","gem::package::tarreader","gem::package::tarreader::entry","gem::package::tarreader::unexpectedeof","gem::package::tartestcase","gem::package::tarwriter","gem::package::tarwriter::boundedstream","gem::package::tarwriter::fileoverflow","gem::package::tarwriter::restrictedstream","gem::package::toolongfilename","gem::packagetask","gem::pathsupport","gem::platform","gem::platformmismatch","gem::rbconfig","gem::remoteerror","gem::remotefetcher","gem::remotefetcher::fetcherror","gem::remotefetcher::unknownhosterror","gem::remoteinstallationcancelled","gem::remoteinstallationskipped","gem::remotesourceexception","gem::request","gem::request::connectionpools","gem::request::connectionpools::net","gem::requestset","gem::requestset::gemdependencyapi","gem::requestset::lockfile","gem::requestset::lockfile::parseerror","gem::requirement","gem::requirement::badrequirementerror","gem::resolver","gem::resolver::apiset","gem::resolver::apispecification","gem::resolver::activationrequest","gem::resolver::bestset","gem::resolver::composedset","gem::resolver::conflict","gem::resolver::currentset","gem::resolver::dependencyrequest","gem::resolver::gitset","gem::resolver::gitspecification","gem::resolver::indexset","gem::resolver::indexspecification","gem::resolver::installedspecification","gem::resolver::installerset","gem::resolver::localspecification","gem::resolver::lockset","gem::resolver::lockspecification","gem::resolver::requirementlist","gem::resolver::set","gem::resolver::specspecification","gem::resolver::specification","gem::resolver::stats","gem::resolver::vendorset","gem::resolver::vendorspecification","gem::rubyversionmismatch","gem::security","gem::security::exception","gem::security::policy","gem::security::signer","gem::security::trustdir","gem::server","gem::silentui","gem::source","gem::source::git","gem::source::installed","gem::source::local","gem::source::lock","gem::source::specificfile","gem::source::vendor","gem::sourcefetchproblem","gem::sourcelist","gem::specfetcher","gem::specificgemnotfoundexception","gem::specification","gem::streamui","gem::streamui::silentdownloadreporter","gem::streamui::silentprogressreporter","gem::streamui::simpleprogressreporter","gem::streamui::verbosedownloadreporter","gem::streamui::verboseprogressreporter","gem::stringsink","gem::stringsource","gem::stubspecification","gem::systemexitexception","gem::testcase","gem::testcase::specfetchersetup","gem::testcase::staticset","gem::text","gem::uninstaller","gem::unsatisfiabledependencyerror","gem::uriformatter","gem::userinteraction","gem::util","gem::validator","gem::verificationerror","gem::version","gem::versionoption","kernel","object","openssl","tempio","yaml","yaml::syck","yaml::syck","gem::availableset#<<()","gem::sourcelist#<<()","gem::dependency#<=>()","gem::nametuple#<=>()","gem::source#<=>()","gem::source::git#<=>()","gem::source::installed#<=>()","gem::source::local#<=>()","gem::source::specificfile#<=>()","gem::source::vendor#<=>()","gem::version#<=>()","gem::nametuple#==()","gem::platform#==()","gem::dependency#===()","gem::platform#===()","gem::requirement#===()","gem::dependency#=~()","gem::platform#=~()","gem::requirement#=~()","gem::package::tartestcase#asciiz()","gem::package::tartestcase#sp()","gem::package::tartestcase#sp_z()","gem::package::tartestcase#z()","gem::commandmanager#[]()","gem::configfile#[]()","gem::configfile#[]=()","gem::specification#_dump()","gem::streamui#_gets_noecho()","gem::specification::_load()","gem::indexer#abbreviate()","gem::localremoteoptions#accept_uri_http()","gem::specification#activate()","gem::specification#activate_dependencies()","gem::basicspecification#activated?()","gem::availableset#add()","gem::dependencylist#add()","gem::resolver::requirementlist#add()","gem::testcase::staticset#add()","gem::requestset::lockfile#add_git()","gem::resolver::installerset#add_always_install()","gem::specification#add_bindir()","gem::localremoteoptions#add_bulk_threshold_option()","gem::package#add_checksums()","gem::localremoteoptions#add_clear_sources_option()","gem::command::add_common_option()","gem::server#add_date()","gem::specification#add_dependency()","gem::specification#add_development_dependency()","gem::command#add_extra_args()","gem::package::tarwriter#add_file()","gem::package::tarwriter#add_file_digest()","gem::package::tarwriter#add_file_signed()","gem::package::tarwriter#add_file_simple()","gem::installupdateoptions#add_install_update_options()","gem::gemcutterutilities#add_key_option()","gem::resolver::installerset#add_local()","gem::localremoteoptions#add_local_remote_options()","gem::command#add_option()","gem::commands::ownercommand#add_owners()","gem::commands::environmentcommand#add_path()","gem::platformmismatch#add_platform()","gem::versionoption#add_platform_option()","gem::versionoption#add_prerelease_option()","gem::localremoteoptions#add_proxy_option()","gem::specification#add_runtime_dependency()","gem::specification#add_self_to_load_path()","gem::localremoteoptions#add_source_option()","gem::specification::add_spec()","gem::command::add_specific_extra_args()","gem::specification::add_specs()","gem::testcase#add_to_fetcher()","gem::localremoteoptions#add_update_sources_option()","gem::versionoption#add_version_option()","gem::streamui#alert()","gem::userinteraction#alert()","gem::streamui#alert_error()","gem::userinteraction#alert_error()","gem::streamui#alert_warning()","gem::userinteraction#alert_warning()","gem::validator#alien()","gem::specification::all()","gem::specification::all=()","gem::specification::all_names()","gem::testcase#all_spec_names()","gem::availableset#all_specs()","gem::security::alt_name_or_x509_entry()","gem::fakefetcher#api_endpoint()","gem::remotefetcher#api_endpoint()","gem::gemcutterutilities#api_key()","gem::configfile#api_keys()","gem::installer#app_script_text()","gem::version#approximate_recommendation()","gem::command#arguments()","gem::specification::array_attributes()","gem::mockgemui#ask()","gem::streamui#ask()","gem::userinteraction#ask()","gem::streamui#ask_for_password()","gem::userinteraction#ask_for_password()","gem::streamui#ask_yes_no()","gem::userinteraction#ask_yes_no()","gem::testcase#assert_activate()","gem::testcase#assert_contains_make_command()","gem::package::tartestcase#assert_headers_equal()","gem::testcase#assert_path_exists()","gem::specification::attribute_names()","gem::specification#author()","gem::specification#author=()","gem::specification#authors()","gem::specification#authors=()","gem::specfetcher#available_specs()","gem::configfile#backtrace()","gem::streamui#backtrace()","gem::resolver::stats#backtracking!()","gem::basicspecification#base_dir()","gem::command#begins?()","gem::specification#bin_dir()","gem::specification#bin_file()","gem::bin_path()","gem::binary_mode()","gem::bindir()","gem::localremoteoptions#both?()","gem::commands::certcommand#build()","gem::ext::cmakebuilder::build()","gem::ext::configurebuilder::build()","gem::ext::extconfbuilder::build()","gem::ext::rakebuilder::build()","gem::package#build()","gem::package::build()","gem::command::build_args()","gem::specification#build_args()","gem::command::build_args=()","gem::ext::builder#build_extensions()","gem::installer#build_extensions()","gem::indexer#build_indicies()","gem::specification#build_info_dir()","gem::specification#build_info_file()","gem::indexer#build_marshal_gemspecs()","gem::indexer#build_modern_index()","gem::indexer#build_modern_indicies()","gem::testcase#build_rake_in()","gem::version#bump()","gem::specification#bundled_gem_in_old_ruby?()","gem::package::tarreader::entry#bytes_read()","gem::source#cache_dir()","gem::specification#cache_dir()","gem::specification#cache_file()","gem::fakefetcher#cache_update_path()","gem::remotefetcher#cache_update_path()","gem::package::tartestcase#calc_checksum()","gem::request#cert_files()","gem::security::trustdir#cert_path()","gem::testcase::cert_path()","gem::commands::certcommand#certificates_matching()","gem::security::policy#check_cert()","gem::security::policy#check_chain()","gem::package::tarwriter#check_closed()","gem::configfile#check_credentials_permissions()","gem::security::policy#check_data()","gem::commands::checkcommand#check_gems()","gem::security::policy#check_key()","gem::security::policy#check_root()","gem::commands::setupcommand#check_ruby_version()","gem::security::policy#check_trust()","gem::streamui#choose_from_list()","gem::userinteraction#choose_from_list()","gem::ext::builder::class_name()","gem::commands::cleanupcommand#clean_gems()","gem::dependencylist#clear()","gem::sourcelist#clear()","gem::testcase::specfetchersetup#clear()","gem::clear_default_specs()","gem::clear_paths()","gem::package::tarreader#close()","gem::package::tarreader::entry#close()","gem::package::tarwriter#close()","gem::silentui#close()","gem::streamui#close()","gem::remotefetcher#close_all()","gem::package::tarreader::entry#closed?()","gem::package::tarwriter#closed?()","gem::commandmanager#command_names()","gem::testcase#common_installer_setup()","gem::testcase#common_installer_teardown()","gem::command::common_options()","gem::indexer#compact_specs()","gem::commands::lockcommand#complain()","gem::resolver::compose_sets()","gem::indexer#compress()","gem::indexer#compress_indicies()","gem::requirement#concat()","gem::config_file()","gem::configfile#config_file_name()","gem::configuration()","gem::configuration=()","gem::request::configure_connection_for_https()","gem::dependencyresolutionerror#conflicting_dependencies()","gem::resolver::conflict#conflicting_dependencies()","gem::specification#conflicts()","gem::request#connection_for()","gem::dependencyinstaller#consider_local?()","gem::dependencyinstaller#consider_remote?()","gem::basicspecification#contains_requirable_file?()","gem::package#contents()","gem::package::old#contents()","gem::version::correct?()","gem::remotefetcher#correct_for_windows_path()","gem::noaliasyamltree::create()","gem::requirement::create()","gem::version::create()","gem::security::create_cert()","gem::security::create_cert_email()","gem::security::create_cert_self_signed()","gem::security::create_key()","gem::testcase#create_tmpdir()","gem::testcase::specfetchersetup#created_specs()","gem::configfile#credentials_path()","gem::datadir()","gem::specification#date()","gem::specification#date=()","gem::streamui#debug()","gem::testcase::specfetchersetup::declare()","gem::requirement::default()","gem::default_bindir()","gem::default_cert_path()","gem::default_dir()","gem::default_exec_format()","gem::default_ext_dir_for()","gem::basicspecification#default_gem?()","gem::default_gems_use_full_paths?()","gem::default_key_path()","gem::default_path()","gem::default_rubygems_dirs()","gem::default_sources()","gem::default_spec_cache_dir()","gem::installer#default_spec_file()","gem::basicspecification::default_specifications_dir()","gem::specification#default_value()","gem::command#defaults_str()","gem::packagetask#define()","gem::deflate()","gem::sourcelist#delete()","gem::testcase#dep()","gem::resolver::indexspecification#dependencies()","gem::resolver::specspecification#dependencies()","gem::specification#dependencies()","gem::impossibledependencieserror#dependency()","gem::dependencylist#dependency_order()","gem::testcase#dependency_request()","gem::specification#dependent_gems()","gem::specification#dependent_specs()","gem::deprecate::deprecate()","gem::command#description()","gem::commands::unpackcommand#description()","gem::specification#description=()","gem::specfetcher#detect()","gem::detect_gemdeps()","gem::resolver::activationrequest#development?()","gem::resolver::dependencyrequest#development?()","gem::specification#development_dependencies()","gem::dir()","gem::installer#dir()","gem::package::tarreader::entry#directory?()","gem::specification::dirs()","gem::specification::dirs=()","gem::resolver::stats#display()","gem::specification#doc_dir()","gem::server#doc_root()","gem::commands::checkcommand#doctor()","gem::doctor#doctor()","gem::streamui::silentdownloadreporter#done()","gem::streamui::silentprogressreporter#done()","gem::streamui::simpleprogressreporter#done()","gem::streamui::verbosedownloadreporter#done()","gem::streamui::verboseprogressreporter#done()","gem::done_installing()","gem::fakefetcher#download()","gem::remotefetcher#download()","gem::resolver::activationrequest#download()","gem::source#download()","gem::source::installed#download()","gem::streamui#download_reporter()","gem::fakefetcher#download_to_cache()","gem::remotefetcher#download_to_cache()","gem::availableset#each()","gem::configfile#each()","gem::dependencylist#each()","gem::list#each()","gem::package::tarreader#each()","gem::sourcelist#each()","gem::specification::each()","gem::security::trustdir#each_certificate()","gem::package::tarreader#each_entry()","gem::sourcelist#each_source()","gem::availableset#each_spec()","gem::security::email_to_name()","gem::availableset#empty?()","gem::package::tarheader#empty?()","gem::resolver::requirementlist#empty?()","gem::sourcelist#empty?()","gem::testcase#enable_shared()","gem::ensure_default_gem_subdirectories()","gem::installer#ensure_dependency()","gem::ensure_gem_subdirectories()","gem::installer#ensure_loadable_spec()","gem::package::tarreader::entry#eof?()","gem::nametuple#eql?()","gem::platform#eql?()","gem::version#eql?()","gem::mockgemui#error()","gem::resolver::composedset#errors()","gem::resolver::installerset#errors()","gem::uriformatter#escape()","gem::requirement#exact?()","gem::installer::exec_format()","gem::specification#executable()","gem::specification#executable=()","gem::specification#executables()","gem::specification#executables=()","gem::command#execute()","gem::commands::buildcommand#execute()","gem::commands::certcommand#execute()","gem::commands::checkcommand#execute()","gem::commands::cleanupcommand#execute()","gem::commands::contentscommand#execute()","gem::commands::dependencycommand#execute()","gem::commands::environmentcommand#execute()","gem::commands::fetchcommand#execute()","gem::commands::generateindexcommand#execute()","gem::commands::helpcommand#execute()","gem::commands::installcommand#execute()","gem::commands::lockcommand#execute()","gem::commands::mirrorcommand#execute()","gem::commands::opencommand#execute()","gem::commands::outdatedcommand#execute()","gem::commands::ownercommand#execute()","gem::commands::pristinecommand#execute()","gem::commands::pushcommand#execute()","gem::commands::querycommand#execute()","gem::commands::rdoccommand#execute()","gem::commands::servercommand#execute()","gem::commands::setupcommand#execute()","gem::commands::sourcescommand#execute()","gem::commands::specificationcommand#execute()","gem::commands::stalecommand#execute()","gem::commands::uninstallcommand#execute()","gem::commands::unpackcommand#execute()","gem::commands::updatecommand#execute()","gem::commands::whichcommand#execute()","gem::commands::yankcommand#execute()","gem::resolver::conflict#explain()","gem::resolver::conflict#explanation()","gem::resolver::dependencyrequest#explicit?()","gem::basicspecification#extension_dir()","gem::specification#extensions()","gem::specification#extensions=()","gem::basicspecification#extensions_dir()","gem::command::extra_args()","gem::command::extra_args=()","gem::specification#extra_rdoc_files()","gem::specification#extra_rdoc_files=()","gem::installer#extract_bin()","gem::installer#extract_files()","gem::package#extract_files()","gem::package::old#extract_files()","gem::request#fetch()","gem::streamui::silentdownloadreporter#fetch()","gem::streamui::verbosedownloadreporter#fetch()","gem::remotefetcher#fetch_file()","gem::remotefetcher#fetch_http()","gem::remotefetcher#fetch_https()","gem::fakefetcher#fetch_path()","gem::remotefetcher#fetch_path()","gem::remotefetcher#fetch_s3()","gem::fakefetcher#fetch_size()","gem::remotefetcher#fetch_size()","gem::source#fetch_spec()","gem::source::lock#fetch_spec()","gem::remotefetcher::fetcher()","gem::specfetcher::fetcher()","gem::remotefetcher::fetcher=()","gem::package::tarreader::entry#file?()","gem::specification#file_name()","gem::specification#files()","gem::specification#files=()","gem::commands::contentscommand#files_in()","gem::commands::contentscommand#files_in_default_gem()","gem::commands::contentscommand#files_in_gem()","gem::list#find()","gem::availableset#find_all()","gem::resolver::apiset#find_all()","gem::resolver::composedset#find_all()","gem::resolver::currentset#find_all()","gem::resolver::gitset#find_all()","gem::resolver::indexset#find_all()","gem::resolver::installerset#find_all()","gem::resolver::lockset#find_all()","gem::resolver::set#find_all()","gem::resolver::vendorset#find_all()","gem::testcase::staticset#find_all()","gem::specification::find_all_by_name()","gem::specification::find_by_name()","gem::specification::find_by_path()","gem::commandmanager#find_command()","gem::commandmanager#find_command_possibilities()","gem::fakefetcher#find_data()","gem::find_files()","gem::commands::unpackcommand#find_in_cache()","gem::specification::find_in_unresolved()","gem::specification::find_in_unresolved_tree()","gem::specification::find_inactive_by_path()","gem::find_latest_files()","gem::dependencylist#find_name()","gem::commands::whichcommand#find_paths()","gem::testcase::staticset#find_spec()","gem::dependencyinstaller#find_spec_by_name_and_version()","gem::find_unresolved_default_spec()","gem::finish_resolve()","gem::sourcelist#first()","gem::package::tarwriter#flush()","gem::specification#for_cache()","gem::resolver::for_current_gems()","gem::resolver::conflict#for_spec?()","gem::text#format_text()","gem::installer#formatted_program_filename()","gem::package::tarheader::from()","gem::sourcelist::from()","gem::nametuple::from_list()","gem::dependencylist::from_specs()","gem::specification::from_yaml()","gem::basicspecification#full_gem_path()","gem::basicspecification#full_name()","gem::nametuple#full_name()","gem::package::tarreader::entry#full_name()","gem::resolver::activationrequest#full_name()","gem::resolver::specspecification#full_name()","gem::resolver::specification#full_name()","gem::specification#full_name()","gem::basicspecification#full_require_paths()","gem::resolver::activationrequest#full_spec()","gem::requestset#gem()","gem::requestset::gemdependencyapi#gem()","gem::testcase::specfetchersetup#gem()","kernel#gem()","gem::commands::contentscommand#gem_contents()","gem::basicspecification#gem_dir()","gem::installer#gem_dir()","gem::indexer#gem_file_list()","gem::commands::contentscommand#gem_install_dir()","kernel#gem_original_require()","gem::doctor#gem_repository?()","gem::basicspecification#gems_dir()","gem::requestset::gemdependencyapi#gemspec()","gem::installer#generate_bin_script()","gem::installer#generate_bin_symlink()","gem::commands::setupcommand#generate_default_dirs()","gem::indexer#generate_index()","gem::installer#generate_windows_script()","gem::command#get_all_gem_names()","gem::command#get_all_gem_names_and_versions()","gem::commands::cleanupcommand#get_candidate_gems()","gem::request::get_cert_files()","gem::commands::opencommand#get_env_editor()","gem::commands::cleanupcommand#get_gems_to_cleanup()","gem::commands::unpackcommand#get_metadata()","gem::command#get_one_gem_name()","gem::command#get_one_optional_argument()","gem::commands::unpackcommand#get_path()","gem::commands::cleanupcommand#get_primary_gems()","gem::request::get_proxy_from_env()","gem::package::tarreader::entry#getc()","gem::requestset::gemdependencyapi#git()","gem::testcase#git_gem()","gem::requestset::gemdependencyapi#git_source()","gem::requestset::gemdependencyapi#group()","gem::gunzip()","gem::util::gunzip()","gem::gzip()","gem::indexer#gzip()","gem::util::gzip()","gem::package#gzip_to()","gem::configfile#handle_arguments()","gem::command#handle_options()","gem::command#handles?()","gem::nametuple#hash()","gem::testcase#have_git?()","gem::server#have_rdoc_4_plus?()","gem::package::tartestcase#header()","gem::host()","gem::gemcutterutilities#host()","gem::host=()","gem::remotefetcher#https?()","gem::resolver::dependencyrequest#implicit?()","gem::requestset#import()","gem::sourcelist#include?()","gem::inflate()","gem::util::inflate()","gem::packagetask#init()","gem::package#initialize()","gem::specification#initialize_copy()","gem::availableset#inject_into_list()","gem::mockgemui#input()","gem::platform#inspect()","gem::install()","gem::dependencyinstaller#install()","gem::installer#install()","gem::requestset#install()","gem::resolver::gitspecification#install()","gem::resolver::installedspecification#install()","gem::resolver::lockspecification#install()","gem::resolver::specification#install()","gem::resolver::vendorspecification#install()","gem::testcase#install_default_gems()","gem::testcase#install_default_specs()","gem::commands::setupcommand#install_executables()","gem::commands::setupcommand#install_file()","gem::requestset#install_from_gemdeps()","gem::testcase#install_gem()","gem::testcase#install_gem_user()","gem::indexer#install_indicies()","gem::requestset#install_into()","gem::commands::setupcommand#install_lib()","gem::commands::setupcommand#install_rdoc()","gem::testcase#install_specs()","gem::installupdateoptions#install_update_defaults_str()","gem::platform::installable?()","gem::resolver::installedspecification#installable_platform?()","gem::resolver::localspecification#installable_platform?()","gem::resolver::specification#installable_platform?()","gem::installer#installation_satisfies_dependency?()","gem::resolver::activationrequest#installed?()","gem::installer#installed_specs()","gem::commandmanager::instance()","gem::commandmanager#instance()","gem::command#invoke()","gem::command#invoke_with_build_args()","gem::security::trustdir#issuer_of()","gem::resolver::stats#iteration!()","gem::testcase::key_path()","gem::latest_rubygems_version()","gem::latest_spec_for()","gem::server#latest_specs()","gem::specification::latest_specs()","gem::dependency#latest_version?()","gem::latest_version_for()","gem::server#launch()","gem::testcase::specfetchersetup#legacy_platform()","gem::text#levenshtein_distance()","gem::specification#lib_dirs_glob()","gem::specification#lib_files()","gem::specification#license()","gem::specification#license=()","gem::specification#licenses()","gem::specification#licenses=()","gem::server#listen()","gem::requestset::gemdependencyapi#load()","gem::specification::load()","gem::configfile#load_api_keys()","gem::testcase::load_cert()","gem::security::trustdir#load_certificate()","gem::commands::certcommand#load_default_cert()","gem::commands::certcommand#load_default_key()","gem::specification::load_defaults()","gem::load_env_plugins()","gem::configfile#load_file()","gem::requestset#load_gemdeps()","gem::testcase::load_key()","gem::load_path_insert_index()","gem::load_plugins()","gem::testcase::staticset#load_spec()","gem::source#load_specs()","gem::load_yaml()","gem::basicspecification#loaded_from=()","gem::testcase#loaded_spec_names()","gem::platform::local()","gem::localremoteoptions#local?()","gem::location_of_caller()","gem::ext::builder::make()","gem::testcase::make_command()","gem::testcase#make_command()","gem::commands::setupcommand#make_destination_dirs()","gem::indexer#make_temp_directories()","gem::commands::ownercommand#manage_owners()","gem::indexer#map_gems_to_specs()","gem::specification#mark_version()","gem::version#marshal_dump()","gem::version#marshal_load()","gem::marshal_version()","gem::platform::match()","gem::dependency#match?()","gem::resolver::dependencyrequest#match?()","gem::availableset#match_platform!()","gem::nametuple#match_platform?()","gem::specification#matches_for_glob()","gem::dependency#matches_spec?()","gem::resolver::dependencyrequest#matches_spec?()","gem::dependency#matching_specs()","gem::dependency#merge()","gem::command#merge_options()","gem::specification#missing_extensions?()","gem::package::tarwriter#mkdir()","gem::testcase#mu_pp()","gem::basicspecification#name()","gem::resolver::activationrequest#name()","gem::resolver::dependencyrequest#name()","gem::resolver::specspecification#name()","gem::unsatisfiabledependencyerror#name()","gem::security::trustdir#name_path()","gem::specification#name_tuple()","gem::needs()","gem::availableset::new()","gem::command::new()","gem::commandmanager::new()","gem::commands::buildcommand::new()","gem::commands::certcommand::new()","gem::commands::checkcommand::new()","gem::commands::cleanupcommand::new()","gem::commands::contentscommand::new()","gem::commands::dependencycommand::new()","gem::commands::environmentcommand::new()","gem::commands::fetchcommand::new()","gem::commands::generateindexcommand::new()","gem::commands::helpcommand::new()","gem::commands::installcommand::new()","gem::commands::listcommand::new()","gem::commands::lockcommand::new()","gem::commands::mirrorcommand::new()","gem::commands::opencommand::new()","gem::commands::outdatedcommand::new()","gem::commands::ownercommand::new()","gem::commands::pristinecommand::new()","gem::commands::pushcommand::new()","gem::commands::querycommand::new()","gem::commands::rdoccommand::new()","gem::commands::searchcommand::new()","gem::commands::servercommand::new()","gem::commands::setupcommand::new()","gem::commands::sourcescommand::new()","gem::commands::specificationcommand::new()","gem::commands::stalecommand::new()","gem::commands::uninstallcommand::new()","gem::commands::unpackcommand::new()","gem::commands::updatecommand::new()","gem::commands::whichcommand::new()","gem::commands::yankcommand::new()","gem::configfile::new()","gem::conflicterror::new()","gem::consoleui::new()","gem::dependency::new()","gem::dependencyinstaller::new()","gem::dependencylist::new()","gem::dependencyresolutionerror::new()","gem::doctor::new()","gem::ext::builder::new()","gem::fakefetcher::new()","gem::filepermissionerror::new()","gem::gemrunner::new()","gem::impossibledependencieserror::new()","gem::indexer::new()","gem::installer::new()","gem::mockgemui::new()","gem::mockgemui::inputeoferror::new()","gem::mockgemui::termerror::new()","gem::nametuple::new()","gem::package::new()","gem::package::digestio::new()","gem::package::formaterror::new()","gem::package::old::new()","gem::package::patherror::new()","gem::package::tarheader::new()","gem::package::tarreader::new()","gem::package::tarreader::new()","gem::package::tarreader::entry::new()","gem::package::tarwriter::new()","gem::package::tarwriter::new()","gem::package::tarwriter::boundedstream::new()","gem::package::tarwriter::restrictedstream::new()","gem::packagetask::new()","gem::pathsupport::new()","gem::platform::new()","gem::platformmismatch::new()","gem::remotefetcher::new()","gem::remotefetcher::fetcherror::new()","gem::request::new()","gem::requestset::new()","gem::requestset::gemdependencyapi::new()","gem::requestset::lockfile::new()","gem::requestset::lockfile::parseerror::new()","gem::requirement::new()","gem::resolver::new()","gem::resolver::apiset::new()","gem::resolver::apispecification::new()","gem::resolver::activationrequest::new()","gem::resolver::bestset::new()","gem::resolver::composedset::new()","gem::resolver::conflict::new()","gem::resolver::dependencyrequest::new()","gem::resolver::indexspecification::new()","gem::resolver::installerset::new()","gem::resolver::lockset::new()","gem::resolver::lockspecification::new()","gem::resolver::requirementlist::new()","gem::resolver::specspecification::new()","gem::resolver::specification::new()","gem::resolver::stats::new()","gem::security::policy::new()","gem::security::signer::new()","gem::security::trustdir::new()","gem::server::new()","gem::silentui::new()","gem::source::new()","gem::source::git::new()","gem::source::lock::new()","gem::source::specificfile::new()","gem::source::vendor::new()","gem::sourcefetchproblem::new()","gem::sourcelist::new()","gem::specfetcher::new()","gem::specificgemnotfoundexception::new()","gem::specification::new()","gem::streamui::new()","gem::streamui::silentdownloadreporter::new()","gem::streamui::silentprogressreporter::new()","gem::streamui::simpleprogressreporter::new()","gem::streamui::verbosedownloadreporter::new()","gem::streamui::verboseprogressreporter::new()","gem::stringsink::new()","gem::stringsource::new()","gem::systemexitexception::new()","gem::testcase::staticset::new()","gem::uninstaller::new()","gem::unsatisfiabledependencyerror::new()","gem::uriformatter::new()","gem::version::new()","tempio::new()","gem::testcase#new_default_spec()","gem::resolver::requirementlist#next5()","gem::testcase#nmake_found?()","gem::mockgemui::tty#noecho()","gem::specification::non_nil_attributes()","gem::requirement#none?()","gem::specification#normalize()","gem::uriformatter#normalize()","gem::specification::normalize_yaml_input()","gem::nametuple::null()","gem::dependencylist#ok?()","gem::dependencylist#ok_to_remove?()","gem::commands::opencommand#open_editor()","gem::commands::opencommand#open_gem()","gem::fakefetcher#open_uri_or_path()","gem::resolver::activationrequest#others_possible?()","gem::specification::outdated()","gem::specification::outdated_and_latest_version()","gem::mockgemui#output()","gem::indexer#paranoid()","gem::resolver::activationrequest#parent()","gem::requirement::parse()","gem::testcase#parse_make_command_line()","gem::path()","gem::uninstaller#path_ok?()","gem::path_separator()","gem::paths()","gem::paths=()","gem::commands::setupcommand#pem_files_in()","gem::availableset#pick_best!()","gem::basicspecification#platform()","gem::requestset::gemdependencyapi#platform()","gem::resolver::specspecification#platform()","gem::specification#platform()","gem::specification#platform=()","gem::platforms()","gem::requestset::gemdependencyapi#platforms()","gem::platforms=()","gem::util::popen()","gem::package::tarreader::entry#pos()","gem::post_build()","gem::post_install()","gem::post_reset()","gem::post_uninstall()","gem::pre_install()","gem::installer#pre_install_checks()","gem::pre_reset()","gem::pre_uninstall()","gem::availableset#prefetch()","gem::resolver::apiset#prefetch()","gem::resolver::composedset#prefetch()","gem::resolver::gitset#prefetch()","gem::resolver::installerset#prefetch()","gem::resolver::set#prefetch()","gem::prefix()","gem::list#prepend()","gem::list::prepend()","gem::resolver::composedset#prerelease=()","gem::resolver::installerset#prerelease=()","gem::dependency#prerelease?()","gem::nametuple#prerelease?()","gem::requirement#prerelease?()","gem::version#prerelease?()","gem::server#prerelease_specs()","gem::commandmanager#process_args()","gem::testcase#process_based_port()","gem::testcase::process_based_port()","gem::streamui#progress_reporter()","gem::request#proxy_uri()","gem::server#quick()","gem::testcase#quick_gem()","gem::commands::setupcommand#rb_files_in()","gem::server#rdoc()","gem::specification#rdoc_options()","gem::specification#rdoc_options=()","gem::security::re_sign()","gem::package::tarreader::entry#read()","gem::stringsource#read()","gem::read_binary()","gem::testcase#read_binary()","gem::testcase#read_cache()","gem::package#read_checksums()","gem::package::tarreader::entry#readpartial()","gem::stringsource#readpartial()","gem::configfile#really_verbose()","gem::resolver::stats#record_depth()","gem::resolver::stats#record_requirements()","gem::ext::builder::redirector()","gem::refresh()","gem::testcase#refute_path_exists()","gem::noaliasyamltree#register()","gem::commandmanager#register_command()","gem::register_default_spec()","gem::version#release()","gem::resolver::composedset#remote=()","gem::localremoteoptions#remote?()","gem::resolver::requirementlist#remove()","gem::uninstaller#remove()","gem::uninstaller#remove_all()","gem::dependencylist#remove_by_name()","gem::uninstaller#remove_executables()","gem::availableset#remove_installed!()","gem::commands::setupcommand#remove_old_bin_files()","gem::commands::setupcommand#remove_old_lib_files()","gem::command#remove_option()","gem::commands::ownercommand#remove_owners()","gem::specification::remove_spec()","gem::dependencylist#remove_specs_unsatisfied_by()","gem::remove_unresolved_default_spec()","gem::sourcelist#replace()","gem::testcase#req()","gem::fakefetcher#request()","gem::remotefetcher#request()","gem::resolver::dependencyrequest#request_context()","gem::resolver::conflict#request_path()","gem::resolver::conflict#requester()","gem::specification#require_path()","gem::specification#require_path=()","gem::basicspecification#require_paths()","gem::specification#require_paths=()","gem::specification::required_attribute?()","gem::specification::required_attributes()","gem::specification#required_ruby_version=()","gem::specification#required_rubygems_version=()","gem::dependency#requirement()","gem::resolver::dependencyrequest#requirement()","gem::resolver::stats#requirement!()","gem::specification#requirements()","gem::specification#requirements=()","gem::dependency#requirements_list()","gem::commandmanager::reset()","gem::request#reset()","gem::security::reset()","gem::specification::reset()","gem::specification#reset_nil_attributes_to_default()","gem::requestset#resolve()","gem::resolver#resolve()","gem::requestset#resolve_current()","gem::package::tarreader#rewind()","gem::package::tarreader::entry#rewind()","gem::specification#ri_dir()","gem::server#root()","gem::ruby()","gem::requestset::gemdependencyapi#ruby()","gem::ruby=()","gem::ruby_api_version()","gem::ruby_engine()","gem::ruby_version()","gem::testcase::rubybin()","gem::configfile#rubygems_api_key()","gem::configfile#rubygems_api_key=()","gem::gemcutterutilities#rubygems_api_request()","gem::commands::updatecommand#rubygems_target_version()","gem::rubygems_version()","gem::commandmanager#run()","gem::ext::builder::run()","gem::gemrunner#run()","gem::server#run()","gem::server::run()","gem::specification#runtime_dependencies()","gem::remotefetcher#s3_expiration()","gem::indexer#sanitize()","gem::indexer#sanitize_string()","gem::requirement#satisfied_by?()","gem::specification#satisfies_requirement?()","gem::testcase#save_loaded_features()","gem::streamui#say()","gem::userinteraction#say()","gem::testcase#scan_make_command_lines()","gem::specfetcher#search_for_dependency()","gem::searcher=()","gem::package::tarreader#seek()","gem::commands::pushcommand#send_gem()","gem::stringsink#set_encoding()","gem::installertestcase#setup()","gem::testcase#setup()","gem::package#setup_signer()","gem::installer#shebang()","gem::commands::contentscommand#show_files()","gem::command#show_help()","gem::command#show_lookup_failure()","gem::commands::ownercommand#show_owners()","gem::server#show_rdoc_for_pattern()","gem::commands::setupcommand#show_release_notes()","gem::commands::certcommand#sign()","gem::security::sign()","gem::security::signer#sign()","gem::gemcutterutilities#sign_in()","gem::remotefetcher#sign_s3_url()","gem::util::silent_system()","gem::availableset#size()","gem::resolver::requirementlist#size()","gem::deprecate::skip_during()","gem::specification#sort_obj()","gem::availableset#sorted()","gem::requestset#sorted_requests()","gem::requestset::gemdependencyapi#source()","gem::resolver::installedspecification#source()","gem::availableset#source_for()","gem::basicspecification#source_paths()","gem::sources()","gem::sources=()","gem::installer#spec()","gem::package#spec()","gem::package::old#spec()","gem::resolver::lockspecification#spec()","gem::testcase#spec()","gem::testcase::specfetchersetup#spec()","gem::spec_cache_dir()","gem::specification#spec_dir()","gem::testcase#spec_fetcher()","gem::installer#spec_file()","gem::specification#spec_file()","gem::commands::contentscommand#spec_for()","gem::commands::opencommand#spec_for()","gem::specfetcher#spec_for_dependency()","gem::nametuple#spec_name()","gem::specification#spec_name()","gem::commands::lockcommand#spec_path()","gem::dependencylist#spec_predecessors()","gem::dependency#specific?()","gem::requirement#specific?()","gem::command::specific_extra_args()","gem::command::specific_extra_args_hash()","gem::requestset#specs()","gem::server#specs()","gem::source::git#specs()","gem::requestset#specs_in()","tempio#string()","gem::basicspecification#stubbed?()","gem::specification#stubbed?()","gem::specification::stubs()","gem::suffix_pattern()","gem::suffixes()","gem::specfetcher#suggest_gems_from_name()","gem::specification#summary=()","gem::package::tartestcase#tar_dir_header()","gem::package::tartestcase#tar_file_header()","gem::testcase#teardown()","gem::mockgemui#terminate_interaction()","gem::streamui#terminate_interaction()","gem::userinteraction#terminate_interaction()","gem::mockgemui#terminated?()","gem::time()","gem::list#to_a()","gem::nametuple#to_a()","gem::platform#to_a()","gem::sourcelist#to_a()","gem::sourcelist#to_ary()","gem::nametuple::to_basic()","gem::basicspecification#to_fullpath()","gem::package::tartestcase#to_oct()","gem::availableset#to_request_set()","gem::specification#to_ruby()","gem::specification#to_ruby_for_cache()","gem::platform#to_s()","gem::requestset::lockfile#to_s()","gem::version#to_s()","gem::basicspecification#to_spec()","gem::dependency#to_spec()","gem::specification#to_spec()","gem::dependency#to_specs()","gem::specification#traverse()","gem::util::traverse_parents()","gem::security::trustdir#trust_cert()","gem::security::trust_dir()","gem::security::trusted_certificates()","gem::try_activate()","gem::dependencylist#tsort_each_child()","gem::dependencylist#tsort_each_node()","gem::mockgemui::tty#tty?()","gem::streamui#tty?()","gem::dependency#type()","gem::ui()","gem::defaultuserinteraction#ui()","gem::defaultuserinteraction::ui()","gem::defaultuserinteraction#ui=()","gem::defaultuserinteraction::ui=()","gem::uriformatter#unescape()","gem::uninstaller#uninstall()","gem::commands::uninstallcommand#uninstall_all()","gem::commands::cleanupcommand#uninstall_dep()","gem::testcase#uninstall_gem()","gem::uninstaller#uninstall_gem()","gem::commands::setupcommand#uninstall_old_gemcutter()","gem::commands::uninstallcommand#uninstall_specific()","gem::installer#unpack()","gem::commandmanager#unregister_command()","gem::specification::unresolved_deps()","gem::testcase#unresolved_names()","gem::commands::yankcommand#unyank_gem()","gem::streamui::silentdownloadreporter#update()","gem::streamui::verbosedownloadreporter#update()","gem::source#update_cache?()","gem::package::tarheader#update_checksum()","gem::commands::updatecommand#update_gem()","gem::commands::updatecommand#update_gems()","gem::indexer#update_index()","gem::commands::updatecommand#update_rubygems()","gem::indexer#update_specs_index()","gem::streamui::silentprogressreporter#updated()","gem::streamui::simpleprogressreporter#updated()","gem::streamui::verboseprogressreporter#updated()","gem::command#usage()","gem::use_gemdeps()","gem::use_paths()","gem::defaultuserinteraction::use_ui()","gem::defaultuserinteraction#use_ui()","gem::request#user_agent()","gem::user_dir()","gem::user_home()","gem::testcase#util_build_gem()","gem::testcase#util_clear_gems()","gem::package::tartestcase#util_dir_entry()","gem::package::tartestcase#util_entry()","gem::testcase#util_gem()","gem::testcase#util_gzip()","gem::installertestcase#util_inst_bindir()","gem::installertestcase#util_installer()","gem::installertestcase#util_make_exec()","gem::testcase#util_make_gems()","gem::testcase#util_remove_gem()","gem::testcase#util_restore_ruby_version()","gem::testcase#util_set_ruby_version()","gem::testcase#util_set_arch()","gem::testcase#util_setup_fake_fetcher()","gem::installertestcase#util_setup_gem()","gem::testcase#util_setup_spec_fetcher()","gem::testcase#util_spec()","gem::testcase#util_zip()","gem::testcase#v()","gem::specification#validate()","gem::specification#validate_permissions()","gem::testcase::vc_windows?()","gem::testcase#vc_windows?()","gem::testcase#vendor_gem()","gem::userinteraction#verbose()","gem::package#verify()","gem::package::old#verify()","gem::security::policy#verify()","gem::security::trustdir#verify()","gem::gemcutterutilities#verify_api_key()","gem::package#verify_entry()","gem::package#verify_files()","gem::validator#verify_gem()","gem::validator#verify_gem_file()","gem::security::policy#verify_signatures()","gem::basicspecification#version()","gem::resolver::activationrequest#version()","gem::resolver::specspecification#version()","gem::unsatisfiabledependencyerror#version()","gem::version#version()","gem::specification#version=()","gem::noaliasyamltree#visit_string()","gem::testcase#wait_for_child_process_to_exit()","gem::command#when_invoked()","gem::commands::updatecommand#which_to_update()","gem::dependencylist#why_not_ok?()","gem::win_platform=()","gem::win_platform?()","gem::testcase::win_platform?()","gem::testcase#win_platform?()","gem::installer#windows_stub_script()","gem::gemcutterutilities#with_response()","gem::platformmismatch#wordy()","gem::sourcefetchproblem#wordy()","gem::command#wrap()","gem::package::digestio::wrap()","gem::configfile#write()","gem::package::digestio#write()","gem::package::tarwriter::boundedstream#write()","gem::package::tarwriter::restrictedstream#write()","gem::requestset::lockfile#write()","gem::security::write()","gem::stringsink#write()","gem::installer#write_build_info_file()","gem::installer#write_cache_file()","gem::installer#write_default_spec()","gem::testcase#write_file()","gem::installer#write_spec()","gem::commands::yankcommand#yank_gem()"],"info":[["Gem","","Gem.html","","<p>RubyGems is the Ruby standard for publishing and managing third party\nlibraries.\n<p>For user documentation, …\n"],["Gem::AvailableSet","","Gem/AvailableSet.html","",""],["Gem::BasicSpecification","","Gem/BasicSpecification.html","","<p>BasicSpecification is an abstract class which implements some common code\nused by both Specification …\n"],["Gem::Command","","Gem/Command.html","","<p>Base class for all Gem commands.  When creating a new gem command, define\n#initialize, #execute, #arguments …\n"],["Gem::CommandLineError","","Gem/CommandLineError.html","",""],["Gem::CommandManager","","Gem/CommandManager.html","","<p>The command manager registers and installs all the individual sub-commands\nsupported by the gem command. …\n"],["Gem::Commands","","Gem/Commands.html","","<p>Commands will be placed in this namespace\n"],["Gem::Commands::BuildCommand","","Gem/Commands/BuildCommand.html","",""],["Gem::Commands::CertCommand","","Gem/Commands/CertCommand.html","",""],["Gem::Commands::CheckCommand","","Gem/Commands/CheckCommand.html","",""],["Gem::Commands::CleanupCommand","","Gem/Commands/CleanupCommand.html","",""],["Gem::Commands::ContentsCommand","","Gem/Commands/ContentsCommand.html","",""],["Gem::Commands::DependencyCommand","","Gem/Commands/DependencyCommand.html","",""],["Gem::Commands::EnvironmentCommand","","Gem/Commands/EnvironmentCommand.html","",""],["Gem::Commands::FetchCommand","","Gem/Commands/FetchCommand.html","",""],["Gem::Commands::GenerateIndexCommand","","Gem/Commands/GenerateIndexCommand.html","","<p>Generates a index files for use as a gem server.\n<p>See `gem help generate_index`\n"],["Gem::Commands::HelpCommand","","Gem/Commands/HelpCommand.html","",""],["Gem::Commands::InstallCommand","","Gem/Commands/InstallCommand.html","","<p>Gem installer command line tool\n<p>See `gem help install`\n"],["Gem::Commands::ListCommand","","Gem/Commands/ListCommand.html","","<p>An alternate to Gem::Commands::QueryCommand that searches for gems starting\nwith the the supplied argument. …\n"],["Gem::Commands::LockCommand","","Gem/Commands/LockCommand.html","",""],["Gem::Commands::MirrorCommand","","Gem/Commands/MirrorCommand.html","",""],["Gem::Commands::OpenCommand","","Gem/Commands/OpenCommand.html","",""],["Gem::Commands::OutdatedCommand","","Gem/Commands/OutdatedCommand.html","",""],["Gem::Commands::OwnerCommand","","Gem/Commands/OwnerCommand.html","",""],["Gem::Commands::PristineCommand","","Gem/Commands/PristineCommand.html","",""],["Gem::Commands::PushCommand","","Gem/Commands/PushCommand.html","",""],["Gem::Commands::QueryCommand","","Gem/Commands/QueryCommand.html","",""],["Gem::Commands::RdocCommand","","Gem/Commands/RdocCommand.html","",""],["Gem::Commands::SearchCommand","","Gem/Commands/SearchCommand.html","",""],["Gem::Commands::ServerCommand","","Gem/Commands/ServerCommand.html","",""],["Gem::Commands::SetupCommand","","Gem/Commands/SetupCommand.html","","<p>Installs RubyGems itself.  This command is ordinarily only available from a\nRubyGems checkout or tarball. …\n"],["Gem::Commands::SourcesCommand","","Gem/Commands/SourcesCommand.html","",""],["Gem::Commands::SpecificationCommand","","Gem/Commands/SpecificationCommand.html","",""],["Gem::Commands::StaleCommand","","Gem/Commands/StaleCommand.html","",""],["Gem::Commands::UninstallCommand","","Gem/Commands/UninstallCommand.html","","<p>Gem uninstaller command line tool\n<p>See `gem help uninstall`\n"],["Gem::Commands::UnpackCommand","","Gem/Commands/UnpackCommand.html","",""],["Gem::Commands::UpdateCommand","","Gem/Commands/UpdateCommand.html","",""],["Gem::Commands::WhichCommand","","Gem/Commands/WhichCommand.html","",""],["Gem::Commands::YankCommand","","Gem/Commands/YankCommand.html","",""],["Gem::ConfigFile","","Gem/ConfigFile.html","","<p>Gem::ConfigFile RubyGems options and gem command options from gemrc.\n<p>gemrc is a YAML file that uses strings …\n"],["Gem::ConfigFile::Psych","","Gem/ConfigFile/Psych.html","",""],["Gem::ConflictError","","Gem/ConflictError.html","","<p>Raised when there are conflicting gem specs loaded\n"],["Gem::ConsoleUI","","Gem/ConsoleUI.html","","<p>Subclass of StreamUI that instantiates the user interaction using STDIN,\nSTDOUT, and STDERR.\n"],["Gem::DefaultUserInteraction","","Gem/DefaultUserInteraction.html","","<p>When rubygems/test_case is required the default user interaction is a\nMockGemUi.\n<p>Module that defines the …\n"],["Gem::Dependency","","Gem/Dependency.html","",""],["Gem::DependencyError","","Gem/DependencyError.html","",""],["Gem::DependencyInstaller","","Gem/DependencyInstaller.html","","<p>Installs a gem along with all its dependencies from local and remote gems.\n"],["Gem::DependencyList","","Gem/DependencyList.html","","<p>Gem::DependencyList is used for installing and uninstalling gems in the\ncorrect order to avoid conflicts. …\n"],["Gem::DependencyRemovalException","","Gem/DependencyRemovalException.html","",""],["Gem::DependencyResolutionError","","Gem/DependencyResolutionError.html","","<p>Raised by Gem::Resolver when a Gem::Dependency::Conflict reaches the\ntoplevel.  Indicates which dependencies …\n"],["Gem::Deprecate","","Gem/Deprecate.html","","<p>Provides a single method <code>deprecate</code> to be used to declare when\nsomething is going away.\n\n<pre>class Legacy\n  ...</pre>\n"],["Gem::Doctor","","Gem/Doctor.html","","<p>Cleans up after a partially-failed uninstall or for an invalid\nGem::Specification.\n<p>If a specification …\n"],["Gem::DocumentError","","Gem/DocumentError.html","",""],["Gem::EndOfYAMLException","","Gem/EndOfYAMLException.html","","<p>Potentially raised when a specification is validated.\n"],["Gem::ErrorReason","","Gem/ErrorReason.html","",""],["Gem::Exception","","Gem/Exception.html","","<p>Base exception class for RubyGems.  All exception raised by RubyGems are a\nsubclass of this one.\n"],["Gem::Ext","","Gem/Ext.html","","<p>Classes for building C extensions live here.\n"],["Gem::Ext::BuildError","","Gem/Ext/BuildError.html","","<p>Raised when there is an error while building extensions.\n"],["Gem::Ext::Builder","","Gem/Ext/Builder.html","",""],["Gem::Ext::CmakeBuilder","","Gem/Ext/CmakeBuilder.html","",""],["Gem::Ext::ConfigureBuilder","","Gem/Ext/ConfigureBuilder.html","",""],["Gem::Ext::ExtConfBuilder","","Gem/Ext/ExtConfBuilder.html","",""],["Gem::Ext::RakeBuilder","","Gem/Ext/RakeBuilder.html","",""],["Gem::FakeFetcher","","Gem/FakeFetcher.html","","<p>A fake Gem::RemoteFetcher for use in tests or to avoid real live HTTP\nrequests when testing code that …\n"],["Gem::FilePermissionError","","Gem/FilePermissionError.html","","<p>Signals that a file permission error is preventing the user from operating\non the given directory.\n"],["Gem::FormatException","","Gem/FormatException.html","","<p>Used to raise parsing and loading errors\n"],["Gem::GemNotFoundException","","Gem/GemNotFoundException.html","",""],["Gem::GemNotInHomeException","","Gem/GemNotInHomeException.html","","<p>Raised when attempting to uninstall a gem that isn’t in GEM_HOME.\n"],["Gem::GemRunner","","Gem/GemRunner.html","","<p>Run an instance of the gem program.\n<p>Gem::GemRunner is only intended for internal use by RubyGems itself. …\n"],["Gem::GemcutterUtilities","","Gem/GemcutterUtilities.html","","<p>Utility methods for using the RubyGems API.\n"],["Gem::ImpossibleDependenciesError","","Gem/ImpossibleDependenciesError.html","","<p>Raised by Gem::Resolver when dependencies conflict and create the inability\nto find a valid possible …\n"],["Gem::Indexer","","Gem/Indexer.html","","<p>Top level class for building the gem repository index.\n"],["Gem::InstallError","","Gem/InstallError.html","",""],["Gem::InstallUpdateOptions","","Gem/InstallUpdateOptions.html","","<p>Mixin methods for install and update options for Gem::Commands\n"],["Gem::Installer","","Gem/Installer.html","","<p>The installer installs the files contained in the .gem into the Gem.home.\n<p>Gem::Installer does the work …\n"],["Gem::InstallerTestCase","","Gem/InstallerTestCase.html","","<p>A test case for Gem::Installer.\n"],["Gem::InvalidSpecificationException","","Gem/InvalidSpecificationException.html","","<p>Potentially raised when a specification is validated.\n"],["Gem::List","","Gem/List.html","",""],["Gem::LoadError","","Gem/LoadError.html","","<p>Raised when RubyGems is unable to load or activate a gem.  Contains the\nname and version requirements …\n"],["Gem::LocalRemoteOptions","","Gem/LocalRemoteOptions.html","","<p>Mixin methods for local and remote Gem::Command options.\n"],["Gem::MockGemUi","","Gem/MockGemUi.html","","<p>This Gem::StreamUI subclass records input and output to StringIO for\nretrieval during tests.\n"],["Gem::MockGemUi::InputEOFError","","Gem/MockGemUi/InputEOFError.html","","<p>Raised when you haven’t provided enough input to your MockGemUi\n"],["Gem::MockGemUi::SystemExitException","","Gem/MockGemUi/SystemExitException.html","",""],["Gem::MockGemUi::TTY","","Gem/MockGemUi/TTY.html","",""],["Gem::MockGemUi::TermError","","Gem/MockGemUi/TermError.html","",""],["Gem::NameTuple","","Gem/NameTuple.html","",""],["Gem::NoAliasYAMLTree","","Gem/NoAliasYAMLTree.html","",""],["Gem::OperationNotSupportedError","","Gem/OperationNotSupportedError.html","",""],["Gem::Package","","Gem/Package.html","",""],["Gem::Package::DigestIO","","Gem/Package/DigestIO.html","","<p>IO wrapper that creates digests of contents written to the IO it wraps.\n"],["Gem::Package::Error","","Gem/Package/Error.html","",""],["Gem::Package::FormatError","","Gem/Package/FormatError.html","",""],["Gem::Package::NonSeekableIO","","Gem/Package/NonSeekableIO.html","",""],["Gem::Package::Old","","Gem/Package/Old.html","","<p>The format class knows the guts of the ancient .gem file format and\nprovides the capability to read such …\n"],["Gem::Package::PathError","","Gem/Package/PathError.html","",""],["Gem::Package::TarHeader","","Gem/Package/TarHeader.html","","<p>A header for a tar file\n"],["Gem::Package::TarInvalidError","","Gem/Package/TarInvalidError.html","","<p>Raised when a tar file is corrupt\n"],["Gem::Package::TarReader","","Gem/Package/TarReader.html","","<p>TarReader reads tar files and allows iteration over their items\n"],["Gem::Package::TarReader::Entry","","Gem/Package/TarReader/Entry.html","","<p>Class for reading entries out of a tar file\n"],["Gem::Package::TarReader::UnexpectedEOF","","Gem/Package/TarReader/UnexpectedEOF.html","","<p>Raised if the tar IO is not seekable\n"],["Gem::Package::TarTestCase","","Gem/Package/TarTestCase.html","","<p>A test case for Gem::Package::Tar* classes\n"],["Gem::Package::TarWriter","","Gem/Package/TarWriter.html","","<p>Allows writing of tar files\n"],["Gem::Package::TarWriter::BoundedStream","","Gem/Package/TarWriter/BoundedStream.html","","<p>IO wrapper that allows writing a limited amount of data\n"],["Gem::Package::TarWriter::FileOverflow","","Gem/Package/TarWriter/FileOverflow.html","",""],["Gem::Package::TarWriter::RestrictedStream","","Gem/Package/TarWriter/RestrictedStream.html","","<p>IO wrapper that provides only #write\n"],["Gem::Package::TooLongFileName","","Gem/Package/TooLongFileName.html","",""],["Gem::PackageTask","","Gem/PackageTask.html","","<p>Create a package based upon a Gem::Specification.  Gem packages, as well as\nzip files and tar/gzipped …\n"],["Gem::PathSupport","","Gem/PathSupport.html","","<p>Gem::PathSupport facilitates the GEM_HOME and GEM_PATH environment settings\nto the rest of RubyGems. …\n"],["Gem::Platform","","Gem/Platform.html","","<p>Available list of platforms for targeting Gem installations.\n<p>See `gem help platform` for information on …\n"],["Gem::PlatformMismatch","","Gem/PlatformMismatch.html","","<p>Generated when trying to lookup a gem to indicate that the gem was found,\nbut that it isn’t usable on …\n"],["Gem::RbConfig","","Gem/RbConfig.html","",""],["Gem::RemoteError","","Gem/RemoteError.html","","<p>Signals that a remote operation cannot be conducted, probably due to not\nbeing connected (or just not …\n"],["Gem::RemoteFetcher","","Gem/RemoteFetcher.html","","<p>RemoteFetcher handles the details of fetching gems and gem information from\na remote source.\n"],["Gem::RemoteFetcher::FetchError","","Gem/RemoteFetcher/FetchError.html","","<p>A FetchError exception wraps up the various possible IO and HTTP failures\nthat could happen while downloading …\n"],["Gem::RemoteFetcher::UnknownHostError","","Gem/RemoteFetcher/UnknownHostError.html","","<p>A FetchError that indicates that the reason for not being able to fetch\ndata was that the host could …\n"],["Gem::RemoteInstallationCancelled","","Gem/RemoteInstallationCancelled.html","",""],["Gem::RemoteInstallationSkipped","","Gem/RemoteInstallationSkipped.html","",""],["Gem::RemoteSourceException","","Gem/RemoteSourceException.html","","<p>Represents an error communicating via HTTP.\n"],["Gem::Request","","Gem/Request.html","",""],["Gem::Request::ConnectionPools","","Gem/Request/ConnectionPools.html","",""],["Gem::Request::ConnectionPools::Net","","Gem/Request/ConnectionPools/Net.html","",""],["Gem::RequestSet","","Gem/RequestSet.html","","<p>A RequestSet groups a request to activate a set of dependencies.\n\n<pre>nokogiri = Gem::Dependency.new 'nokogiri', ...</pre>\n"],["Gem::RequestSet::GemDependencyAPI","","Gem/RequestSet/GemDependencyAPI.html","","<p>A semi-compatible DSL for the Bundler Gemfile and Isolate gem dependencies\nfiles.\n<p>To work with both the …\n"],["Gem::RequestSet::Lockfile","","Gem/RequestSet/Lockfile.html","","<p>Parses a gem.deps.rb.lock file and constructs a LockSet containing the\ndependencies found inside.  If …\n"],["Gem::RequestSet::Lockfile::ParseError","","Gem/RequestSet/Lockfile/ParseError.html","","<p>Raised when a lockfile cannot be parsed\n"],["Gem::Requirement","","Gem/Requirement.html","","<p>A Requirement is a set of one or more version restrictions. It supports a\nfew (<code>=, !=, &gt;, &lt;, &gt;=,</code> …\n"],["Gem::Requirement::BadRequirementError","","Gem/Requirement/BadRequirementError.html","","<p>Raised when a bad requirement is encountered\n"],["Gem::Resolver","","Gem/Resolver.html","","<p>Given a set of Gem::Dependency objects as <code>needed</code> and a way to\nquery the set of available specs via <code>set</code> …\n"],["Gem::Resolver::APISet","","Gem/Resolver/APISet.html","","<p>The global rubygems pool, available via the rubygems.org API. Returns\ninstances of APISpecification. …\n"],["Gem::Resolver::APISpecification","","Gem/Resolver/APISpecification.html","","<p>Represents a specification retrieved via the rubygems.org API.\n<p>This is used to avoid loading the full …\n"],["Gem::Resolver::ActivationRequest","","Gem/Resolver/ActivationRequest.html","","<p>Specifies a Specification object that should be activated.  Also contains a\ndependency that was used …\n"],["Gem::Resolver::BestSet","","Gem/Resolver/BestSet.html","","<p>The BestSet chooses the best available method to query a remote index.\n<p>It combines IndexSet and APISet …\n"],["Gem::Resolver::ComposedSet","","Gem/Resolver/ComposedSet.html","","<p>A ComposedSet allows multiple sets to be queried like a single set.\n<p>To create a composed set with any …\n"],["Gem::Resolver::Conflict","","Gem/Resolver/Conflict.html","","<p>Used internally to indicate that a dependency conflicted with a spec that\nwould be activated.\n"],["Gem::Resolver::CurrentSet","","Gem/Resolver/CurrentSet.html","","<p>A set which represents the installed gems. Respects all the normal settings\nthat control where to look …\n"],["Gem::Resolver::DependencyRequest","","Gem/Resolver/DependencyRequest.html","","<p>Used Internally. Wraps a Dependency object to also track which spec\ncontained the Dependency.\n"],["Gem::Resolver::GitSet","","Gem/Resolver/GitSet.html","","<p>A GitSet represents gems that are sourced from git repositories.\n<p>This is used for gem dependency file …\n"],["Gem::Resolver::GitSpecification","","Gem/Resolver/GitSpecification.html","","<p>A GitSpecification represents a gem that is sourced from a git repository\nand is being loaded through …\n"],["Gem::Resolver::IndexSet","","Gem/Resolver/IndexSet.html","","<p>The global rubygems pool represented via the traditional source index.\n"],["Gem::Resolver::IndexSpecification","","Gem/Resolver/IndexSpecification.html","","<p>Represents a possible Specification object returned from IndexSet.  Used to\ndelay needed to download …\n"],["Gem::Resolver::InstalledSpecification","","Gem/Resolver/InstalledSpecification.html","","<p>An InstalledSpecification represents a gem that is already installed\nlocally.\n"],["Gem::Resolver::InstallerSet","","Gem/Resolver/InstallerSet.html","","<p>A set of gems for installation sourced from remote sources and local .gem\nfiles\n"],["Gem::Resolver::LocalSpecification","","Gem/Resolver/LocalSpecification.html","","<p>A LocalSpecification comes from a .gem file on the local filesystem.\n"],["Gem::Resolver::LockSet","","Gem/Resolver/LockSet.html","","<p>A set of gems from a gem dependencies lockfile.\n"],["Gem::Resolver::LockSpecification","","Gem/Resolver/LockSpecification.html","","<p>The LockSpecification comes from a lockfile (Gem::RequestSet::Lockfile).\n<p>A LockSpecification’s dependency …\n"],["Gem::Resolver::RequirementList","","Gem/Resolver/RequirementList.html","","<p>The RequirementList is used to hold the requirements being considered while\nresolving a set of gems. …\n"],["Gem::Resolver::Set","","Gem/Resolver/Set.html","","<p>Resolver sets are used to look up specifications (and their dependencies)\nused in resolution.  This set …\n"],["Gem::Resolver::SpecSpecification","","Gem/Resolver/SpecSpecification.html","","<p>The Resolver::SpecSpecification contains common functionality for Resolver\nspecifications that are backed …\n"],["Gem::Resolver::Specification","","Gem/Resolver/Specification.html","","<p>A Resolver::Specification contains a subset of the information contained in\na Gem::Specification.  Only …\n"],["Gem::Resolver::Stats","","Gem/Resolver/Stats.html","",""],["Gem::Resolver::VendorSet","","Gem/Resolver/VendorSet.html","","<p>A VendorSet represents gems that have been unpacked into a specific\ndirectory that contains a gemspec. …\n"],["Gem::Resolver::VendorSpecification","","Gem/Resolver/VendorSpecification.html","","<p>A VendorSpecification represents a gem that has been unpacked into a\nproject and is being loaded through …\n"],["Gem::RubyVersionMismatch","","Gem/RubyVersionMismatch.html","","<p>Raised when a gem dependencies file specifies a ruby version that does not\nmatch the current version. …\n"],["Gem::Security","","Gem/Security.html","","<p>Signing gems\n<p>The Gem::Security implements cryptographic signatures for gems.  The\nsection below is a step-by-step …\n"],["Gem::Security::Exception","","Gem/Security/Exception.html","","<p>Gem::Security default exception type\n"],["Gem::Security::Policy","","Gem/Security/Policy.html","","<p>A Gem::Security::Policy object encapsulates the settings for verifying\nsigned gem files.  This is the …\n"],["Gem::Security::Signer","","Gem/Security/Signer.html","","<p>Basic OpenSSL-based package signing class.\n"],["Gem::Security::TrustDir","","Gem/Security/TrustDir.html","","<p>The TrustDir manages the trusted certificates for gem signature\nverification.\n"],["Gem::Server","","Gem/Server.html","","<p>Gem::Server and allows users to serve gems for consumption by `gem\n–remote-install`.\n<p>gem_server starts …\n"],["Gem::SilentUI","","Gem/SilentUI.html","","<p>SilentUI is a UI choice that is absolutely silent.\n"],["Gem::Source","","Gem/Source.html","","<p>A Source knows how to list and fetch gems from a RubyGems marshal index.\n<p>There are other Source subclasses …\n"],["Gem::Source::Git","","Gem/Source/Git.html","","<p>A git gem for use in a gem dependencies file.\n<p>Example:\n\n<pre>source =\n  Gem::Source::Git.new 'rake', 'git@example:rake.git', ...</pre>\n"],["Gem::Source::Installed","","Gem/Source/Installed.html","","<p>Represents an installed gem.  This is used for dependency resolution.\n"],["Gem::Source::Local","","Gem/Source/Local.html","","<p>The local source finds gems in the current directory for fulfilling\ndependencies.\n"],["Gem::Source::Lock","","Gem/Source/Lock.html","","<p>A Lock source wraps an installed gem’s source and sorts before other\nsources during dependency resolution. …\n"],["Gem::Source::SpecificFile","","Gem/Source/SpecificFile.html","","<p>A source representing a single .gem file.  This is used for installation of\nlocal gems.\n"],["Gem::Source::Vendor","","Gem/Source/Vendor.html","","<p>This represents a vendored source that is similar to an installed gem.\n"],["Gem::SourceFetchProblem","","Gem/SourceFetchProblem.html","","<p>An error that indicates we weren’t able to fetch some data from a source\n"],["Gem::SourceList","","Gem/SourceList.html","","<p>The SourceList represents the sources rubygems has been configured to use.\nA source may be created from …\n"],["Gem::SpecFetcher","","Gem/SpecFetcher.html","","<p>SpecFetcher handles metadata updates from remote gem repositories.\n"],["Gem::SpecificGemNotFoundException","","Gem/SpecificGemNotFoundException.html","","<p>Raised by the DependencyInstaller when a specific gem cannot be found\n"],["Gem::Specification","","Gem/Specification.html","","<p>The Specification class contains the information for a Gem.  Typically\ndefined in a .gemspec file or …\n"],["Gem::StreamUI","","Gem/StreamUI.html","","<p>Gem::StreamUI implements a simple stream based user interface.\n"],["Gem::StreamUI::SilentDownloadReporter","","Gem/StreamUI/SilentDownloadReporter.html","","<p>An absolutely silent download reporter.\n"],["Gem::StreamUI::SilentProgressReporter","","Gem/StreamUI/SilentProgressReporter.html","","<p>An absolutely silent progress reporter.\n"],["Gem::StreamUI::SimpleProgressReporter","","Gem/StreamUI/SimpleProgressReporter.html","","<p>A basic dotted progress reporter.\n"],["Gem::StreamUI::VerboseDownloadReporter","","Gem/StreamUI/VerboseDownloadReporter.html","","<p>A progress reporter that prints out messages about the current progress.\n"],["Gem::StreamUI::VerboseProgressReporter","","Gem/StreamUI/VerboseProgressReporter.html","","<p>A progress reporter that prints out messages about the current progress.\n"],["Gem::StringSink","","Gem/StringSink.html","",""],["Gem::StringSource","","Gem/StringSource.html","",""],["Gem::StubSpecification","","Gem/StubSpecification.html","","<p>Gem::StubSpecification reads the stub: line from the gemspec.  This\nprevents us having to eval the entire …\n"],["Gem::SystemExitException","","Gem/SystemExitException.html","","<p>Raised to indicate that a system exit should occur with the specified\nexit_code\n"],["Gem::TestCase","","Gem/TestCase.html","","<p>RubyGemTestCase provides a variety of methods for testing rubygems and\ngem-related behavior in a sandbox. …\n"],["Gem::TestCase::SpecFetcherSetup","","Gem/TestCase/SpecFetcherSetup.html","","<p>The SpecFetcherSetup allows easy setup of a remote source in RubyGems\ntests:\n\n<pre>spec_fetcher do |f|\n  f.gem ...</pre>\n"],["Gem::TestCase::StaticSet","","Gem/TestCase/StaticSet.html","","<p>The StaticSet is a static set of gem specifications used for testing only.\nIt is available by requiring …\n"],["Gem::Text","","Gem/Text.html","","<p>A collection of text-wrangling methods\n"],["Gem::Uninstaller","","Gem/Uninstaller.html","","<p>An Uninstaller.\n<p>The uninstaller fires pre and post uninstall hooks.  Hooks can be added\neither through …\n"],["Gem::UnsatisfiableDependencyError","","Gem/UnsatisfiableDependencyError.html","","<p>Raised by Resolver when a dependency requests a gem for which there is no\nspec.\n"],["Gem::UriFormatter","","Gem/UriFormatter.html","","<p>The UriFormatter handles URIs from user-input and escaping.\n\n<pre>uf = Gem::UriFormatter.new 'example.com'\n ...</pre>\n"],["Gem::UserInteraction","","Gem/UserInteraction.html","","<p>UserInteraction allows RubyGems to interact with the user through standard\nmethods that can be replaced …\n"],["Gem::Util","","Gem/Util.html","","<p>This module contains various utility methods as module methods.\n"],["Gem::Validator","","Gem/Validator.html","","<p>Validator performs various gem file and gem database validation\n"],["Gem::VerificationError","","Gem/VerificationError.html","","<p>Raised by Gem::Validator when something is not right in a gem.\n"],["Gem::Version","","Gem/Version.html","","<p>The Version class processes string versions into comparable values. A\nversion string should normally …\n"],["Gem::VersionOption","","Gem/VersionOption.html","","<p>Mixin methods for –version and –platform Gem::Command options.\n"],["Kernel","","Kernel.html","","<p>RubyGems adds the #gem method to allow activation of specific gem versions\nand overrides the #require …\n"],["Object","","Object.html","",""],["OpenSSL","","OpenSSL.html","",""],["TempIO","","TempIO.html","","<p>A StringIO duck-typed class that uses Tempfile instead of String as the\nbacking store.\n<p>This is available …\n"],["YAML","","YAML.html","",""],["YAML::Syck","","YAML/Syck.html","","<p>Now that we’ve got something that is always here, define #to_s so when code\ntries to use this, it at …\n"],["YAML::Syck","","YAML/Syck.html","","<p>Now that we’ve got something that is always here, define #to_s so when code\ntries to use this, it at …\n"],["<<","Gem::AvailableSet","Gem/AvailableSet.html#method-i-3C-3C","(o)",""],["<<","Gem::SourceList","Gem/SourceList.html#method-i-3C-3C","(obj)","<p>Appends <code>obj</code> to the source list which may be a Gem::Source, URI\nor URI String.\n"],["<=>","Gem::Dependency","Gem/Dependency.html#method-i-3C-3D-3E","(other)","<p>Dependencies are ordered by name.\n"],["<=>","Gem::NameTuple","Gem/NameTuple.html#method-i-3C-3D-3E","(other)",""],["<=>","Gem::Source","Gem/Source.html#method-i-3C-3D-3E","(other)","<p>Sources are ordered by installation preference.\n"],["<=>","Gem::Source::Git","Gem/Source/Git.html#method-i-3C-3D-3E","(other)",""],["<=>","Gem::Source::Installed","Gem/Source/Installed.html#method-i-3C-3D-3E","(other)","<p>Installed sources sort before all other sources\n"],["<=>","Gem::Source::Local","Gem/Source/Local.html#method-i-3C-3D-3E","(other)","<p>Local sorts before Gem::Source and after Gem::Source::Installed\n"],["<=>","Gem::Source::SpecificFile","Gem/Source/SpecificFile.html#method-i-3C-3D-3E","(other)","<p>Orders this source against <code>other</code>.\n<p>If <code>other</code> is a SpecificFile from a different gem name\n<code>nil</code> is returned. …\n"],["<=>","Gem::Source::Vendor","Gem/Source/Vendor.html#method-i-3C-3D-3E","(other)",""],["<=>","Gem::Version","Gem/Version.html#method-i-3C-3D-3E","(other)","<p>Compares this version with <code>other</code> returning -1, 0, or 1 if the\nother version is larger, the same, or smaller …\n"],["==","Gem::NameTuple","Gem/NameTuple.html#method-i-3D-3D","(other)","<p>Compare with <code>other</code>. Supports another NameTuple or an Array in\nthe [name, version, platform] format.\n"],["==","Gem::Platform","Gem/Platform.html#method-i-3D-3D","(other)","<p>Is <code>other</code> equal to this platform?  Two platforms are equal if\nthey have the same CPU, OS and version. …\n"],["===","Gem::Dependency","Gem/Dependency.html#method-i-3D-3D-3D","(other)",""],["===","Gem::Platform","Gem/Platform.html#method-i-3D-3D-3D","(other)","<p>Does <code>other</code> match this platform?  Two platforms match if they\nhave the same CPU, or either has a CPU of …\n"],["===","Gem::Requirement","Gem/Requirement.html#method-i-3D-3D-3D","(version)",""],["=~","Gem::Dependency","Gem/Dependency.html#method-i-3D-7E","(other)","<p>Uses this dependency as a pattern to compare to <code>other</code>. This\ndependency will match if the name matches …\n"],["=~","Gem::Platform","Gem/Platform.html#method-i-3D-7E","(other)","<p>Does <code>other</code> match this platform?  If <code>other</code> is a\nString it will be converted to a Gem::Platform first. …\n"],["=~","Gem::Requirement","Gem/Requirement.html#method-i-3D-7E","(version)",""],["ASCIIZ","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-ASCIIZ","(str, length)",""],["SP","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-SP","(s)",""],["SP_Z","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-SP_Z","(s)",""],["Z","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-Z","(s)",""],["[]","Gem::CommandManager","Gem/CommandManager.html#method-i-5B-5D","(command_name)","<p>Returns a Command instance for <code>command_name</code>\n"],["[]","Gem::ConfigFile","Gem/ConfigFile.html#method-i-5B-5D","(key)","<p>Return the configuration information for <code>key</code>.\n"],["[]=","Gem::ConfigFile","Gem/ConfigFile.html#method-i-5B-5D-3D","(key, value)","<p>Set configuration option <code>key</code> to <code>value</code>.\n"],["_dump","Gem::Specification","Gem/Specification.html#method-i-_dump","(limit)","<p>Dump only crucial instance variables.\n"],["_gets_noecho","Gem::StreamUI","Gem/StreamUI.html#method-i-_gets_noecho","()",""],["_load","Gem::Specification","Gem/Specification.html#method-c-_load","(str)","<p>Load custom marshal format, re-initializing defaults as needed\n"],["abbreviate","Gem::Indexer","Gem/Indexer.html#method-i-abbreviate","(spec)","<p>Abbreviate the spec for downloading.  Abbreviated specs are only used for\nsearching, downloading and …\n"],["accept_uri_http","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-accept_uri_http","()","<p>Allows OptionParser to handle HTTP URIs.\n"],["activate","Gem::Specification","Gem/Specification.html#method-i-activate","()","<p>Activate this spec, registering it as a loaded spec and adding it’s lib\npaths to $LOAD_PATH. Returns …\n"],["activate_dependencies","Gem::Specification","Gem/Specification.html#method-i-activate_dependencies","()","<p>Activate all unambiguously resolved runtime dependencies of this spec. Add\nany ambiguous dependencies …\n"],["activated?","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-activated-3F","()","<p>True when the gem has been activated\n"],["add","Gem::AvailableSet","Gem/AvailableSet.html#method-i-add","(spec, source)",""],["add","Gem::DependencyList","Gem/DependencyList.html#method-i-add","(*gemspecs)","<p>Adds <code>gemspecs</code> to the dependency list.\n"],["add","Gem::Resolver::RequirementList","Gem/Resolver/RequirementList.html#method-i-add","(req)","<p>Adds Resolver::DependencyRequest <code>req</code> to this requirements\nlist.\n"],["add","Gem::TestCase::StaticSet","Gem/TestCase/StaticSet.html#method-i-add","(spec)","<p>Adds <code>spec</code> to this set.\n"],["add_GIT","Gem::RequestSet::Lockfile","Gem/RequestSet/Lockfile.html#method-i-add_GIT","(out)",""],["add_always_install","Gem::Resolver::InstallerSet","Gem/Resolver/InstallerSet.html#method-i-add_always_install","(dependency)","<p>Looks up the latest specification for <code>dependency</code> and adds it\nto the always_install list.\n"],["add_bindir","Gem::Specification","Gem/Specification.html#method-i-add_bindir","(executables)","<p>Returns an array with bindir attached to each executable in the\n<code>executables</code> list\n"],["add_bulk_threshold_option","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-add_bulk_threshold_option","()","<p>Add the –bulk-threshold option\n"],["add_checksums","Gem::Package","Gem/Package.html#method-i-add_checksums","(tar)","<p>Adds a checksum for each entry in the gem to checksums.yaml.gz.\n"],["add_clear_sources_option","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-add_clear_sources_option","()","<p>Add the –clear-sources option\n"],["add_common_option","Gem::Command","Gem/Command.html#method-c-add_common_option","(*args, &handler)",""],["add_date","Gem::Server","Gem/Server.html#method-i-add_date","(res)",""],["add_dependency","Gem::Specification","Gem/Specification.html#method-i-add_dependency","(gem, *requirements)",""],["add_development_dependency","Gem::Specification","Gem/Specification.html#method-i-add_development_dependency","(gem, *requirements)","<p>Adds a development dependency named <code>gem</code> with\n<code>requirements</code> to this gem.\n<p>Usage:\n\n<pre>spec.add_development_dependency ...</pre>\n"],["add_extra_args","Gem::Command","Gem/Command.html#method-i-add_extra_args","(args)","<p>Adds extra args from ~/.gemrc\n"],["add_file","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-add_file","(name, mode)","<p>Adds file <code>name</code> with permissions <code>mode</code>, and yields\nan IO for writing the file to\n"],["add_file_digest","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-add_file_digest","(name, mode, digest_algorithms)","<p>Adds <code>name</code> with permissions <code>mode</code> to the tar,\nyielding <code>io</code> for writing the file.  The\n<code>digest_algorithm</code> is …\n"],["add_file_signed","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-add_file_signed","(name, mode, signer)","<p>Adds <code>name</code> with permissions <code>mode</code> to the tar,\nyielding <code>io</code> for writing the file.  The <code>signer</code> is\nused to …\n"],["add_file_simple","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-add_file_simple","(name, mode, size)","<p>Add file <code>name</code> with permissions <code>mode</code>\n<code>size</code> bytes long.  Yields an IO to write the file to.\n"],["add_install_update_options","Gem::InstallUpdateOptions","Gem/InstallUpdateOptions.html#method-i-add_install_update_options","()","<p>Add the install/update options to the option parser.\n"],["add_key_option","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-add_key_option","()","<p>Add the –key option\n"],["add_local","Gem::Resolver::InstallerSet","Gem/Resolver/InstallerSet.html#method-i-add_local","(dep_name, spec, source)","<p>Adds a local gem requested using <code>dep_name</code> with the given\n<code>spec</code> that can be loaded and installed using …\n"],["add_local_remote_options","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-add_local_remote_options","()","<p>Add local/remote options to the command line parser.\n"],["add_option","Gem::Command","Gem/Command.html#method-i-add_option","(*opts)","<p>Add a command-line option and handler to the command.\n<p>See OptionParser#make_switch for an explanation …\n"],["add_owners","Gem::Commands::OwnerCommand","Gem/Commands/OwnerCommand.html#method-i-add_owners","(name, owners)",""],["add_path","Gem::Commands::EnvironmentCommand","Gem/Commands/EnvironmentCommand.html#method-i-add_path","(out, path)",""],["add_platform","Gem::PlatformMismatch","Gem/PlatformMismatch.html#method-i-add_platform","(platform)","<p>append a platform to the list of mismatched platforms.\n<p>Platforms are added via this instead of injected …\n"],["add_platform_option","Gem::VersionOption","Gem/VersionOption.html#method-i-add_platform_option","(task = command, *wrap)","<p>Add the –platform option to the option parser.\n"],["add_prerelease_option","Gem::VersionOption","Gem/VersionOption.html#method-i-add_prerelease_option","(*wrap)","<p>Add the –prerelease option to the option parser.\n"],["add_proxy_option","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-add_proxy_option","()","<p>Add the –http-proxy option\n"],["add_runtime_dependency","Gem::Specification","Gem/Specification.html#method-i-add_runtime_dependency","(gem, *requirements)","<p>Adds a runtime dependency named <code>gem</code> with\n<code>requirements</code> to this gem.\n<p>Usage:\n\n<pre>spec.add_runtime_dependency 'example', ...</pre>\n"],["add_self_to_load_path","Gem::Specification","Gem/Specification.html#method-i-add_self_to_load_path","()","<p>Adds this spec’s require paths to LOAD_PATH, in the proper location.\n"],["add_source_option","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-add_source_option","()","<p>Add the –source option\n"],["add_spec","Gem::Specification","Gem/Specification.html#method-c-add_spec","(spec)","<p>Adds <code>spec</code> to the known specifications, keeping the collection\nproperly sorted.\n"],["add_specific_extra_args","Gem::Command","Gem/Command.html#method-c-add_specific_extra_args","(cmd,args)","<p>Add a list of extra arguments for the given command.  <code>args</code> may\nbe an array or a string to be split on …\n"],["add_specs","Gem::Specification","Gem/Specification.html#method-c-add_specs","(*specs)","<p>Adds multiple specs to the known specifications.\n"],["add_to_fetcher","Gem::TestCase","Gem/TestCase.html#method-i-add_to_fetcher","(spec, path=nil, repo=@gem_repo)","<p>Add <code>spec</code> to +@fetcher+ serving the data in the file\n<code>path</code>. <code>repo</code> indicates which repo to make\n<code>spec</code> appear …\n"],["add_update_sources_option","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-add_update_sources_option","()","<p>Add the –update-sources option\n"],["add_version_option","Gem::VersionOption","Gem/VersionOption.html#method-i-add_version_option","(task = command, *wrap)","<p>Add the –version option to the option parser.\n"],["alert","Gem::StreamUI","Gem/StreamUI.html#method-i-alert","(statement, question=nil)","<p>Display an informational alert.  Will ask <code>question</code> if it is\nnot nil.\n"],["alert","Gem::UserInteraction","Gem/UserInteraction.html#method-i-alert","(statement, question = nil)","<p>Displays an alert <code>statement</code>.  Asks a <code>question</code> if\ngiven.\n"],["alert_error","Gem::StreamUI","Gem/StreamUI.html#method-i-alert_error","(statement, question=nil)","<p>Display an error message in a location expected to get error messages. Will\nask <code>question</code> if it is not …\n"],["alert_error","Gem::UserInteraction","Gem/UserInteraction.html#method-i-alert_error","(statement, question = nil)","<p>Displays an error <code>statement</code> to the error output location. \nAsks a <code>question</code> if given.\n"],["alert_warning","Gem::StreamUI","Gem/StreamUI.html#method-i-alert_warning","(statement, question=nil)","<p>Display a warning on stderr.  Will ask <code>question</code> if it is not\nnil.\n"],["alert_warning","Gem::UserInteraction","Gem/UserInteraction.html#method-i-alert_warning","(statement, question = nil)","<p>Displays a warning <code>statement</code> to the warning output location. \nAsks a <code>question</code> if given.\n"],["alien","Gem::Validator","Gem/Validator.html#method-i-alien","(gems=[])","<p>Checks the gem directory for the following potential\ninconsistencies/problems:\n<p>Checksum gem itself\n<p>For …\n"],["all","Gem::Specification","Gem/Specification.html#method-c-all","()","<p>Returns all specifications. This method is discouraged from use. You\nprobably want to use one of the …\n"],["all=","Gem::Specification","Gem/Specification.html#method-c-all-3D","(specs)","<p>Sets the known specs to <code>specs</code>. Not guaranteed to work for you\nin the future. Use at your own risk. Caveat …\n"],["all_names","Gem::Specification","Gem/Specification.html#method-c-all_names","()","<p>Return full names of all specs in sorted order.\n"],["all_spec_names","Gem::TestCase","Gem/TestCase.html#method-i-all_spec_names","()",""],["all_specs","Gem::AvailableSet","Gem/AvailableSet.html#method-i-all_specs","()",""],["alt_name_or_x509_entry","Gem::Security","Gem/Security.html#method-c-alt_name_or_x509_entry","(certificate, x509_entry)",""],["api_endpoint","Gem::FakeFetcher","Gem/FakeFetcher.html#method-i-api_endpoint","(uri)",""],["api_endpoint","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-api_endpoint","(uri)","<p>Given a source at <code>uri</code>, calculate what hostname to actually\nconnect to query the data for it.\n"],["api_key","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-api_key","()","<p>The API key from the command options or from the user’s configuration.\n"],["api_keys","Gem::ConfigFile","Gem/ConfigFile.html#method-i-api_keys","()","<p>Hash of RubyGems.org and alternate API keys\n"],["app_script_text","Gem::Installer","Gem/Installer.html#method-i-app_script_text","(bin_file_name)","<p>Return the text for an application file.\n"],["approximate_recommendation","Gem::Version","Gem/Version.html#method-i-approximate_recommendation","()","<p>A recommended version for use with a ~&gt; Requirement.\n"],["arguments","Gem::Command","Gem/Command.html#method-i-arguments","()","<p>Override to provide details of the arguments a command takes.  It should\nreturn a left-justified string, …\n"],["array_attributes","Gem::Specification","Gem/Specification.html#method-c-array_attributes","()","<p>Return the list of all array-oriented instance variables.\n"],["ask","Gem::MockGemUi","Gem/MockGemUi.html#method-i-ask","(question)",""],["ask","Gem::StreamUI","Gem/StreamUI.html#method-i-ask","(question)","<p>Ask a question.  Returns an answer if connected to a tty, nil otherwise.\n"],["ask","Gem::UserInteraction","Gem/UserInteraction.html#method-i-ask","(question)","<p>Asks a <code>question</code> and returns the answer.\n"],["ask_for_password","Gem::StreamUI","Gem/StreamUI.html#method-i-ask_for_password","(question)","<p>Ask for a password. Does not echo response to terminal.\n"],["ask_for_password","Gem::UserInteraction","Gem/UserInteraction.html#method-i-ask_for_password","(prompt)","<p>Asks for a password with a <code>prompt</code>\n"],["ask_yes_no","Gem::StreamUI","Gem/StreamUI.html#method-i-ask_yes_no","(question, default=nil)","<p>Ask a question.  Returns a true for yes, false for no.  If not connected to\na tty, raises an exception …\n"],["ask_yes_no","Gem::UserInteraction","Gem/UserInteraction.html#method-i-ask_yes_no","(question, default = nil)","<p>Asks a yes or no <code>question</code>.  Returns true for yes, false for\nno.\n"],["assert_activate","Gem::TestCase","Gem/TestCase.html#method-i-assert_activate","(expected, *specs)",""],["assert_contains_make_command","Gem::TestCase","Gem/TestCase.html#method-i-assert_contains_make_command","(target, output, msg = nil)",""],["assert_headers_equal","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-assert_headers_equal","(expected, actual)",""],["assert_path_exists","Gem::TestCase","Gem/TestCase.html#method-i-assert_path_exists","(path, msg = nil)","<p>TODO: move to minitest\n"],["attribute_names","Gem::Specification","Gem/Specification.html#method-c-attribute_names","()","<p>Return the list of all instance variables.\n"],["author","Gem::Specification","Gem/Specification.html#method-i-author","()","<p>Singular reader for #authors.  Returns the first author in the list\n"],["author=","Gem::Specification","Gem/Specification.html#method-i-author-3D","(o)","<p>Singular writer for #authors\n<p>Usage:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">spec</span>.<span class=\"ruby-identifier\">author</span> = <span class=\"ruby-string\">'John Jones'</span>\n</pre>\n"],["authors","Gem::Specification","Gem/Specification.html#method-i-authors","()","<p>The list of author names who wrote this gem.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">spec</span>.<span class=\"ruby-identifier\">authors</span> = [<span class=\"ruby-string\">'Chad Fowler'</span>, <span class=\"ruby-string\">'Jim Weirich'</span>, <span class=\"ruby-string\">'Rich Kilmer'</span>]\n</pre>\n"],["authors=","Gem::Specification","Gem/Specification.html#method-i-authors-3D","(value)","<p>Sets the list of authors, ensuring it is an array.\n<p>Usage:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">spec</span>.<span class=\"ruby-identifier\">authors</span> = [<span class=\"ruby-string\">'John Jones'</span>, <span class=\"ruby-string\">'Mary Smith'</span>]\n</pre>\n"],["available_specs","Gem::SpecFetcher","Gem/SpecFetcher.html#method-i-available_specs","(type)","<p>Returns a list of gems available for each source in Gem::sources.\n<p><code>type</code> can be one of 3 values: :released ...\n"],["backtrace","Gem::ConfigFile","Gem/ConfigFile.html#method-i-backtrace","()","<p>True if the backtrace option has been specified, or debug is on.\n"],["backtrace","Gem::StreamUI","Gem/StreamUI.html#method-i-backtrace","(exception)","<p>Prints a formatted backtrace to the errors stream if backtraces are\nenabled.\n"],["backtracking!","Gem::Resolver::Stats","Gem/Resolver/Stats.html#method-i-backtracking-21","()",""],["base_dir","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-base_dir","()","<p>Returns the full path to the base gem directory.\n<p>eg: /usr/local/lib/ruby/gems/1.8\n"],["begins?","Gem::Command","Gem/Command.html#method-i-begins-3F","(long, short)","<p>True if <code>long</code> begins with the characters from\n<code>short</code>.\n"],["bin_dir","Gem::Specification","Gem/Specification.html#method-i-bin_dir","()","<p>Returns the full path to installed gem’s bin directory.\n<p>NOTE: do not confuse this with <code>bindir</code>, which is …\n"],["bin_file","Gem::Specification","Gem/Specification.html#method-i-bin_file","(name)","<p>Returns the full path to an executable named <code>name</code> in this gem.\n"],["bin_path","Gem","Gem.html#method-c-bin_path","(name, exec_name = nil, *requirements)","<p>Find the full path to the executable for gem <code>name</code>.  If the\n<code>exec_name</code> is not given, the gem’s default_executable …\n"],["binary_mode","Gem","Gem.html#method-c-binary_mode","()","<p>The mode needed to read a file as straight binary.\n"],["bindir","Gem","Gem.html#method-c-bindir","(install_dir=Gem.dir)","<p>The path where gem executables are to be installed.\n"],["both?","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-both-3F","()","<p>Is fetching of local and remote information enabled?\n"],["build","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-i-build","(name)",""],["build","Gem::Ext::CmakeBuilder","Gem/Ext/CmakeBuilder.html#method-c-build","(extension, directory, dest_path, results, args=[], lib_dir=nil)",""],["build","Gem::Ext::ConfigureBuilder","Gem/Ext/ConfigureBuilder.html#method-c-build","(extension, directory, dest_path, results, args=[], lib_dir=nil)",""],["build","Gem::Ext::ExtConfBuilder","Gem/Ext/ExtConfBuilder.html#method-c-build","(extension, directory, dest_path, results, args=[], lib_dir=nil)",""],["build","Gem::Ext::RakeBuilder","Gem/Ext/RakeBuilder.html#method-c-build","(extension, directory, dest_path, results, args=[], lib_dir=nil)",""],["build","Gem::Package","Gem/Package.html#method-i-build","(skip_validation = false)","<p>Builds this package based on the specification set by #spec=\n"],["build","Gem::Package","Gem/Package.html#method-c-build","(spec, skip_validation=false)",""],["build_args","Gem::Command","Gem/Command.html#method-c-build_args","()","<p>Arguments used when building gems\n"],["build_args","Gem::Specification","Gem/Specification.html#method-i-build_args","()","<p>Returns the build_args used to install the gem\n"],["build_args=","Gem::Command","Gem/Command.html#method-c-build_args-3D","(value)",""],["build_extensions","Gem::Ext::Builder","Gem/Ext/Builder.html#method-i-build_extensions","()","<p>Builds extensions.  Valid types of extensions are extconf.rb files,\nconfigure scripts and rakefiles or …\n"],["build_extensions","Gem::Installer","Gem/Installer.html#method-i-build_extensions","()","<p>Builds extensions.  Valid types of extensions are extconf.rb files,\nconfigure scripts and rakefiles or …\n"],["build_indicies","Gem::Indexer","Gem/Indexer.html#method-i-build_indicies","()","<p>Build various indicies\n"],["build_info_dir","Gem::Specification","Gem/Specification.html#method-i-build_info_dir","()","<p>Returns the full path to the build info directory\n"],["build_info_file","Gem::Specification","Gem/Specification.html#method-i-build_info_file","()","<p>Returns the full path to the file containing the build information\ngenerated when the gem was installed …\n"],["build_marshal_gemspecs","Gem::Indexer","Gem/Indexer.html#method-i-build_marshal_gemspecs","()","<p>Builds Marshal quick index gemspecs.\n"],["build_modern_index","Gem::Indexer","Gem/Indexer.html#method-i-build_modern_index","(index, file, name)","<p>Build a single index for RubyGems 1.2 and newer\n"],["build_modern_indicies","Gem::Indexer","Gem/Indexer.html#method-i-build_modern_indicies","()","<p>Builds indicies for RubyGems 1.2 and newer. Handles full, latest,\nprerelease\n"],["build_rake_in","Gem::TestCase","Gem/TestCase.html#method-i-build_rake_in","(good=true)","<p>Allows the proper version of <code>rake</code> to be used for the test.\n"],["bump","Gem::Version","Gem/Version.html#method-i-bump","()","<p>Return a new version object where the next to the last revision number is\none greater (e.g., 5.3.1 =&gt; …\n"],["bundled_gem_in_old_ruby?","Gem::Specification","Gem/Specification.html#method-i-bundled_gem_in_old_ruby-3F","()","<p>Used to detect if the gem is bundled in older version of Ruby, but not\ndetectable as default gem (see …\n"],["bytes_read","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-bytes_read","()","<p>Number of bytes read out of the tar entry\n"],["cache_dir","Gem::Source","Gem/Source.html#method-i-cache_dir","(uri)","<p>Returns the local directory to write <code>uri</code> to.\n"],["cache_dir","Gem::Specification","Gem/Specification.html#method-i-cache_dir","()","<p>Returns the full path to the cache directory containing this spec’s cached\ngem.\n"],["cache_file","Gem::Specification","Gem/Specification.html#method-i-cache_file","()","<p>Returns the full path to the cached gem for this spec.\n"],["cache_update_path","Gem::FakeFetcher","Gem/FakeFetcher.html#method-i-cache_update_path","(uri, path = nil, update = true)",""],["cache_update_path","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-cache_update_path","(uri, path = nil, update = true)","<p>Downloads <code>uri</code> to <code>path</code> if necessary. If no path is\ngiven, it just passes the data.\n"],["calc_checksum","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-calc_checksum","(header)",""],["cert_files","Gem::Request","Gem/Request.html#method-i-cert_files","()",""],["cert_path","Gem::Security::TrustDir","Gem/Security/TrustDir.html#method-i-cert_path","(certificate)","<p>Returns the path to the trusted <code>certificate</code>\n"],["cert_path","Gem::TestCase","Gem/TestCase.html#method-c-cert_path","(cert_name)","<p>Returns the path to the certificate named <code>cert_name</code> from\n<code>test/rubygems/</code>.\n"],["certificates_matching","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-i-certificates_matching","(filter)",""],["check_cert","Gem::Security::Policy","Gem/Security/Policy.html#method-i-check_cert","(signer, issuer, time)","<p>Ensures that <code>signer</code> is valid for <code>time</code> and was\nsigned by the <code>issuer</code>. If the <code>issuer</code> is\n<code>nil</code> no verification …\n"],["check_chain","Gem::Security::Policy","Gem/Security/Policy.html#method-i-check_chain","(chain, time)","<p>Verifies each certificate in <code>chain</code> has signed the following\ncertificate and is valid for the given <code>time</code> …\n"],["check_closed","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-check_closed","()","<p>Raises IOError if the TarWriter is closed\n"],["check_credentials_permissions","Gem::ConfigFile","Gem/ConfigFile.html#method-i-check_credentials_permissions","()","<p>Checks the permissions of the credentials file.  If they are not 0600 an\nerror message is displayed and …\n"],["check_data","Gem::Security::Policy","Gem/Security/Policy.html#method-i-check_data","(public_key, digest, signature, data)","<p>Verifies that <code>data</code> matches the <code>signature</code> created\nby <code>public_key</code> and the <code>digest</code> algorithm.\n"],["check_gems","Gem::Commands::CheckCommand","Gem/Commands/CheckCommand.html#method-i-check_gems","()",""],["check_key","Gem::Security::Policy","Gem/Security/Policy.html#method-i-check_key","(signer, key)","<p>Ensures the public key of <code>key</code> matches the public key in\n<code>signer</code>\n"],["check_root","Gem::Security::Policy","Gem/Security/Policy.html#method-i-check_root","(chain, time)","<p>Ensures the root certificate in <code>chain</code> is self-signed and valid\nfor <code>time</code>.\n"],["check_ruby_version","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-check_ruby_version","()",""],["check_trust","Gem::Security::Policy","Gem/Security/Policy.html#method-i-check_trust","(chain, digester, trust_dir)","<p>Ensures the root of <code>chain</code> has a trusted certificate in\n<code>trust_dir</code> and the digests of the two certificates …\n"],["choose_from_list","Gem::StreamUI","Gem/StreamUI.html#method-i-choose_from_list","(question, list)","<p>Choose from a list of options.  <code>question</code> is a prompt displayed\nabove the list.  <code>list</code> is a list of option …\n"],["choose_from_list","Gem::UserInteraction","Gem/UserInteraction.html#method-i-choose_from_list","(question, list)","<p>Asks the user to answer <code>question</code> with an answer from the given\n<code>list</code>.\n"],["class_name","Gem::Ext::Builder","Gem/Ext/Builder.html#method-c-class_name","()",""],["clean_gems","Gem::Commands::CleanupCommand","Gem/Commands/CleanupCommand.html#method-i-clean_gems","()",""],["clear","Gem::DependencyList","Gem/DependencyList.html#method-i-clear","()",""],["clear","Gem::SourceList","Gem/SourceList.html#method-i-clear","()","<p>Removes all sources from the SourceList.\n"],["clear","Gem::TestCase::SpecFetcherSetup","Gem/TestCase/SpecFetcherSetup.html#method-i-clear","()","<p>Removes any created gems or specifications from Gem.dir (the default\ninstall location).\n"],["clear_default_specs","Gem","Gem.html#method-c-clear_default_specs","()","<p>Clear default gem related variables. It is for test\n"],["clear_paths","Gem","Gem.html#method-c-clear_paths","()","<p>Reset the <code>dir</code> and <code>path</code> values.  The next time\n<code>dir</code> or <code>path</code> is requested, the values will be\ncalculated …\n"],["close","Gem::Package::TarReader","Gem/Package/TarReader.html#method-i-close","()","<p>Close the tar file\n"],["close","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-close","()","<p>Closes the tar entry\n"],["close","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-close","()","<p>Closes the TarWriter\n"],["close","Gem::SilentUI","Gem/SilentUI.html#method-i-close","()",""],["close","Gem::StreamUI","Gem/StreamUI.html#method-i-close","()",""],["close_all","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-close_all","()",""],["closed?","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-closed-3F","()","<p>Is the tar entry closed?\n"],["closed?","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-closed-3F","()","<p>Is the TarWriter closed?\n"],["command_names","Gem::CommandManager","Gem/CommandManager.html#method-i-command_names","()","<p>Return a sorted list of all command names as strings.\n"],["common_installer_setup","Gem::TestCase","Gem/TestCase.html#method-i-common_installer_setup","()",""],["common_installer_teardown","Gem::TestCase","Gem/TestCase.html#method-i-common_installer_teardown","()",""],["common_options","Gem::Command","Gem/Command.html#method-c-common_options","()",""],["compact_specs","Gem::Indexer","Gem/Indexer.html#method-i-compact_specs","(specs)","<p>Compacts Marshal output for the specs index data source by using identical\nobjects as much as possible. …\n"],["complain","Gem::Commands::LockCommand","Gem/Commands/LockCommand.html#method-i-complain","(message)",""],["compose_sets","Gem::Resolver","Gem/Resolver.html#method-c-compose_sets","(*sets)","<p>Combines <code>sets</code> into a ComposedSet that allows specification\nlookup in a uniform manner.  If one of the …\n"],["compress","Gem::Indexer","Gem/Indexer.html#method-i-compress","(filename, extension)","<p>Compress <code>filename</code> with <code>extension</code>.\n"],["compress_indicies","Gem::Indexer","Gem/Indexer.html#method-i-compress_indicies","()","<p>Compresses indicies on disk\n"],["concat","Gem::Requirement","Gem/Requirement.html#method-i-concat","(new)","<p>Concatenates the <code>new</code> requirements onto this requirement.\n"],["config_file","Gem","Gem.html#method-c-config_file","()","<p>The path to standard location of the user’s .gemrc file.\n"],["config_file_name","Gem::ConfigFile","Gem/ConfigFile.html#method-i-config_file_name","()","<p>The name of the configuration file.\n"],["configuration","Gem","Gem.html#method-c-configuration","()","<p>The standard configuration object for gems.\n"],["configuration=","Gem","Gem.html#method-c-configuration-3D","(config)","<p>Use the given configuration object (which implements the ConfigFile\nprotocol) as the standard configuration …\n"],["configure_connection_for_https","Gem::Request","Gem/Request.html#method-c-configure_connection_for_https","(connection, cert_files)",""],["conflicting_dependencies","Gem::DependencyResolutionError","Gem/DependencyResolutionError.html#method-i-conflicting_dependencies","()",""],["conflicting_dependencies","Gem::Resolver::Conflict","Gem/Resolver/Conflict.html#method-i-conflicting_dependencies","()","<p>Return the 2 dependency objects that conflicted\n"],["conflicts","Gem::Specification","Gem/Specification.html#method-i-conflicts","()","<p>Return any possible conflicts against the currently loaded specs.\n"],["connection_for","Gem::Request","Gem/Request.html#method-i-connection_for","(uri)","<p>Creates or an HTTP connection based on <code>uri</code>, or retrieves an\nexisting connection, using a proxy if needed. …\n"],["consider_local?","Gem::DependencyInstaller","Gem/DependencyInstaller.html#method-i-consider_local-3F","()","<p>Indicated, based on the requested domain, if local gems should be\nconsidered.\n"],["consider_remote?","Gem::DependencyInstaller","Gem/DependencyInstaller.html#method-i-consider_remote-3F","()","<p>Indicated, based on the requested domain, if remote gems should be\nconsidered.\n"],["contains_requirable_file?","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-contains_requirable_file-3F","(file)","<p>Return true if this spec can require <code>file</code>.\n"],["contents","Gem::Package","Gem/Package.html#method-i-contents","()","<p>A list of file names contained in this gem\n"],["contents","Gem::Package::Old","Gem/Package/Old.html#method-i-contents","()","<p>A list of file names contained in this gem\n"],["correct?","Gem::Version","Gem/Version.html#method-c-correct-3F","(version)","<p>True if the <code>version</code> string matches RubyGems’ requirements.\n"],["correct_for_windows_path","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-correct_for_windows_path","(path)",""],["create","Gem::NoAliasYAMLTree","Gem/NoAliasYAMLTree.html#method-c-create","()",""],["create","Gem::Requirement","Gem/Requirement.html#method-c-create","(input)","<p>Factory method to create a Gem::Requirement object.  Input may be a\nVersion, a String, or nil.  Intended …\n"],["create","Gem::Version","Gem/Version.html#method-c-create","(input)","<p>Factory method to create a Version object. Input may be a Version or a\nString. Intended to simplify client …\n"],["create_cert","Gem::Security","Gem/Security.html#method-c-create_cert","(subject, key, age = ONE_YEAR, extensions = EXTENSIONS, serial = 1)","<p>Creates an unsigned certificate for <code>subject</code> and\n<code>key</code>.  The lifetime of the key is from the current time …\n"],["create_cert_email","Gem::Security","Gem/Security.html#method-c-create_cert_email","(email, key, age = ONE_YEAR, extensions = EXTENSIONS)","<p>Creates a self-signed certificate with an issuer and subject from\n<code>email</code>, a subject alternative name of …\n"],["create_cert_self_signed","Gem::Security","Gem/Security.html#method-c-create_cert_self_signed","(subject, key, age = ONE_YEAR, extensions = EXTENSIONS, serial = 1)","<p>Creates a self-signed certificate with an issuer and subject of\n<code>subject</code> and the given <code>extensions</code> for …\n"],["create_key","Gem::Security","Gem/Security.html#method-c-create_key","(length = KEY_LENGTH, algorithm = KEY_ALGORITHM)","<p>Creates a new key pair of the specified <code>length</code> and\n<code>algorithm</code>.  The default is a 2048 bit RSA key.\n"],["create_tmpdir","Gem::TestCase","Gem/TestCase.html#method-i-create_tmpdir","()","<p>creates a temporary directory with hax TODO: deprecate and remove\n"],["created_specs","Gem::TestCase::SpecFetcherSetup","Gem/TestCase/SpecFetcherSetup.html#method-i-created_specs","()","<p>Returns a Hash of created Specification full names and the corresponding\nSpecification.\n"],["credentials_path","Gem::ConfigFile","Gem/ConfigFile.html#method-i-credentials_path","()","<p>Location of RubyGems.org credentials\n"],["datadir","Gem","Gem.html#method-c-datadir","(gem_name)","<p>The path to the data directory specified by the gem name.  If the package\nis not available as a gem, …\n"],["date","Gem::Specification","Gem/Specification.html#method-i-date","()","<p>The date this gem was created.  Lazily defaults to the current UTC date.\n<p>There is no need to set this …\n"],["date=","Gem::Specification","Gem/Specification.html#method-i-date-3D","(date)","<p>The date this gem was created\n<p>DO NOT set this, it is set automatically when the gem is packaged.\n"],["debug","Gem::StreamUI","Gem/StreamUI.html#method-i-debug","(statement)","<p>Display a debug message on the same location as error messages.\n"],["declare","Gem::TestCase::SpecFetcherSetup","Gem/TestCase/SpecFetcherSetup.html#method-c-declare","(test, repository)","<p>Executes a SpecFetcher setup block.  Yields an instance then creates the\ngems and specifications defined …\n"],["default","Gem::Requirement","Gem/Requirement.html#method-c-default","()","<p>A default “version requirement” can surely <em>only</em> be ‘&gt;= 0’.\n"],["default_bindir","Gem","Gem.html#method-c-default_bindir","()","<p>The default directory for binaries\n"],["default_cert_path","Gem","Gem.html#method-c-default_cert_path","()","<p>The default signing certificate chain path\n"],["default_dir","Gem","Gem.html#method-c-default_dir","()","<p>Default home directory path to be used if an alternate value is not\nspecified in the environment\n"],["default_exec_format","Gem","Gem.html#method-c-default_exec_format","()","<p>Deduce Ruby’s –program-prefix and –program-suffix from its install name\n"],["default_ext_dir_for","Gem","Gem.html#method-c-default_ext_dir_for","(base_dir)","<p>Returns binary extensions dir for specified RubyGems base dir or nil if\nsuch directory cannot be determined. …\n"],["default_gem?","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-default_gem-3F","()",""],["default_gems_use_full_paths?","Gem","Gem.html#method-c-default_gems_use_full_paths-3F","()","<p>Whether to expect full paths in default gems - true for non-MRI ruby\nimplementations\n"],["default_key_path","Gem","Gem.html#method-c-default_key_path","()","<p>The default signing key path\n"],["default_path","Gem","Gem.html#method-c-default_path","()","<p>Default gem load path\n"],["default_rubygems_dirs","Gem","Gem.html#method-c-default_rubygems_dirs","()","<p>Paths where RubyGems’ .rb files and bin files are installed\n"],["default_sources","Gem","Gem.html#method-c-default_sources","()","<p>An Array of the default sources that come with RubyGems\n"],["default_spec_cache_dir","Gem","Gem.html#method-c-default_spec_cache_dir","()","<p>Default spec directory path to be used if an alternate value is not\nspecified in the environment\n"],["default_spec_file","Gem::Installer","Gem/Installer.html#method-i-default_spec_file","()","<p>The location of of the default spec file for default gems.\n"],["default_specifications_dir","Gem::BasicSpecification","Gem/BasicSpecification.html#method-c-default_specifications_dir","()",""],["default_value","Gem::Specification","Gem/Specification.html#method-i-default_value","(name)","<p>The default value for specification attribute <code>name</code>\n"],["defaults_str","Gem::Command","Gem/Command.html#method-i-defaults_str","()","<p>Override to display the default values of the command options. (similar to\n<code>arguments</code>, but displays the …\n"],["define","Gem::PackageTask","Gem/PackageTask.html#method-i-define","()","<p>Create the Rake tasks and actions specified by this Gem::PackageTask.\n(<code>define</code> is automatically called …\n"],["deflate","Gem","Gem.html#method-c-deflate","(data)","<p>A Zlib::Deflate.deflate wrapper\n"],["delete","Gem::SourceList","Gem/SourceList.html#method-i-delete","(source)","<p>Deletes <code>source</code> from the source list which may be a Gem::Source\nor a URI.\n"],["dep","Gem::TestCase","Gem/TestCase.html#method-i-dep","(name, *requirements)","<p>Construct a new Gem::Dependency.\n"],["dependencies","Gem::Resolver::IndexSpecification","Gem/Resolver/IndexSpecification.html#method-i-dependencies","()","<p>The dependencies of the gem for this specification\n"],["dependencies","Gem::Resolver::SpecSpecification","Gem/Resolver/SpecSpecification.html#method-i-dependencies","()","<p>The dependencies of the gem for this specification\n"],["dependencies","Gem::Specification","Gem/Specification.html#method-i-dependencies","()","<p>A list of Gem::Dependency objects this gem depends on.\n<p>Use #add_dependency or #add_development_dependency …\n"],["dependency","Gem::ImpossibleDependenciesError","Gem/ImpossibleDependenciesError.html#method-i-dependency","()",""],["dependency_order","Gem::DependencyList","Gem/DependencyList.html#method-i-dependency_order","()","<p>Return a list of the gem specifications in the dependency list, sorted in\norder so that no gemspec in …\n"],["dependency_request","Gem::TestCase","Gem/TestCase.html#method-i-dependency_request","(dep, from_name, from_version, parent = nil)","<p>Constructs a Gem::Resolver::DependencyRequest from a Gem::Dependency\n<code>dep</code>, a <code>from_name</code> and <code>from_version</code> …\n"],["dependent_gems","Gem::Specification","Gem/Specification.html#method-i-dependent_gems","()","<p>Return a list of all gems that have a dependency on this gemspec.  The list\nis structured with entries …\n"],["dependent_specs","Gem::Specification","Gem/Specification.html#method-i-dependent_specs","()","<p>Returns all specs that matches this spec’s runtime dependencies.\n"],["deprecate","Gem::Deprecate","Gem/Deprecate.html#method-c-deprecate","(name, repl, year, month)","<p>Simple deprecation method that deprecates <code>name</code> by wrapping it\nup in a dummy method. It warns on each …\n"],["description","Gem::Command","Gem/Command.html#method-i-description","()","<p>Override to display a longer description of what this command does.\n"],["description","Gem::Commands::UnpackCommand","Gem/Commands/UnpackCommand.html#method-i-description","()",""],["description=","Gem::Specification","Gem/Specification.html#method-i-description-3D","(str)","<p>A detailed description of this gem.  See also #summary\n"],["detect","Gem::SpecFetcher","Gem/SpecFetcher.html#method-i-detect","(type=:complete)","<p>Return all gem name tuples who’s names match <code>obj</code>\n"],["detect_gemdeps","Gem","Gem.html#method-c-detect_gemdeps","(path = nil)","<p>TODO remove with RubyGems 3.0\n"],["development?","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-development-3F","()","<p>Is this activation request for a development dependency?\n"],["development?","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-i-development-3F","()","<p>Is this dependency a development dependency?\n"],["development_dependencies","Gem::Specification","Gem/Specification.html#method-i-development_dependencies","()","<p>List of dependencies that are used for development\n"],["dir","Gem","Gem.html#method-c-dir","()","<p>The path where gems are to be installed.\n"],["dir","Gem::Installer","Gem/Installer.html#method-i-dir","()","<p>Return the target directory where the gem is to be installed. This\ndirectory is not guaranteed to be …\n"],["directory?","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-directory-3F","()","<p>Is this tar entry a directory?\n"],["dirs","Gem::Specification","Gem/Specification.html#method-c-dirs","()","<p>Return the directories that Specification uses to find specs.\n"],["dirs=","Gem::Specification","Gem/Specification.html#method-c-dirs-3D","(dirs)","<p>Set the directories that Specification uses to find specs. Setting this\nresets the list of known specs. …\n"],["display","Gem::Resolver::Stats","Gem/Resolver/Stats.html#method-i-display","()",""],["doc_dir","Gem::Specification","Gem/Specification.html#method-i-doc_dir","(type = nil)","<p>Returns the full path to this spec’s documentation directory.  If\n<code>type</code> is given it will be appended to …\n"],["doc_root","Gem::Server","Gem/Server.html#method-i-doc_root","(gem_name)",""],["doctor","Gem::Commands::CheckCommand","Gem/Commands/CheckCommand.html#method-i-doctor","()",""],["doctor","Gem::Doctor","Gem/Doctor.html#method-i-doctor","()","<p>Cleans up uninstalled files and invalid gem specifications\n"],["done","Gem::StreamUI::SilentDownloadReporter","Gem/StreamUI/SilentDownloadReporter.html#method-i-done","()","<p>The silent download reporter won’t tell you when the download is done.\nBecause it is silent.\n"],["done","Gem::StreamUI::SilentProgressReporter","Gem/StreamUI/SilentProgressReporter.html#method-i-done","()","<p>Does not print anything when complete as this object has taken a vow of\nsilence.\n"],["done","Gem::StreamUI::SimpleProgressReporter","Gem/StreamUI/SimpleProgressReporter.html#method-i-done","()","<p>Prints out the terminal message.\n"],["done","Gem::StreamUI::VerboseDownloadReporter","Gem/StreamUI/VerboseDownloadReporter.html#method-i-done","()","<p>Indicates the download is complete.\n"],["done","Gem::StreamUI::VerboseProgressReporter","Gem/StreamUI/VerboseProgressReporter.html#method-i-done","()","<p>Prints out the terminal message.\n"],["done_installing","Gem","Gem.html#method-c-done_installing","(&hook)","<p>Adds a post-installs hook that will be passed a Gem::DependencyInstaller\nand a list of installed specifications …\n"],["download","Gem::FakeFetcher","Gem/FakeFetcher.html#method-i-download","(spec, source_uri, install_dir = Gem.dir)",""],["download","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-download","(spec, source_uri, install_dir = Gem.dir)","<p>Moves the gem <code>spec</code> from <code>source_uri</code> to the cache\ndir unless it is already there.  If the source_uri is …\n"],["download","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-download","(path)","<p>Downloads a gem at <code>path</code> and returns the file path.\n"],["download","Gem::Source","Gem/Source.html#method-i-download","(spec, dir=Dir.pwd)","<p>Downloads <code>spec</code> and writes it to <code>dir</code>.  See also\nGem::RemoteFetcher#download.\n"],["download","Gem::Source::Installed","Gem/Source/Installed.html#method-i-download","(spec, path)","<p>We don’t need to download an installed gem\n"],["download_reporter","Gem::StreamUI","Gem/StreamUI.html#method-i-download_reporter","(*args)","<p>Return a download reporter object chosen from the current verbosity\n"],["download_to_cache","Gem::FakeFetcher","Gem/FakeFetcher.html#method-i-download_to_cache","(dependency)",""],["download_to_cache","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-download_to_cache","(dependency)","<p>Given a name and requirement, downloads this gem into cache and returns the\nfilename. Returns nil if …\n"],["each","Gem::AvailableSet","Gem/AvailableSet.html#method-i-each","()","<p>Yields each Tuple in this AvailableSet\n"],["each","Gem::ConfigFile","Gem/ConfigFile.html#method-i-each","(&block)","<p>Delegates to @hash\n"],["each","Gem::DependencyList","Gem/DependencyList.html#method-i-each","(&block)","<p>Iterator over dependency_order\n"],["each","Gem::List","Gem/List.html#method-i-each","()",""],["each","Gem::Package::TarReader","Gem/Package/TarReader.html#method-i-each","()","<p>Iterates over files in the tarball yielding each entry\n"],["each","Gem::SourceList","Gem/SourceList.html#method-i-each","()","<p>Yields each source URI in the list.\n"],["each","Gem::Specification","Gem/Specification.html#method-c-each","()","<p>Enumerate every known spec.  See ::dirs= and ::add_spec to set the list of\nspecs.\n"],["each_certificate","Gem::Security::TrustDir","Gem/Security/TrustDir.html#method-i-each_certificate","()","<p>Enumerates trusted certificates.\n"],["each_entry","Gem::Package::TarReader","Gem/Package/TarReader.html#method-i-each_entry","()",""],["each_source","Gem::SourceList","Gem/SourceList.html#method-i-each_source","(&b)","<p>Yields each source in the list.\n"],["each_spec","Gem::AvailableSet","Gem/AvailableSet.html#method-i-each_spec","()","<p>Yields the Gem::Specification for each Tuple in this AvailableSet\n"],["email_to_name","Gem::Security","Gem/Security.html#method-c-email_to_name","(email_address)","<p>Turns <code>email_address</code> into an OpenSSL::X509::Name\n"],["empty?","Gem::AvailableSet","Gem/AvailableSet.html#method-i-empty-3F","()",""],["empty?","Gem::Package::TarHeader","Gem/Package/TarHeader.html#method-i-empty-3F","()","<p>Is the tar entry empty?\n"],["empty?","Gem::Resolver::RequirementList","Gem/Resolver/RequirementList.html#method-i-empty-3F","()","<p>Is the list empty?\n"],["empty?","Gem::SourceList","Gem/SourceList.html#method-i-empty-3F","()","<p>Returns true if there are no sources in this SourceList.\n"],["enable_shared","Gem::TestCase","Gem/TestCase.html#method-i-enable_shared","(value)","<p>Sets the ENABLE_SHARED entry in RbConfig::CONFIG to <code>value</code> and\nrestores the original value when the block …\n"],["ensure_default_gem_subdirectories","Gem","Gem.html#method-c-ensure_default_gem_subdirectories","(dir = Gem.dir, mode = nil)","<p>Quietly ensure the Gem directory <code>dir</code> contains all the proper\nsubdirectories for handling default gems. …\n"],["ensure_dependency","Gem::Installer","Gem/Installer.html#method-i-ensure_dependency","(spec, dependency)","<p>Ensure that the dependency is satisfied by the current installation of gem.\nIf it is not an exception …\n"],["ensure_gem_subdirectories","Gem","Gem.html#method-c-ensure_gem_subdirectories","(dir = Gem.dir, mode = nil)","<p>Quietly ensure the Gem directory <code>dir</code> contains all the proper\nsubdirectories.  If we can’t create a directory …\n"],["ensure_loadable_spec","Gem::Installer","Gem/Installer.html#method-i-ensure_loadable_spec","()","<p>Ensures the Gem::Specification written out for this gem is loadable upon\ninstallation.\n"],["eof?","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-eof-3F","()","<p>Are we at the end of the tar entry?\n"],["eql?","Gem::NameTuple","Gem/NameTuple.html#method-i-eql-3F","(other)",""],["eql?","Gem::Platform","Gem/Platform.html#method-i-eql-3F","(other)",""],["eql?","Gem::Version","Gem/Version.html#method-i-eql-3F","(other)","<p>A Version is only eql? to another version if it’s specified to the same\nprecision. Version “1.0” …\n"],["error","Gem::MockGemUi","Gem/MockGemUi.html#method-i-error","()",""],["errors","Gem::Resolver::ComposedSet","Gem/Resolver/ComposedSet.html#method-i-errors","()",""],["errors","Gem::Resolver::InstallerSet","Gem/Resolver/InstallerSet.html#method-i-errors","()","<p>Errors encountered while resolving gems\n"],["escape","Gem::UriFormatter","Gem/UriFormatter.html#method-i-escape","()","<p>Escapes the #uri for use as a CGI parameter\n"],["exact?","Gem::Requirement","Gem/Requirement.html#method-i-exact-3F","()","<p>true if the requirement is for only an exact version\n"],["exec_format","Gem::Installer","Gem/Installer.html#method-c-exec_format","()","<p>Defaults to use Ruby’s program prefix and suffix.\n"],["executable","Gem::Specification","Gem/Specification.html#method-i-executable","()","<p>Singular accessor for #executables\n"],["executable=","Gem::Specification","Gem/Specification.html#method-i-executable-3D","(o)","<p>Singular accessor for #executables\n"],["executables","Gem::Specification","Gem/Specification.html#method-i-executables","()","<p>Executables included in the gem.\n<p>For example, the rake gem has rake as an executable. You don’t specify …\n"],["executables=","Gem::Specification","Gem/Specification.html#method-i-executables-3D","(value)","<p>Sets executables to <code>value</code>, ensuring it is an array. Don’t use\nthis, push onto the array instead.\n"],["execute","Gem::Command","Gem/Command.html#method-i-execute","()","<p>Override to provide command handling.\n<p>#options will be filled in with your parsed options, unparsed options …\n"],["execute","Gem::Commands::BuildCommand","Gem/Commands/BuildCommand.html#method-i-execute","()",""],["execute","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-i-execute","()",""],["execute","Gem::Commands::CheckCommand","Gem/Commands/CheckCommand.html#method-i-execute","()",""],["execute","Gem::Commands::CleanupCommand","Gem/Commands/CleanupCommand.html#method-i-execute","()",""],["execute","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-i-execute","()",""],["execute","Gem::Commands::DependencyCommand","Gem/Commands/DependencyCommand.html#method-i-execute","()",""],["execute","Gem::Commands::EnvironmentCommand","Gem/Commands/EnvironmentCommand.html#method-i-execute","()",""],["execute","Gem::Commands::FetchCommand","Gem/Commands/FetchCommand.html#method-i-execute","()",""],["execute","Gem::Commands::GenerateIndexCommand","Gem/Commands/GenerateIndexCommand.html#method-i-execute","()",""],["execute","Gem::Commands::HelpCommand","Gem/Commands/HelpCommand.html#method-i-execute","()",""],["execute","Gem::Commands::InstallCommand","Gem/Commands/InstallCommand.html#method-i-execute","()",""],["execute","Gem::Commands::LockCommand","Gem/Commands/LockCommand.html#method-i-execute","()",""],["execute","Gem::Commands::MirrorCommand","Gem/Commands/MirrorCommand.html#method-i-execute","()",""],["execute","Gem::Commands::OpenCommand","Gem/Commands/OpenCommand.html#method-i-execute","()",""],["execute","Gem::Commands::OutdatedCommand","Gem/Commands/OutdatedCommand.html#method-i-execute","()",""],["execute","Gem::Commands::OwnerCommand","Gem/Commands/OwnerCommand.html#method-i-execute","()",""],["execute","Gem::Commands::PristineCommand","Gem/Commands/PristineCommand.html#method-i-execute","()",""],["execute","Gem::Commands::PushCommand","Gem/Commands/PushCommand.html#method-i-execute","()",""],["execute","Gem::Commands::QueryCommand","Gem/Commands/QueryCommand.html#method-i-execute","()",""],["execute","Gem::Commands::RdocCommand","Gem/Commands/RdocCommand.html#method-i-execute","()",""],["execute","Gem::Commands::ServerCommand","Gem/Commands/ServerCommand.html#method-i-execute","()",""],["execute","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-execute","()",""],["execute","Gem::Commands::SourcesCommand","Gem/Commands/SourcesCommand.html#method-i-execute","()",""],["execute","Gem::Commands::SpecificationCommand","Gem/Commands/SpecificationCommand.html#method-i-execute","()",""],["execute","Gem::Commands::StaleCommand","Gem/Commands/StaleCommand.html#method-i-execute","()",""],["execute","Gem::Commands::UninstallCommand","Gem/Commands/UninstallCommand.html#method-i-execute","()",""],["execute","Gem::Commands::UnpackCommand","Gem/Commands/UnpackCommand.html#method-i-execute","()",""],["execute","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-i-execute","()",""],["execute","Gem::Commands::WhichCommand","Gem/Commands/WhichCommand.html#method-i-execute","()",""],["execute","Gem::Commands::YankCommand","Gem/Commands/YankCommand.html#method-i-execute","()",""],["explain","Gem::Resolver::Conflict","Gem/Resolver/Conflict.html#method-i-explain","()","<p>A string explanation of the conflict.\n"],["explanation","Gem::Resolver::Conflict","Gem/Resolver/Conflict.html#method-i-explanation","()","<p>Explanation of the conflict used by exceptions to print useful messages\n"],["explicit?","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-i-explicit-3F","()","<p>Indicate that the request is for a gem explicitly requested by the user\n"],["extension_dir","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-extension_dir","()","<p>Returns full path to the directory where gem’s extensions are installed.\n"],["extensions","Gem::Specification","Gem/Specification.html#method-i-extensions","()","<p>Extensions to build when installing the gem, specifically the paths to\nextconf.rb-style files used to …\n"],["extensions=","Gem::Specification","Gem/Specification.html#method-i-extensions-3D","(extensions)","<p>Sets extensions to <code>extensions</code>, ensuring it is an array. Don’t\nuse this, push onto the array instead. …\n"],["extensions_dir","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-extensions_dir","()","<p>Returns path to the extensions directory.\n"],["extra_args","Gem::Command","Gem/Command.html#method-c-extra_args","()",""],["extra_args=","Gem::Command","Gem/Command.html#method-c-extra_args-3D","(value)",""],["extra_rdoc_files","Gem::Specification","Gem/Specification.html#method-i-extra_rdoc_files","()","<p>Extra files to add to RDoc such as README or doc/examples.txt\n<p>When the user elects to generate the RDoc …\n"],["extra_rdoc_files=","Gem::Specification","Gem/Specification.html#method-i-extra_rdoc_files-3D","(files)","<p>Sets extra_rdoc_files to <code>files</code>, ensuring it is an array. Don’t\nuse this, push onto the array instead. …\n"],["extract_bin","Gem::Installer","Gem/Installer.html#method-i-extract_bin","()","<p>Extracts only the bin/ files from the gem into the gem directory. This is\nused by default gems to allow …\n"],["extract_files","Gem::Installer","Gem/Installer.html#method-i-extract_files","()","<p>Reads the file index and extracts each file into the gem directory.\n<p>Ensures that files can’t be installed …\n"],["extract_files","Gem::Package","Gem/Package.html#method-i-extract_files","(destination_dir, pattern = \"*\")","<p>Extracts the files in this package into <code>destination_dir</code>\n<p>If <code>pattern</code> is specified, only entries matching …\n"],["extract_files","Gem::Package::Old","Gem/Package/Old.html#method-i-extract_files","(destination_dir)","<p>Extracts the files in this package into <code>destination_dir</code>\n"],["fetch","Gem::Request","Gem/Request.html#method-i-fetch","()",""],["fetch","Gem::StreamUI::SilentDownloadReporter","Gem/StreamUI/SilentDownloadReporter.html#method-i-fetch","(filename, filesize)","<p>The silent download reporter does not display <code>filename</code> or care\nabout <code>filesize</code> because it is silent.\n"],["fetch","Gem::StreamUI::VerboseDownloadReporter","Gem/StreamUI/VerboseDownloadReporter.html#method-i-fetch","(file_name, total_bytes)","<p>Tells the download reporter that the <code>file_name</code> is being\nfetched and contains <code>total_bytes</code>.\n"],["fetch_file","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-fetch_file","(uri, *_)","<p>File Fetcher. Dispatched by <code>fetch_path</code>. Use it instead.\n"],["fetch_http","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-fetch_http","(uri, last_modified = nil, head = false, depth = 0)","<p>HTTP Fetcher. Dispatched by <code>fetch_path</code>. Use it instead.\n"],["fetch_https","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-fetch_https","(uri, last_modified = nil, head = false, depth = 0)",""],["fetch_path","Gem::FakeFetcher","Gem/FakeFetcher.html#method-i-fetch_path","(path, mtime = nil, head = false)",""],["fetch_path","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-fetch_path","(uri, mtime = nil, head = false)","<p>Downloads <code>uri</code> and returns it as a String.\n"],["fetch_s3","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-fetch_s3","(uri, mtime = nil, head = false)",""],["fetch_size","Gem::FakeFetcher","Gem/FakeFetcher.html#method-i-fetch_size","(path)",""],["fetch_size","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-fetch_size","(uri)","<p>Returns the size of <code>uri</code> in bytes.\n"],["fetch_spec","Gem::Source","Gem/Source.html#method-i-fetch_spec","(name_tuple)","<p>Fetches a specification for the given <code>name_tuple</code>.\n"],["fetch_spec","Gem::Source::Lock","Gem/Source/Lock.html#method-i-fetch_spec","(name_tuple)","<p>Delegates to the wrapped source’s fetch_spec method.\n"],["fetcher","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-c-fetcher","()","<p>Cached RemoteFetcher instance.\n"],["fetcher","Gem::SpecFetcher","Gem/SpecFetcher.html#method-c-fetcher","()","<p>Default fetcher instance.  Use this instead of ::new to reduce object\nallocation.\n"],["fetcher=","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-c-fetcher-3D","(fetcher)",""],["file?","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-file-3F","()","<p>Is this tar entry a file?\n"],["file_name","Gem::Specification","Gem/Specification.html#method-i-file_name","()","<p>The default (generated) file name of the gem.  See also #spec_name.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">spec</span>.<span class=\"ruby-identifier\">file_name</span> <span class=\"ruby-comment\"># =&gt; &quot;example-1.0.gem&quot;</span>\n</pre>\n"],["files","Gem::Specification","Gem/Specification.html#method-i-files","()","<p>Files included in this gem.  You cannot append to this accessor, you must\nassign to it.\n<p>Only add files …\n"],["files=","Gem::Specification","Gem/Specification.html#method-i-files-3D","(files)","<p>Sets files to <code>files</code>, ensuring it is an array.\n"],["files_in","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-i-files_in","(spec)",""],["files_in_default_gem","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-i-files_in_default_gem","(spec)",""],["files_in_gem","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-i-files_in_gem","(spec)",""],["find","Gem::List","Gem/List.html#method-i-find","()",""],["find_all","Gem::AvailableSet","Gem/AvailableSet.html#method-i-find_all","(req)","<p>Used by the Resolver, the protocol to use a AvailableSet as a search Set.\n"],["find_all","Gem::Resolver::APISet","Gem/Resolver/APISet.html#method-i-find_all","(req)","<p>Return an array of APISpecification objects matching DependencyRequest\n<code>req</code>.\n"],["find_all","Gem::Resolver::ComposedSet","Gem/Resolver/ComposedSet.html#method-i-find_all","(req)","<p>Finds all specs matching <code>req</code> in all sets.\n"],["find_all","Gem::Resolver::CurrentSet","Gem/Resolver/CurrentSet.html#method-i-find_all","(req)",""],["find_all","Gem::Resolver::GitSet","Gem/Resolver/GitSet.html#method-i-find_all","(req)","<p>Finds all git gems matching <code>req</code>\n"],["find_all","Gem::Resolver::IndexSet","Gem/Resolver/IndexSet.html#method-i-find_all","(req)","<p>Return an array of IndexSpecification objects matching DependencyRequest\n<code>req</code>.\n"],["find_all","Gem::Resolver::InstallerSet","Gem/Resolver/InstallerSet.html#method-i-find_all","(req)","<p>Returns an array of IndexSpecification objects matching DependencyRequest\n<code>req</code>.\n"],["find_all","Gem::Resolver::LockSet","Gem/Resolver/LockSet.html#method-i-find_all","(req)","<p>Returns an Array of IndexSpecification objects matching the\nDependencyRequest <code>req</code>.\n"],["find_all","Gem::Resolver::Set","Gem/Resolver/Set.html#method-i-find_all","(req)","<p>The find_all method must be implemented.  It returns all Resolver\nSpecification objects matching the …\n"],["find_all","Gem::Resolver::VendorSet","Gem/Resolver/VendorSet.html#method-i-find_all","(req)","<p>Returns an Array of VendorSpecification objects matching the\nDependencyRequest <code>req</code>.\n"],["find_all","Gem::TestCase::StaticSet","Gem/TestCase/StaticSet.html#method-i-find_all","(dep)","<p>Finds all gems matching <code>dep</code> in this set.\n"],["find_all_by_name","Gem::Specification","Gem/Specification.html#method-c-find_all_by_name","(name, *requirements)","<p>Returns every spec that matches <code>name</code> and optional\n<code>requirements</code>.\n"],["find_by_name","Gem::Specification","Gem/Specification.html#method-c-find_by_name","(name, *requirements)","<p>Find the best specification matching a <code>name</code> and\n<code>requirements</code>. Raises if the dependency doesn’t resolve …\n"],["find_by_path","Gem::Specification","Gem/Specification.html#method-c-find_by_path","(path)","<p>Return the best specification that contains the file matching\n<code>path</code>.\n"],["find_command","Gem::CommandManager","Gem/CommandManager.html#method-i-find_command","(cmd_name)",""],["find_command_possibilities","Gem::CommandManager","Gem/CommandManager.html#method-i-find_command_possibilities","(cmd_name)",""],["find_data","Gem::FakeFetcher","Gem/FakeFetcher.html#method-i-find_data","(path)",""],["find_files","Gem","Gem.html#method-c-find_files","(glob, check_load_path=true)","<p>Returns a list of paths matching <code>glob</code> that can be used by a\ngem to pick up features from other gems. …\n"],["find_in_cache","Gem::Commands::UnpackCommand","Gem/Commands/UnpackCommand.html#method-i-find_in_cache","(filename)","<p>Find cached filename in Gem.path. Returns nil if the file cannot be found.\n"],["find_in_unresolved","Gem::Specification","Gem/Specification.html#method-c-find_in_unresolved","(path)","<p>Return currently unresolved specs that contain the file matching\n<code>path</code>.\n"],["find_in_unresolved_tree","Gem::Specification","Gem/Specification.html#method-c-find_in_unresolved_tree","(path)","<p>Search through all unresolved deps and sub-dependencies and return specs\nthat contain the file matching …\n"],["find_inactive_by_path","Gem::Specification","Gem/Specification.html#method-c-find_inactive_by_path","(path)","<p>Return the best specification that contains the file matching\n<code>path</code> amongst the specs that are not activated. …\n"],["find_latest_files","Gem","Gem.html#method-c-find_latest_files","(glob, check_load_path=true)","<p>Returns a list of paths matching <code>glob</code> from the latest gems\nthat can be used by a gem to pick up features …\n"],["find_name","Gem::DependencyList","Gem/DependencyList.html#method-i-find_name","(full_name)",""],["find_paths","Gem::Commands::WhichCommand","Gem/Commands/WhichCommand.html#method-i-find_paths","(package_name, dirs)",""],["find_spec","Gem::TestCase::StaticSet","Gem/TestCase/StaticSet.html#method-i-find_spec","(dep)","<p>Finds <code>dep</code> in this set.\n"],["find_spec_by_name_and_version","Gem::DependencyInstaller","Gem/DependencyInstaller.html#method-i-find_spec_by_name_and_version","(gem_name, version = Gem::Requirement.default, prerelease = false)","<p>Finds a spec and the source_uri it came from for gem <code>gem_name</code>\nand <code>version</code>.  Returns an Array of specs …\n"],["find_unresolved_default_spec","Gem","Gem.html#method-c-find_unresolved_default_spec","(path)","<p>Find a Gem::Specification of default gem from <code>path</code>\n"],["finish_resolve","Gem","Gem.html#method-c-finish_resolve","(request_set=Gem::RequestSet.new)",""],["first","Gem::SourceList","Gem/SourceList.html#method-i-first","()","<p>Returns the first source in the list.\n"],["flush","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-flush","()","<p>Flushes the TarWriter’s IO\n"],["for_cache","Gem::Specification","Gem/Specification.html#method-i-for_cache","()","<p>Creates a duplicate spec without large blobs that aren’t used at runtime.\n"],["for_current_gems","Gem::Resolver","Gem/Resolver.html#method-c-for_current_gems","(needed)","<p>Creates a Resolver that queries only against the already installed gems for\nthe <code>needed</code> dependencies. …\n"],["for_spec?","Gem::Resolver::Conflict","Gem/Resolver/Conflict.html#method-i-for_spec-3F","(spec)","<p>Returns true if the conflicting dependency’s name matches\n<code>spec</code>.\n"],["format_text","Gem::Text","Gem/Text.html#method-i-format_text","(text, wrap, indent=0)","<p>Wraps <code>text</code> to <code>wrap</code> characters and optionally\nindents by <code>indent</code> characters\n"],["formatted_program_filename","Gem::Installer","Gem/Installer.html#method-i-formatted_program_filename","(filename)","<p>Prefix and suffix the program filename the same as ruby.\n"],["from","Gem::Package::TarHeader","Gem/Package/TarHeader.html#method-c-from","(stream)","<p>Creates a tar header from IO <code>stream</code>\n"],["from","Gem::SourceList","Gem/SourceList.html#method-c-from","(ary)","<p>Creates a new SourceList from an array of sources.\n"],["from_list","Gem::NameTuple","Gem/NameTuple.html#method-c-from_list","(list)","<p>Turn an array of [name, version, platform] into an array of NameTuple\nobjects.\n"],["from_specs","Gem::DependencyList","Gem/DependencyList.html#method-c-from_specs","()","<p>Creates a DependencyList from the current specs.\n"],["from_yaml","Gem::Specification","Gem/Specification.html#method-c-from_yaml","(input)","<p>Special loader for YAML files.  When a Specification object is loaded from\na YAML file, it bypasses the …\n"],["full_gem_path","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-full_gem_path","()","<p>The full path to the gem (install path + full name).\n"],["full_name","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-full_name","()","<p>Returns the full name (name-version) of this Gem.  Platform information is\nincluded (name-version-platform) …\n"],["full_name","Gem::NameTuple","Gem/NameTuple.html#method-i-full_name","()","<p>Returns the full name (name-version) of this Gem.  Platform information is\nincluded if it is not the …\n"],["full_name","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-full_name","()","<p>Full name of the tar entry\n"],["full_name","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-full_name","()","<p>The full name of the specification to be activated.\n"],["full_name","Gem::Resolver::SpecSpecification","Gem/Resolver/SpecSpecification.html#method-i-full_name","()","<p>The name and version of the specification.\n<p>Unlike Gem::Specification#full_name, the platform is not included. …\n"],["full_name","Gem::Resolver::Specification","Gem/Resolver/Specification.html#method-i-full_name","()","<p>The name and version of the specification.\n<p>Unlike Gem::Specification#full_name, the platform is not included. …\n"],["full_name","Gem::Specification","Gem/Specification.html#method-i-full_name","()",""],["full_require_paths","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-full_require_paths","()","<p>Full paths in the gem to add to <code>$LOAD_PATH</code> when this gem is\nactivated.\n"],["full_spec","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-full_spec","()","<p>The Gem::Specification for this activation request.\n"],["gem","Gem::RequestSet","Gem/RequestSet.html#method-i-gem","(name, *reqs)","<p>Declare that a gem of name <code>name</code> with <code>reqs</code>\nrequirements is needed.\n"],["gem","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-gem","(name, *requirements)","<p>Specifies a gem dependency with the given <code>name</code> and\n<code>requirements</code>.  You may also supply <code>options</code>\nfollowing …\n"],["gem","Gem::TestCase::SpecFetcherSetup","Gem/TestCase/SpecFetcherSetup.html#method-i-gem","(name, version, dependencies = nil, &block)","<p>Creates a gem with <code>name</code>, <code>version</code> and\n<code>deps</code>.  The created gem can be downloaded and installed.\n<p>The specification …\n"],["gem","Kernel","Kernel.html#method-i-gem","(gem_name, *requirements)","<p>Use Kernel#gem to activate a specific version of <code>gem_name</code>.\n<p><code>requirements</code> is a list of version requirements ...\n"],["gem_contents","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-i-gem_contents","(name)",""],["gem_dir","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-gem_dir","()","<p>Returns the full path to this spec’s gem directory. eg:\n/usr/local/lib/ruby/1.8/gems/mygem-1.0\n"],["gem_dir","Gem::Installer","Gem/Installer.html#method-i-gem_dir","()","<p>Lazy accessor for the spec’s gem directory.\n"],["gem_file_list","Gem::Indexer","Gem/Indexer.html#method-i-gem_file_list","()","<p>List of gem file names to index.\n"],["gem_install_dir","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-i-gem_install_dir","(name)",""],["gem_original_require","Kernel","Kernel.html#method-i-gem_original_require","(path)","<p>The Kernel#require from before RubyGems was loaded.\n"],["gem_repository?","Gem::Doctor","Gem/Doctor.html#method-i-gem_repository-3F","()","<p>Are we doctoring a gem repository?\n"],["gems_dir","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-gems_dir","()","<p>Returns the full path to the gems directory containing this spec’s gem\ndirectory. eg: /usr/local/lib/ruby/1.8/gems …\n"],["gemspec","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-gemspec","(options = {})","<p>Loads dependencies from a gemspec file.\n<p><code>options</code> include:\n<p>name:  &mdash; The name portion of the gemspec file.  …\n"],["generate_bin_script","Gem::Installer","Gem/Installer.html#method-i-generate_bin_script","(filename, bindir)","<p>Creates the scripts to run the applications in the gem.\n"],["generate_bin_symlink","Gem::Installer","Gem/Installer.html#method-i-generate_bin_symlink","(filename, bindir)","<p>Creates the symlinks to run the applications in the gem.  Moves the symlink\nif the gem being installed …\n"],["generate_default_dirs","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-generate_default_dirs","(install_destdir)",""],["generate_index","Gem::Indexer","Gem/Indexer.html#method-i-generate_index","()","<p>Builds and installs indicies.\n"],["generate_windows_script","Gem::Installer","Gem/Installer.html#method-i-generate_windows_script","(filename, bindir)","<p>Creates windows .bat files for easy running of commands\n"],["get_all_gem_names","Gem::Command","Gem/Command.html#method-i-get_all_gem_names","()","<p>Get all gem names from the command line.\n"],["get_all_gem_names_and_versions","Gem::Command","Gem/Command.html#method-i-get_all_gem_names_and_versions","()","<p>Get all [gem, version] from the command line.\n<p>An argument in the form gem:ver is pull apart into the gen …\n"],["get_candidate_gems","Gem::Commands::CleanupCommand","Gem/Commands/CleanupCommand.html#method-i-get_candidate_gems","()",""],["get_cert_files","Gem::Request","Gem/Request.html#method-c-get_cert_files","()",""],["get_env_editor","Gem::Commands::OpenCommand","Gem/Commands/OpenCommand.html#method-i-get_env_editor","()",""],["get_gems_to_cleanup","Gem::Commands::CleanupCommand","Gem/Commands/CleanupCommand.html#method-i-get_gems_to_cleanup","()",""],["get_metadata","Gem::Commands::UnpackCommand","Gem/Commands/UnpackCommand.html#method-i-get_metadata","(path)","<p>Extracts the Gem::Specification and raw metadata from the .gem file at\n<code>path</code>.\n"],["get_one_gem_name","Gem::Command","Gem/Command.html#method-i-get_one_gem_name","()","<p>Get a single gem name from the command line.  Fail if there is no gem name\nor if there is more than one …\n"],["get_one_optional_argument","Gem::Command","Gem/Command.html#method-i-get_one_optional_argument","()","<p>Get a single optional argument from the command line.  If more than one\nargument is given, return only …\n"],["get_path","Gem::Commands::UnpackCommand","Gem/Commands/UnpackCommand.html#method-i-get_path","(dependency)","<p>Return the full path to the cached gem file matching the given name and\nversion requirement.  Returns …\n"],["get_primary_gems","Gem::Commands::CleanupCommand","Gem/Commands/CleanupCommand.html#method-i-get_primary_gems","()",""],["get_proxy_from_env","Gem::Request","Gem/Request.html#method-c-get_proxy_from_env","(scheme = 'http')","<p>Returns a proxy URI for the given <code>scheme</code> if one is set in the\nenvironment variables.\n"],["getc","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-getc","()","<p>Read one byte from the tar entry\n"],["git","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-git","(repository)","<p>Block form for specifying gems from a git <code>repository</code>.\n\n<pre>git 'https://github.com/rails/rails.git' do\n  gem ...</pre>\n"],["git_gem","Gem::TestCase","Gem/TestCase.html#method-i-git_gem","(name = 'a', version = 1)","<p>A git_gem is used with a gem dependencies file.  The gem created here has\nno files, just a gem specification …\n"],["git_source","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-git_source","(name, &callback)","<p>Defines a custom git source that uses <code>name</code> to expand git\nrepositories for use in gems built from git …\n"],["group","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-group","(*groups)","<p>Block form for placing a dependency in the given <code>groups</code>.\n\n<pre>group :development do\n  gem 'debugger'\nend\n\ngroup ...</pre>\n"],["gunzip","Gem","Gem.html#method-c-gunzip","(data)","<p>Zlib::GzipReader wrapper that unzips <code>data</code>.\n"],["gunzip","Gem::Util","Gem/Util.html#method-c-gunzip","(data)","<p>Zlib::GzipReader wrapper that unzips <code>data</code>.\n"],["gzip","Gem","Gem.html#method-c-gzip","(data)","<p>Zlib::GzipWriter wrapper that zips <code>data</code>.\n"],["gzip","Gem::Indexer","Gem/Indexer.html#method-i-gzip","(filename)","<p>Zlib::GzipWriter wrapper that gzips <code>filename</code> on disk.\n"],["gzip","Gem::Util","Gem/Util.html#method-c-gzip","(data)","<p>Zlib::GzipWriter wrapper that zips <code>data</code>.\n"],["gzip_to","Gem::Package","Gem/Package.html#method-i-gzip_to","(io)","<p>Gzips content written to <code>gz_io</code> to <code>io</code>.\n"],["handle_arguments","Gem::ConfigFile","Gem/ConfigFile.html#method-i-handle_arguments","(arg_list)","<p>Handle the command arguments.\n"],["handle_options","Gem::Command","Gem/Command.html#method-i-handle_options","(args)","<p>Handle the given list of arguments by parsing them and recording the\nresults.\n"],["handles?","Gem::Command","Gem/Command.html#method-i-handles-3F","(args)","<p>True if the command handles the given argument list.\n"],["hash","Gem::NameTuple","Gem/NameTuple.html#method-i-hash","()",""],["have_git?","Gem::TestCase","Gem/TestCase.html#method-i-have_git-3F","()","<p>Skips this test unless you have a git executable\n"],["have_rdoc_4_plus?","Gem::Server","Gem/Server.html#method-i-have_rdoc_4_plus-3F","()",""],["header","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-header","(type, fname, dname, length, mode, mtime, checksum = nil)",""],["host","Gem","Gem.html#method-c-host","()","<p>Get the default RubyGems API host. This is normally\n<code>https://rubygems.org</code>.\n"],["host","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-host","()","<p>The host to connect to either from the RUBYGEMS_HOST environment variable\nor from the user’s configuration …\n"],["host=","Gem","Gem.html#method-c-host-3D","(host)","<p>Set the default RubyGems API host.\n"],["https?","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-https-3F","(uri)",""],["implicit?","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-i-implicit-3F","()","<p>Indicate that the request is for a gem requested as a dependency of another\ngem\n"],["import","Gem::RequestSet","Gem/RequestSet.html#method-i-import","(deps)","<p>Add <code>deps</code> Gem::Dependency objects to the set.\n"],["include?","Gem::SourceList","Gem/SourceList.html#method-i-include-3F","(other)","<p>Returns true if this source list includes <code>other</code> which may be a\nGem::Source or a source URI.\n"],["inflate","Gem","Gem.html#method-c-inflate","(data)","<p>A Zlib::Inflate#inflate wrapper\n"],["inflate","Gem::Util","Gem/Util.html#method-c-inflate","(data)","<p>A Zlib::Inflate#inflate wrapper\n"],["init","Gem::PackageTask","Gem/PackageTask.html#method-i-init","(gem)","<p>Initialization tasks without the “yield self” or define operations.\n"],["initialize","Gem::Package","Gem/Package.html#method-i-initialize","(gem)","<p>Creates a new package that will read or write to the file <code>gem</code>.\n"],["initialize_copy","Gem::Specification","Gem/Specification.html#method-i-initialize_copy","(other_spec)","<p>Duplicates array_attributes from <code>other_spec</code> so state isn’t\nshared.\n"],["inject_into_list","Gem::AvailableSet","Gem/AvailableSet.html#method-i-inject_into_list","(dep_list)",""],["input","Gem::MockGemUi","Gem/MockGemUi.html#method-i-input","()",""],["inspect","Gem::Platform","Gem/Platform.html#method-i-inspect","()",""],["install","Gem","Gem.html#method-c-install","(name, version = Gem::Requirement.default, *options)","<p>Top level install helper method. Allows you to install gems interactively:\n\n<pre>% irb\n&gt;&gt; Gem.install &quot;minitest&quot; ...</pre>\n"],["install","Gem::DependencyInstaller","Gem/DependencyInstaller.html#method-i-install","(dep_or_name, version = Gem::Requirement.default)","<p>Installs the gem <code>dep_or_name</code> and all its dependencies. \nReturns an Array of installed gem specifications. …\n"],["install","Gem::Installer","Gem/Installer.html#method-i-install","()","<p>Installs the gem and returns a loaded Gem::Specification for the installed\ngem.\n<p>The gem will be installed …\n"],["install","Gem::RequestSet","Gem/RequestSet.html#method-i-install","(options, &block)","<p>Installs gems for this RequestSet using the Gem::Installer\n<code>options</code>.\n<p>If a <code>block</code> is given an activation …\n"],["install","Gem::Resolver::GitSpecification","Gem/Resolver/GitSpecification.html#method-i-install","(options = {})","<p>Installing a git gem only involves building the extensions and generating\nthe executables.\n"],["install","Gem::Resolver::InstalledSpecification","Gem/Resolver/InstalledSpecification.html#method-i-install","(options = {})","<p>This is a null install as this specification is already installed.\n<code>options</code> are ignored.\n"],["install","Gem::Resolver::LockSpecification","Gem/Resolver/LockSpecification.html#method-i-install","(options = {})","<p>This is a null install as a locked specification is considered installed.\n<code>options</code> are ignored.\n"],["install","Gem::Resolver::Specification","Gem/Resolver/Specification.html#method-i-install","(options = {})","<p>Installs this specification using the Gem::Installer <code>options</code>. \nThe install method yields a Gem::Installer …\n"],["install","Gem::Resolver::VendorSpecification","Gem/Resolver/VendorSpecification.html#method-i-install","(options = {})","<p>This is a null install as this gem was unpacked into a directory.\n<code>options</code> are ignored.\n"],["install_default_gems","Gem::TestCase","Gem/TestCase.html#method-i-install_default_gems","(*specs)","<p>Installs the provided default specs including writing the spec file\n"],["install_default_specs","Gem::TestCase","Gem/TestCase.html#method-i-install_default_specs","(*specs)","<p>Install the provided default specs\n"],["install_executables","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-install_executables","(bin_dir)",""],["install_file","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-install_file","(file, dest_dir)",""],["install_from_gemdeps","Gem::RequestSet","Gem/RequestSet.html#method-i-install_from_gemdeps","(options, &block)","<p>Installs from the gem dependencies files in the <code>:gemdeps</code>\noption in <code>options</code>, yielding to the <code>block</code> as …\n"],["install_gem","Gem::TestCase","Gem/TestCase.html#method-i-install_gem","(spec, options = {})","<p>Builds and installs the Gem::Specification <code>spec</code>\n"],["install_gem_user","Gem::TestCase","Gem/TestCase.html#method-i-install_gem_user","(spec)","<p>Builds and installs the Gem::Specification <code>spec</code> into the user\ndir\n"],["install_indicies","Gem::Indexer","Gem/Indexer.html#method-i-install_indicies","()","<p>Install generated indicies into the destination directory.\n"],["install_into","Gem::RequestSet","Gem/RequestSet.html#method-i-install_into","(dir, force = true, options = {})",""],["install_lib","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-install_lib","(lib_dir)",""],["install_rdoc","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-install_rdoc","()",""],["install_specs","Gem::TestCase","Gem/TestCase.html#method-i-install_specs","(*specs)","<p>Install the provided specs\n"],["install_update_defaults_str","Gem::InstallUpdateOptions","Gem/InstallUpdateOptions.html#method-i-install_update_defaults_str","()","<p>Default options for the gem install command.\n"],["installable?","Gem::Platform","Gem/Platform.html#method-c-installable-3F","(spec)",""],["installable_platform?","Gem::Resolver::InstalledSpecification","Gem/Resolver/InstalledSpecification.html#method-i-installable_platform-3F","()","<p>Returns <code>true</code> if this gem is installable for the current\nplatform.\n"],["installable_platform?","Gem::Resolver::LocalSpecification","Gem/Resolver/LocalSpecification.html#method-i-installable_platform-3F","()","<p>Returns <code>true</code> if this gem is installable for the current\nplatform.\n"],["installable_platform?","Gem::Resolver::Specification","Gem/Resolver/Specification.html#method-i-installable_platform-3F","()","<p>Returns true if this specification is installable on this platform.\n"],["installation_satisfies_dependency?","Gem::Installer","Gem/Installer.html#method-i-installation_satisfies_dependency-3F","(dependency)","<p>True if the gems in the system satisfy <code>dependency</code>.\n"],["installed?","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-installed-3F","()","<p>True if the requested gem has already been installed.\n"],["installed_specs","Gem::Installer","Gem/Installer.html#method-i-installed_specs","()","<p>Return an Array of Specifications contained within the gem_home we’ll be\ninstalling into.\n"],["instance","Gem::CommandManager","Gem/CommandManager.html#method-c-instance","()","<p>Return the authoritative instance of the command manager.\n"],["instance","Gem::CommandManager","Gem/CommandManager.html#method-i-instance","()","<p>Returns self. Allows a CommandManager instance to stand in for the class\nitself.\n"],["invoke","Gem::Command","Gem/Command.html#method-i-invoke","(*args)","<p>Invoke the command with the given list of arguments.\n"],["invoke_with_build_args","Gem::Command","Gem/Command.html#method-i-invoke_with_build_args","(args, build_args)","<p>Invoke the command with the given list of normal arguments and additional\nbuild arguments.\n"],["issuer_of","Gem::Security::TrustDir","Gem/Security/TrustDir.html#method-i-issuer_of","(certificate)","<p>Returns the issuer certificate of the given <code>certificate</code> if it\nexists in the trust directory.\n"],["iteration!","Gem::Resolver::Stats","Gem/Resolver/Stats.html#method-i-iteration-21","()",""],["key_path","Gem::TestCase","Gem/TestCase.html#method-c-key_path","(key_name)","<p>Returns the path to the key named <code>key_name</code> from\n<code>test/rubygems</code>\n"],["latest_rubygems_version","Gem","Gem.html#method-c-latest_rubygems_version","()","<p>Returns the latest release version of RubyGems.\n"],["latest_spec_for","Gem","Gem.html#method-c-latest_spec_for","(name)","<p>Returns the latest release-version specification for the gem\n<code>name</code>.\n"],["latest_specs","Gem::Server","Gem/Server.html#method-i-latest_specs","(req, res)",""],["latest_specs","Gem::Specification","Gem/Specification.html#method-c-latest_specs","(prerelease = false)","<p>Return the latest specs, optionally including prerelease specs if\n<code>prerelease</code> is true.\n"],["latest_version?","Gem::Dependency","Gem/Dependency.html#method-i-latest_version-3F","()","<p>Is this dependency simply asking for the latest version of a gem?\n"],["latest_version_for","Gem","Gem.html#method-c-latest_version_for","(name)","<p>Returns the version of the latest release-version of gem <code>name</code>\n"],["launch","Gem::Server","Gem/Server.html#method-i-launch","()",""],["legacy_platform","Gem::TestCase::SpecFetcherSetup","Gem/TestCase/SpecFetcherSetup.html#method-i-legacy_platform","()","<p>Creates a legacy platform spec with the name ‘pl’ and version 1\n"],["levenshtein_distance","Gem::Text","Gem/Text.html#method-i-levenshtein_distance","(str1, str2)","<p>This code is based directly on the Text gem implementation Returns a value\nrepresenting the “cost” …\n"],["lib_dirs_glob","Gem::Specification","Gem/Specification.html#method-i-lib_dirs_glob","()","<p>Returns a string usable in Dir.glob to match all requirable paths for this\nspec.\n"],["lib_files","Gem::Specification","Gem/Specification.html#method-i-lib_files","()","<p>Files in the Gem under one of the require_paths\n"],["license","Gem::Specification","Gem/Specification.html#method-i-license","()","<p>Singular accessor for #licenses\n"],["license=","Gem::Specification","Gem/Specification.html#method-i-license-3D","(o)","<p>The license for this gem.\n<p>The license must be no more than 64 characters.\n<p>This should just be the name …\n"],["licenses","Gem::Specification","Gem/Specification.html#method-i-licenses","()","<p>Plural accessor for setting licenses\n<p>See #license= for details\n"],["licenses=","Gem::Specification","Gem/Specification.html#method-i-licenses-3D","(licenses)","<p>The license(s) for the library.\n<p>Each license must be a short name, no more than 64 characters.\n<p>This should …\n"],["listen","Gem::Server","Gem/Server.html#method-i-listen","(addresses = @addresses)","<p>Creates server sockets based on the addresses option.  If no addresses were\ngiven a server socket for …\n"],["load","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-load","()","<p>Loads the gem dependency file and returns self.\n"],["load","Gem::Specification","Gem/Specification.html#method-c-load","(file)","<p>Loads Ruby format gemspec from <code>file</code>.\n"],["load_api_keys","Gem::ConfigFile","Gem/ConfigFile.html#method-i-load_api_keys","()",""],["load_cert","Gem::TestCase","Gem/TestCase.html#method-c-load_cert","(cert_name)","<p>Loads certificate named <code>cert_name</code> from\n<code>test/rubygems/</code>.\n"],["load_certificate","Gem::Security::TrustDir","Gem/Security/TrustDir.html#method-i-load_certificate","(certificate_file)","<p>Loads the given <code>certificate_file</code>\n"],["load_default_cert","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-i-load_default_cert","()",""],["load_default_key","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-i-load_default_key","()",""],["load_defaults","Gem::Specification","Gem/Specification.html#method-c-load_defaults","()","<p>Loads the default specifications. It should be called only once.\n"],["load_env_plugins","Gem","Gem.html#method-c-load_env_plugins","()","<p>Find all ‘rubygems_plugin’ files in $LOAD_PATH and load them\n"],["load_file","Gem::ConfigFile","Gem/ConfigFile.html#method-i-load_file","(filename)",""],["load_gemdeps","Gem::RequestSet","Gem/RequestSet.html#method-i-load_gemdeps","(path, without_groups = [], installing = false)","<p>Load a dependency management file.\n"],["load_key","Gem::TestCase","Gem/TestCase.html#method-c-load_key","(key_name, passphrase = nil)","<p>Loads an RSA private key named <code>key_name</code> with\n<code>passphrase</code> in <code>test/rubygems/</code>\n"],["load_path_insert_index","Gem","Gem.html#method-c-load_path_insert_index","()","<p>The index to insert activated gem paths into the $LOAD_PATH. The activated\ngem’s paths are inserted before …\n"],["load_plugins","Gem","Gem.html#method-c-load_plugins","()","<p>Find the ‘rubygems_plugin’ files in the latest installed gems and load them\n"],["load_spec","Gem::TestCase::StaticSet","Gem/TestCase/StaticSet.html#method-i-load_spec","(name, ver, platform, source)","<p>Loads a Gem::Specification from this set which has the given\n<code>name</code>, version <code>ver</code>, <code>platform</code>.  The\n<code>source</code> …\n"],["load_specs","Gem::Source","Gem/Source.html#method-i-load_specs","(type)","<p>Loads <code>type</code> kind of specs fetching from +@uri+ if the on-disk\ncache is out of date.\n<p><code>type</code> is one of the ...\n"],["load_yaml","Gem","Gem.html#method-c-load_yaml","()","<p>Loads YAML, preferring Psych\n"],["loaded_from=","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-loaded_from-3D","(path)","<p>Set the path the Specification was loaded from. <code>path</code> is\nconverted to a String.\n"],["loaded_spec_names","Gem::TestCase","Gem/TestCase.html#method-i-loaded_spec_names","()",""],["local","Gem::Platform","Gem/Platform.html#method-c-local","()",""],["local?","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-local-3F","()","<p>Is local fetching enabled?\n"],["location_of_caller","Gem","Gem.html#method-c-location_of_caller","()","<p>The file name and line number of the caller of the caller of this method.\n"],["make","Gem::Ext::Builder","Gem/Ext/Builder.html#method-c-make","(dest_path, results)",""],["make_command","Gem::TestCase","Gem/TestCase.html#method-c-make_command","()","<p>Returns the make command for the current platform. For versions of Ruby\nbuilt on MS Windows with VC++ …\n"],["make_command","Gem::TestCase","Gem/TestCase.html#method-i-make_command","()","<p>Returns the make command for the current platform. For versions of Ruby\nbuilt on MS Windows with VC++ …\n"],["make_destination_dirs","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-make_destination_dirs","(install_destdir)",""],["make_temp_directories","Gem::Indexer","Gem/Indexer.html#method-i-make_temp_directories","()","<p>Make directories for index generation\n"],["manage_owners","Gem::Commands::OwnerCommand","Gem/Commands/OwnerCommand.html#method-i-manage_owners","(method, name, owners)",""],["map_gems_to_specs","Gem::Indexer","Gem/Indexer.html#method-i-map_gems_to_specs","(gems)",""],["mark_version","Gem::Specification","Gem/Specification.html#method-i-mark_version","()","<p>Sets the rubygems_version to the current RubyGems version.\n"],["marshal_dump","Gem::Version","Gem/Version.html#method-i-marshal_dump","()","<p>Dump only the raw version string, not the complete object. It’s a string\nfor backwards (RubyGems 1.3.5 …\n"],["marshal_load","Gem::Version","Gem/Version.html#method-i-marshal_load","(array)","<p>Load custom marshal format. It’s a string for backwards (RubyGems 1.3.5 and\nearlier) compatibility.\n"],["marshal_version","Gem","Gem.html#method-c-marshal_version","()","<p>The version of the Marshal format for your Ruby.\n"],["match","Gem::Platform","Gem/Platform.html#method-c-match","(platform)",""],["match?","Gem::Dependency","Gem/Dependency.html#method-i-match-3F","(obj, version=nil, allow_prerelease=false)","<p>Does this dependency match the specification described by <code>name</code>\nand <code>version</code> or match <code>spec</code>?\n<p>NOTE:  Unlike …\n"],["match?","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-i-match-3F","(spec, allow_prerelease = false)","<p>Does this dependency request match <code>spec</code>?\n<p>NOTE:  #match? only matches prerelease versions when #dependency …\n"],["match_platform!","Gem::AvailableSet","Gem/AvailableSet.html#method-i-match_platform-21","()",""],["match_platform?","Gem::NameTuple","Gem/NameTuple.html#method-i-match_platform-3F","()","<p>Indicate if this NameTuple matches the current platform.\n"],["matches_for_glob","Gem::Specification","Gem/Specification.html#method-i-matches_for_glob","(glob)","<p>Return all files in this gem that match for <code>glob</code>.\n"],["matches_spec?","Gem::Dependency","Gem/Dependency.html#method-i-matches_spec-3F","(spec)","<p>Does this dependency match <code>spec</code>?\n<p>NOTE:  This is not a convenience method.  Unlike #match? this method …\n"],["matches_spec?","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-i-matches_spec-3F","(spec)","<p>Does this dependency request match <code>spec</code>?\n<p>NOTE:  #matches_spec? matches prerelease versions.  See also …\n"],["matching_specs","Gem::Dependency","Gem/Dependency.html#method-i-matching_specs","(platform_only = false)",""],["merge","Gem::Dependency","Gem/Dependency.html#method-i-merge","(other)","<p>Merges the requirements of <code>other</code> into this dependency\n"],["merge_options","Gem::Command","Gem/Command.html#method-i-merge_options","(new_options)","<p>Merge a set of command options with the set of default options (without\nmodifying the default option …\n"],["missing_extensions?","Gem::Specification","Gem/Specification.html#method-i-missing_extensions-3F","()","<p>Is this specification missing its extensions?  When this returns true you\nprobably want to build_extensions …\n"],["mkdir","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-i-mkdir","(name, mode)","<p>Creates a new directory in the tar file <code>name</code> with\n<code>mode</code>\n"],["mu_pp","Gem::TestCase","Gem/TestCase.html#method-i-mu_pp","(obj)","<p>Enables pretty-print for all tests\n"],["name","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-name","()","<p>Name of the gem\n"],["name","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-name","()","<p>The name of this activation request’s specification\n"],["name","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-i-name","()","<p>The name of the gem this dependency request is requesting.\n"],["name","Gem::Resolver::SpecSpecification","Gem/Resolver/SpecSpecification.html#method-i-name","()","<p>The name of the gem for this specification\n"],["name","Gem::UnsatisfiableDependencyError","Gem/UnsatisfiableDependencyError.html#method-i-name","()","<p>The name of the unresolved dependency\n"],["name_path","Gem::Security::TrustDir","Gem/Security/TrustDir.html#method-i-name_path","(name)","<p>Returns the path to the trusted certificate with the given ASN.1\n<code>name</code>\n"],["name_tuple","Gem::Specification","Gem/Specification.html#method-i-name_tuple","()","<p>Return a NameTuple that represents this Specification\n"],["needs","Gem","Gem.html#method-c-needs","()",""],["new","Gem::AvailableSet","Gem/AvailableSet.html#method-c-new","()",""],["new","Gem::Command","Gem/Command.html#method-c-new","(command, summary=nil, defaults={})","<p>Initializes a generic gem command named <code>command</code>. \n<code>summary</code> is a short description displayed in `gem help …\n"],["new","Gem::CommandManager","Gem/CommandManager.html#method-c-new","()","<p>Register all the subcommands supported by the gem command.\n"],["new","Gem::Commands::BuildCommand","Gem/Commands/BuildCommand.html#method-c-new","()",""],["new","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-c-new","()",""],["new","Gem::Commands::CheckCommand","Gem/Commands/CheckCommand.html#method-c-new","()",""],["new","Gem::Commands::CleanupCommand","Gem/Commands/CleanupCommand.html#method-c-new","()",""],["new","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-c-new","()",""],["new","Gem::Commands::DependencyCommand","Gem/Commands/DependencyCommand.html#method-c-new","()",""],["new","Gem::Commands::EnvironmentCommand","Gem/Commands/EnvironmentCommand.html#method-c-new","()",""],["new","Gem::Commands::FetchCommand","Gem/Commands/FetchCommand.html#method-c-new","()",""],["new","Gem::Commands::GenerateIndexCommand","Gem/Commands/GenerateIndexCommand.html#method-c-new","()",""],["new","Gem::Commands::HelpCommand","Gem/Commands/HelpCommand.html#method-c-new","()",""],["new","Gem::Commands::InstallCommand","Gem/Commands/InstallCommand.html#method-c-new","()",""],["new","Gem::Commands::ListCommand","Gem/Commands/ListCommand.html#method-c-new","()",""],["new","Gem::Commands::LockCommand","Gem/Commands/LockCommand.html#method-c-new","()",""],["new","Gem::Commands::MirrorCommand","Gem/Commands/MirrorCommand.html#method-c-new","()",""],["new","Gem::Commands::OpenCommand","Gem/Commands/OpenCommand.html#method-c-new","()",""],["new","Gem::Commands::OutdatedCommand","Gem/Commands/OutdatedCommand.html#method-c-new","()",""],["new","Gem::Commands::OwnerCommand","Gem/Commands/OwnerCommand.html#method-c-new","()",""],["new","Gem::Commands::PristineCommand","Gem/Commands/PristineCommand.html#method-c-new","()",""],["new","Gem::Commands::PushCommand","Gem/Commands/PushCommand.html#method-c-new","()",""],["new","Gem::Commands::QueryCommand","Gem/Commands/QueryCommand.html#method-c-new","(name = 'query', summary = 'Query gem information in local or remote repositories')",""],["new","Gem::Commands::RdocCommand","Gem/Commands/RdocCommand.html#method-c-new","()",""],["new","Gem::Commands::SearchCommand","Gem/Commands/SearchCommand.html#method-c-new","()",""],["new","Gem::Commands::ServerCommand","Gem/Commands/ServerCommand.html#method-c-new","()",""],["new","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-c-new","()",""],["new","Gem::Commands::SourcesCommand","Gem/Commands/SourcesCommand.html#method-c-new","()",""],["new","Gem::Commands::SpecificationCommand","Gem/Commands/SpecificationCommand.html#method-c-new","()",""],["new","Gem::Commands::StaleCommand","Gem/Commands/StaleCommand.html#method-c-new","()",""],["new","Gem::Commands::UninstallCommand","Gem/Commands/UninstallCommand.html#method-c-new","()",""],["new","Gem::Commands::UnpackCommand","Gem/Commands/UnpackCommand.html#method-c-new","()",""],["new","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-c-new","()",""],["new","Gem::Commands::WhichCommand","Gem/Commands/WhichCommand.html#method-c-new","()",""],["new","Gem::Commands::YankCommand","Gem/Commands/YankCommand.html#method-c-new","()",""],["new","Gem::ConfigFile","Gem/ConfigFile.html#method-c-new","(args)","<p>Create the config file object.  <code>args</code> is the list of arguments\nfrom the command line.\n<p>The following command …\n"],["new","Gem::ConflictError","Gem/ConflictError.html#method-c-new","(target, conflicts)",""],["new","Gem::ConsoleUI","Gem/ConsoleUI.html#method-c-new","()","<p>The Console UI has no arguments as it defaults to reading input from stdin,\noutput to stdout and warnings …\n"],["new","Gem::Dependency","Gem/Dependency.html#method-c-new","(name, *requirements)","<p>Constructs a dependency with <code>name</code> and\n<code>requirements</code>. The last argument can optionally be the\ndependency …\n"],["new","Gem::DependencyInstaller","Gem/DependencyInstaller.html#method-c-new","(options = {})","<p>Creates a new installer instance.\n<p>Options are:\n<p>:cache_dir &mdash; Alternate repository path to store .gem files …\n"],["new","Gem::DependencyList","Gem/DependencyList.html#method-c-new","(development = false)","<p>Creates a new DependencyList.  If <code>development</code> is true,\ndevelopment dependencies will be included.\n"],["new","Gem::DependencyResolutionError","Gem/DependencyResolutionError.html#method-c-new","(conflict)",""],["new","Gem::Doctor","Gem/Doctor.html#method-c-new","(gem_repository, dry_run = false)","<p>Creates a new Gem::Doctor that will clean up <code>gem_repository</code>. \nOnly one gem repository may be cleaned …\n"],["new","Gem::Ext::Builder","Gem/Ext/Builder.html#method-c-new","(spec, build_args = spec.build_args)","<p>Creates a new extension builder for <code>spec</code>.  If the\n<code>spec</code> does not yet have build arguments, saved, set …\n"],["new","Gem::FakeFetcher","Gem/FakeFetcher.html#method-c-new","()",""],["new","Gem::FilePermissionError","Gem/FilePermissionError.html#method-c-new","(directory)",""],["new","Gem::GemRunner","Gem/GemRunner.html#method-c-new","(options={})",""],["new","Gem::ImpossibleDependenciesError","Gem/ImpossibleDependenciesError.html#method-c-new","(request, conflicts)",""],["new","Gem::Indexer","Gem/Indexer.html#method-c-new","(directory, options = {})","<p>Create an indexer that will index the gems in <code>directory</code>.\n"],["new","Gem::Installer","Gem/Installer.html#method-c-new","(gem, options={})","<p>Constructs an Installer instance that will install the gem located at\n<code>gem</code>.  <code>options</code> is a Hash with the …\n"],["new","Gem::MockGemUi","Gem/MockGemUi.html#method-c-new","(input = \"\")",""],["new","Gem::MockGemUi::InputEOFError","Gem/MockGemUi/InputEOFError.html#method-c-new","(question)",""],["new","Gem::MockGemUi::TermError","Gem/MockGemUi/TermError.html#method-c-new","(exit_code)",""],["new","Gem::NameTuple","Gem/NameTuple.html#method-c-new","(name, version, platform=\"ruby\")",""],["new","Gem::Package","Gem/Package.html#method-c-new","(gem)","<p>Creates a new Gem::Package for the file at <code>gem</code>.\n<code>gem</code> can also be provided as an IO object.\n<p>If <code>gem</code> is an …\n"],["new","Gem::Package::DigestIO","Gem/Package/DigestIO.html#method-c-new","(io, digests)","<p>Creates a new DigestIO instance.  Using ::wrap is recommended, see the\n::wrap documentation for documentation …\n"],["new","Gem::Package::FormatError","Gem/Package/FormatError.html#method-c-new","(message, source = nil)",""],["new","Gem::Package::Old","Gem/Package/Old.html#method-c-new","(gem)","<p>Creates a new old-format package reader for <code>gem</code>.  Old-format\npackages cannot be written.\n"],["new","Gem::Package::PathError","Gem/Package/PathError.html#method-c-new","(destination, destination_dir)",""],["new","Gem::Package::TarHeader","Gem/Package/TarHeader.html#method-c-new","(vals)","<p>Creates a new TarHeader using <code>vals</code>\n"],["new","Gem::Package::TarReader","Gem/Package/TarReader.html#method-c-new","(io)","<p>Creates a new TarReader on <code>io</code> and yields it to the block, if\ngiven.\n"],["new","Gem::Package::TarReader","Gem/Package/TarReader.html#method-c-new","(io)","<p>Creates a new tar file reader on <code>io</code> which needs to respond to\n#pos, #eof?, #read, #getc and #pos=\n"],["new","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-c-new","(header, io)","<p>Creates a new tar entry for <code>header</code> that will be read from\n<code>io</code>\n"],["new","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-c-new","(io)","<p>Creates a new TarWriter, yielding it if a block is given\n"],["new","Gem::Package::TarWriter","Gem/Package/TarWriter.html#method-c-new","(io)","<p>Creates a new TarWriter that will write to <code>io</code>\n"],["new","Gem::Package::TarWriter::BoundedStream","Gem/Package/TarWriter/BoundedStream.html#method-c-new","(io, limit)","<p>Wraps <code>io</code> and allows up to <code>limit</code> bytes to be\nwritten\n"],["new","Gem::Package::TarWriter::RestrictedStream","Gem/Package/TarWriter/RestrictedStream.html#method-c-new","(io)","<p>Creates a new RestrictedStream wrapping <code>io</code>\n"],["new","Gem::PackageTask","Gem/PackageTask.html#method-c-new","(gem_spec)","<p>Create a Gem Package task library.  Automatically define the gem if a block\nis given.  If no block is …\n"],["new","Gem::PathSupport","Gem/PathSupport.html#method-c-new","(env=ENV)","<p>Constructor. Takes a single argument which is to be treated like a\nhashtable, or defaults to ENV, the …\n"],["new","Gem::Platform","Gem/Platform.html#method-c-new","(arch)",""],["new","Gem::PlatformMismatch","Gem/PlatformMismatch.html#method-c-new","(name, version)",""],["new","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-c-new","(proxy=nil, dns=Resolv::DNS.new)","<p>Initialize a remote fetcher using the source URI and possible proxy\ninformation.\n<p><code>proxy</code>\n<p>[String]: explicit …\n"],["new","Gem::RemoteFetcher::FetchError","Gem/RemoteFetcher/FetchError.html#method-c-new","(message, uri)",""],["new","Gem::Request","Gem/Request.html#method-c-new","(uri, request_class, last_modified, pool)",""],["new","Gem::RequestSet","Gem/RequestSet.html#method-c-new","(*deps)","<p>Creates a RequestSet for a list of Gem::Dependency objects,\n<code>deps</code>.  You can then #resolve and #install …\n"],["new","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-c-new","(set, path)","<p>Creates a new GemDependencyAPI that will add dependencies to the\nGem::RequestSet <code>set</code> based on the dependency …\n"],["new","Gem::RequestSet::Lockfile","Gem/RequestSet/Lockfile.html#method-c-new","(request_set, gem_deps_file, dependencies = nil)","<p>Creates a new Lockfile for the given <code>request_set</code> and\n<code>gem_deps_file</code> location.\n"],["new","Gem::RequestSet::Lockfile::ParseError","Gem/RequestSet/Lockfile/ParseError.html#method-c-new","(message, column, line, path)","<p>Raises a ParseError with the given <code>message</code> which was\nencountered at a <code>line</code> and <code>column</code> while parsing. …\n"],["new","Gem::Requirement","Gem/Requirement.html#method-c-new","(*requirements)","<p>Constructs a requirement from <code>requirements</code>. Requirements can\nbe Strings, Gem::Versions, or Arrays of …\n"],["new","Gem::Resolver","Gem/Resolver.html#method-c-new","(needed, set = nil)","<p>Create Resolver object which will resolve the tree starting with\n<code>needed</code> Dependency objects.\n<p><code>set</code> is an ...\n"],["new","Gem::Resolver::APISet","Gem/Resolver/APISet.html#method-c-new","(dep_uri = 'https://rubygems.org/api/v1/dependencies')","<p>Creates a new APISet that will retrieve gems from <code>uri</code> using\nthe RubyGems API URL <code>dep_uri</code> which is described …\n"],["new","Gem::Resolver::APISpecification","Gem/Resolver/APISpecification.html#method-c-new","(set, api_data)","<p>Creates an APISpecification for the given <code>set</code> from the\nrubygems.org <code>api_data</code>.\n<p>See guides.rubygems.org/rubygems-org-api/#misc_methods …\n"],["new","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-c-new","(spec, request, others_possible = true)","<p>Creates a new ActivationRequest that will activate <code>spec</code>.  The\nparent <code>request</code> is used to provide diagnostics …\n"],["new","Gem::Resolver::BestSet","Gem/Resolver/BestSet.html#method-c-new","(sources = Gem.sources)","<p>Creates a BestSet for the given <code>sources</code> or Gem::sources if\nnone are specified.  <code>sources</code> must be a Gem::SourceList …\n"],["new","Gem::Resolver::ComposedSet","Gem/Resolver/ComposedSet.html#method-c-new","(*sets)","<p>Creates a new ComposedSet containing <code>sets</code>.  Use\nGem::Resolver::compose_sets instead.\n"],["new","Gem::Resolver::Conflict","Gem/Resolver/Conflict.html#method-c-new","(dependency, activated, failed_dep=dependency)","<p>Creates a new resolver conflict when <code>dependency</code> is in conflict\nwith an already <code>activated</code> specification. …\n"],["new","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-c-new","(dependency, requester)","<p>Creates a new DependencyRequest for <code>dependency</code> from\n<code>requester</code>. +requester may be nil if the request came …\n"],["new","Gem::Resolver::IndexSpecification","Gem/Resolver/IndexSpecification.html#method-c-new","(set, name, version, source, platform)","<p>An IndexSpecification is created from the index format described in `gem\nhelp generate_index`.\n<p>The <code>set</code> …\n"],["new","Gem::Resolver::InstallerSet","Gem/Resolver/InstallerSet.html#method-c-new","(domain)","<p>Creates a new InstallerSet that will look for gems in <code>domain</code>.\n"],["new","Gem::Resolver::LockSet","Gem/Resolver/LockSet.html#method-c-new","(sources)","<p>Creates a new LockSet from the given <code>sources</code>\n"],["new","Gem::Resolver::LockSpecification","Gem/Resolver/LockSpecification.html#method-c-new","(set, name, version, source, platform)",""],["new","Gem::Resolver::RequirementList","Gem/Resolver/RequirementList.html#method-c-new","()","<p>Creates a new RequirementList.\n"],["new","Gem::Resolver::SpecSpecification","Gem/Resolver/SpecSpecification.html#method-c-new","(set, spec, source = nil)","<p>A SpecSpecification is created for a <code>set</code> for a\nGem::Specification in <code>spec</code>.  The <code>source</code> is either\nwhere …\n"],["new","Gem::Resolver::Specification","Gem/Resolver/Specification.html#method-c-new","()","<p>Sets default instance variables for the specification.\n"],["new","Gem::Resolver::Stats","Gem/Resolver/Stats.html#method-c-new","()",""],["new","Gem::Security::Policy","Gem/Security/Policy.html#method-c-new","(name, policy = {})","<p>Create a new Gem::Security::Policy object with the given mode and options.\n"],["new","Gem::Security::Signer","Gem/Security/Signer.html#method-c-new","(key, cert_chain, passphrase = nil)","<p>Creates a new signer with an RSA <code>key</code> or path to a key, and a\ncertificate <code>chain</code> containing X509 certificates, …\n"],["new","Gem::Security::TrustDir","Gem/Security/TrustDir.html#method-c-new","(dir, permissions = DEFAULT_PERMISSIONS)","<p>Creates a new TrustDir using <code>dir</code> where the directory and file\npermissions will be checked according to …\n"],["new","Gem::Server","Gem/Server.html#method-c-new","(gem_dirs, port, daemon, launch = nil, addresses = nil)",""],["new","Gem::SilentUI","Gem/SilentUI.html#method-c-new","()","<p>The SilentUI has no arguments as it does not use any stream.\n"],["new","Gem::Source","Gem/Source.html#method-c-new","(uri)","<p>Creates a new Source which will use the index located at <code>uri</code>.\n"],["new","Gem::Source::Git","Gem/Source/Git.html#method-c-new","(name, repository, reference, submodules = false)","<p>Creates a new git gem source for a gems from loaded from\n<code>repository</code> at the given <code>reference</code>.  The\n<code>name</code> …\n"],["new","Gem::Source::Lock","Gem/Source/Lock.html#method-c-new","(source)","<p>Creates a new Lock source that wraps <code>source</code> and moves it\nearlier in the sort list.\n"],["new","Gem::Source::SpecificFile","Gem/Source/SpecificFile.html#method-c-new","(file)","<p>Creates a new SpecificFile for the gem in <code>file</code>\n"],["new","Gem::Source::Vendor","Gem/Source/Vendor.html#method-c-new","(path)","<p>Creates a new Vendor source for a gem that was unpacked at\n<code>path</code>.\n"],["new","Gem::SourceFetchProblem","Gem/SourceFetchProblem.html#method-c-new","(source, error)","<p>Creates a new SourceFetchProblem for the given <code>source</code> and\n<code>error</code>.\n"],["new","Gem::SourceList","Gem/SourceList.html#method-c-new","()","<p>Creates a new SourceList\n"],["new","Gem::SpecFetcher","Gem/SpecFetcher.html#method-c-new","(sources = nil)","<p>Creates a new SpecFetcher.  Ordinarily you want to use the default fetcher\nfrom Gem::SpecFetcher::fetcher …\n"],["new","Gem::SpecificGemNotFoundException","Gem/SpecificGemNotFoundException.html#method-c-new","(name, version, errors=nil)","<p>Creates a new SpecificGemNotFoundException for a gem with the given\n<code>name</code> and <code>version</code>.  Any <code>errors</code>\nencountered …\n"],["new","Gem::Specification","Gem/Specification.html#method-c-new","(name = nil, version = nil)","<p>Specification constructor. Assigns the default values to the attributes and\nyields itself for further …\n"],["new","Gem::StreamUI","Gem/StreamUI.html#method-c-new","(in_stream, out_stream, err_stream=STDERR, usetty=true)","<p>Creates a new StreamUI wrapping <code>in_stream</code> for user input,\n<code>out_stream</code> for standard output, <code>err_stream</code> …\n"],["new","Gem::StreamUI::SilentDownloadReporter","Gem/StreamUI/SilentDownloadReporter.html#method-c-new","(out_stream, *args)","<p>The silent download reporter ignores all arguments\n"],["new","Gem::StreamUI::SilentProgressReporter","Gem/StreamUI/SilentProgressReporter.html#method-c-new","(out_stream, size, initial_message, terminal_message = nil)","<p>Creates a silent progress reporter that ignores all input arguments.\n"],["new","Gem::StreamUI::SimpleProgressReporter","Gem/StreamUI/SimpleProgressReporter.html#method-c-new","(out_stream, size, initial_message, terminal_message = \"complete\")","<p>Creates a new progress reporter that will write to <code>out_stream</code>\nfor <code>size</code> items.  Shows the given <code>initial_message</code>\n…\n"],["new","Gem::StreamUI::VerboseDownloadReporter","Gem/StreamUI/VerboseDownloadReporter.html#method-c-new","(out_stream, *args)","<p>Creates a new verbose download reporter that will display on\n<code>out_stream</code>.  The other arguments are ignored. …\n"],["new","Gem::StreamUI::VerboseProgressReporter","Gem/StreamUI/VerboseProgressReporter.html#method-c-new","(out_stream, size, initial_message, terminal_message = 'complete')","<p>Creates a new progress reporter that will write to <code>out_stream</code>\nfor <code>size</code> items.  Shows the given <code>initial_message</code>\n…\n"],["new","Gem::StringSink","Gem/StringSink.html#method-c-new","()",""],["new","Gem::StringSource","Gem/StringSource.html#method-c-new","(str)",""],["new","Gem::SystemExitException","Gem/SystemExitException.html#method-c-new","(exit_code)","<p>Creates a new SystemExitException with the given <code>exit_code</code>\n"],["new","Gem::TestCase::StaticSet","Gem/TestCase/StaticSet.html#method-c-new","(specs)","<p>Creates a new StaticSet for the given <code>specs</code>\n"],["new","Gem::Uninstaller","Gem/Uninstaller.html#method-c-new","(gem, options = {})","<p>Constructs an uninstaller that will uninstall <code>gem</code>\n"],["new","Gem::UnsatisfiableDependencyError","Gem/UnsatisfiableDependencyError.html#method-c-new","(dep, platform_mismatch=nil)","<p>Creates a new UnsatisfiableDependencyError for the unsatisfiable\nGem::Resolver::DependencyRequest <code>dep</code> …\n"],["new","Gem::UriFormatter","Gem/UriFormatter.html#method-c-new","(uri)","<p>Creates a new URI formatter for <code>uri</code>.\n"],["new","Gem::Version","Gem/Version.html#method-c-new","(version)","<p>Constructs a Version from the <code>version</code> string.  A version\nstring is a series of digits or ASCII letters …\n"],["new","TempIO","TempIO.html#method-c-new","(string = '')","<p>Creates a new TempIO that will be initialized to contain\n<code>string</code>.\n"],["new_default_spec","Gem::TestCase","Gem/TestCase.html#method-i-new_default_spec","(name, version, deps = nil, *files)",""],["next5","Gem::Resolver::RequirementList","Gem/Resolver/RequirementList.html#method-i-next5","()","<p>Returns the oldest five entries from the list.\n"],["nmake_found?","Gem::TestCase","Gem/TestCase.html#method-i-nmake_found-3F","()","<p>Returns whether or not the nmake command could be found.\n"],["noecho","Gem::MockGemUi::TTY","Gem/MockGemUi/TTY.html#method-i-noecho","()",""],["non_nil_attributes","Gem::Specification","Gem/Specification.html#method-c-non_nil_attributes","()","<p>Specification attributes that must be non-nil\n"],["none?","Gem::Requirement","Gem/Requirement.html#method-i-none-3F","()","<p>true if this gem has no requirements.\n"],["normalize","Gem::Specification","Gem/Specification.html#method-i-normalize","()","<p>Normalize the list of files so that:\n<p>All file lists have redundancies removed.\n<p>Files referenced in the …\n"],["normalize","Gem::UriFormatter","Gem/UriFormatter.html#method-i-normalize","()","<p>Normalize the URI by adding “http://” if it is missing.\n"],["normalize_yaml_input","Gem::Specification","Gem/Specification.html#method-c-normalize_yaml_input","(input)","<p>Make sure the YAML specification is properly formatted with dashes\n"],["null","Gem::NameTuple","Gem/NameTuple.html#method-c-null","()","<p>A null NameTuple, ie name=nil, version=0\n"],["ok?","Gem::DependencyList","Gem/DependencyList.html#method-i-ok-3F","()","<p>Are all the dependencies in the list satisfied?\n"],["ok_to_remove?","Gem::DependencyList","Gem/DependencyList.html#method-i-ok_to_remove-3F","(full_name, check_dev=true)","<p>Is is ok to remove a gemspec from the dependency list?\n<p>If removing the gemspec creates breaks a currently …\n"],["open_editor","Gem::Commands::OpenCommand","Gem/Commands/OpenCommand.html#method-i-open_editor","(path)",""],["open_gem","Gem::Commands::OpenCommand","Gem/Commands/OpenCommand.html#method-i-open_gem","(name)",""],["open_uri_or_path","Gem::FakeFetcher","Gem/FakeFetcher.html#method-i-open_uri_or_path","(path)","<p>Thanks, FakeWeb!\n"],["others_possible?","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-others_possible-3F","()","<p>Indicate if this activation is one of a set of possible requests for the\nsame Dependency request.\n"],["outdated","Gem::Specification","Gem/Specification.html#method-c-outdated","()","<p>Return a list of all outdated local gem names.  This method is HEAVY as it\nmust go fetch specifications …\n"],["outdated_and_latest_version","Gem::Specification","Gem/Specification.html#method-c-outdated_and_latest_version","()","<p>Enumerates the outdated local gems yielding the local specification and the\nlatest remote version.\n<p>This …\n"],["output","Gem::MockGemUi","Gem/MockGemUi.html#method-i-output","()",""],["paranoid","Gem::Indexer","Gem/Indexer.html#method-i-paranoid","(path, extension)","<p>Ensure <code>path</code> and path with <code>extension</code> are\nidentical.\n"],["parent","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-parent","()","<p>Return the ActivationRequest that contained the dependency that we were\nactivated for.\n"],["parse","Gem::Requirement","Gem/Requirement.html#method-c-parse","(obj)","<p>Parse <code>obj</code>, returning an <code>[op, version]</code> pair.\n<code>obj</code> can be a String or a Gem::Version.\n<p>If <code>obj</code> is a String …\n"],["parse_make_command_line","Gem::TestCase","Gem/TestCase.html#method-i-parse_make_command_line","(line)",""],["path","Gem","Gem.html#method-c-path","()",""],["path_ok?","Gem::Uninstaller","Gem/Uninstaller.html#method-i-path_ok-3F","(gem_dir, spec)","<p>Is <code>spec</code> in <code>gem_dir</code>?\n"],["path_separator","Gem","Gem.html#method-c-path_separator","()","<p>How String Gem paths should be split.  Overridable for esoteric platforms.\n"],["paths","Gem","Gem.html#method-c-paths","()","<p>Retrieve the PathSupport object that RubyGems uses to lookup files.\n"],["paths=","Gem","Gem.html#method-c-paths-3D","(env)","<p>Initialize the filesystem paths to use from <code>env</code>.\n<code>env</code> is a hash-like object (typically ENV) that is queried …\n"],["pem_files_in","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-pem_files_in","(dir)",""],["pick_best!","Gem::AvailableSet","Gem/AvailableSet.html#method-i-pick_best-21","()",""],["platform","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-platform","()","<p>Platform of the gem\n"],["platform","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-platform","(*platforms)","<p>Block form for restricting gems to a set of platforms.\n<p>The gem dependencies platform is different from …\n"],["platform","Gem::Resolver::SpecSpecification","Gem/Resolver/SpecSpecification.html#method-i-platform","()","<p>The platform this gem works on.\n"],["platform","Gem::Specification","Gem/Specification.html#method-i-platform","()","<p>The platform this gem runs on.  See Gem::Platform for details.\n"],["platform=","Gem::Specification","Gem/Specification.html#method-i-platform-3D","(platform)","<p>The platform this gem runs on.\n<p>This is usually Gem::Platform::RUBY or Gem::Platform::CURRENT.\n<p>Most gems …\n"],["platforms","Gem","Gem.html#method-c-platforms","()","<p>Array of platforms this RubyGems supports.\n"],["platforms","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-platforms","(*platforms)","<p>Block form for restricting gems to a particular set of platforms.  See\n#platform.\n"],["platforms=","Gem","Gem.html#method-c-platforms-3D","(platforms)","<p>Set array of platforms this RubyGems supports (primarily for testing).\n"],["popen","Gem::Util","Gem/Util.html#method-c-popen","(*command)","<p>This calls IO.popen where it accepts an array for a <code>command</code>\n(Ruby 1.9+) and implements an IO.popen-like …\n"],["pos","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-pos","()","<p>The position in the tar entry\n"],["post_build","Gem","Gem.html#method-c-post_build","(&hook)","<p>Adds a post-build hook that will be passed an Gem::Installer instance when\nGem::Installer#install is …\n"],["post_install","Gem","Gem.html#method-c-post_install","(&hook)","<p>Adds a post-install hook that will be passed an Gem::Installer instance\nwhen Gem::Installer#install is …\n"],["post_reset","Gem","Gem.html#method-c-post_reset","(&hook)","<p>Adds a hook that will get run after Gem::Specification.reset is run.\n"],["post_uninstall","Gem","Gem.html#method-c-post_uninstall","(&hook)","<p>Adds a post-uninstall hook that will be passed a Gem::Uninstaller instance\nand the spec that was uninstalled …\n"],["pre_install","Gem","Gem.html#method-c-pre_install","(&hook)","<p>Adds a pre-install hook that will be passed an Gem::Installer instance when\nGem::Installer#install is …\n"],["pre_install_checks","Gem::Installer","Gem/Installer.html#method-i-pre_install_checks","()","<p>Performs various checks before installing the gem such as the install\nrepository is writable and its …\n"],["pre_reset","Gem","Gem.html#method-c-pre_reset","(&hook)","<p>Adds a hook that will get run before Gem::Specification.reset is run.\n"],["pre_uninstall","Gem","Gem.html#method-c-pre_uninstall","(&hook)","<p>Adds a pre-uninstall hook that will be passed an Gem::Uninstaller instance\nand the spec that will be …\n"],["prefetch","Gem::AvailableSet","Gem/AvailableSet.html#method-i-prefetch","(reqs)",""],["prefetch","Gem::Resolver::APISet","Gem/Resolver/APISet.html#method-i-prefetch","(reqs)","<p>A hint run by the resolver to allow the Set to fetch data for\nDependencyRequests <code>reqs</code>.\n"],["prefetch","Gem::Resolver::ComposedSet","Gem/Resolver/ComposedSet.html#method-i-prefetch","(reqs)","<p>Prefetches <code>reqs</code> in all sets.\n"],["prefetch","Gem::Resolver::GitSet","Gem/Resolver/GitSet.html#method-i-prefetch","(reqs)","<p>Prefetches specifications from the git repositories in this set.\n"],["prefetch","Gem::Resolver::InstallerSet","Gem/Resolver/InstallerSet.html#method-i-prefetch","(reqs)",""],["prefetch","Gem::Resolver::Set","Gem/Resolver/Set.html#method-i-prefetch","(reqs)","<p>The #prefetch method may be overridden, but this is not necessary.  This\ndefault implementation does …\n"],["prefix","Gem","Gem.html#method-c-prefix","()","<p>The directory prefix this RubyGems was installed at. If your prefix is in a\nstandard location (ie, rubygems …\n"],["prepend","Gem::List","Gem/List.html#method-i-prepend","(value)",""],["prepend","Gem::List","Gem/List.html#method-c-prepend","(list, value)",""],["prerelease=","Gem::Resolver::ComposedSet","Gem/Resolver/ComposedSet.html#method-i-prerelease-3D","(allow_prerelease)","<p>When <code>allow_prerelease</code> is set to <code>true</code> prereleases\ngems are allowed to match dependencies.\n"],["prerelease=","Gem::Resolver::InstallerSet","Gem/Resolver/InstallerSet.html#method-i-prerelease-3D","(allow_prerelease)",""],["prerelease?","Gem::Dependency","Gem/Dependency.html#method-i-prerelease-3F","()","<p>Does this dependency require a prerelease?\n"],["prerelease?","Gem::NameTuple","Gem/NameTuple.html#method-i-prerelease-3F","()","<p>Indicate if this NameTuple is for a prerelease version.\n"],["prerelease?","Gem::Requirement","Gem/Requirement.html#method-i-prerelease-3F","()","<p>A requirement is a prerelease if any of the versions inside of it are\nprereleases\n"],["prerelease?","Gem::Version","Gem/Version.html#method-i-prerelease-3F","()","<p>A version is considered a prerelease if it contains a letter.\n"],["prerelease_specs","Gem::Server","Gem/Server.html#method-i-prerelease_specs","(req, res)",""],["process_args","Gem::CommandManager","Gem/CommandManager.html#method-i-process_args","(args, build_args=nil)",""],["process_based_port","Gem::TestCase","Gem/TestCase.html#method-i-process_based_port","()","<p>See ::process_based_port\n"],["process_based_port","Gem::TestCase","Gem/TestCase.html#method-c-process_based_port","()","<p>Allows tests to use a random (but controlled) port number instead of a\nhardcoded one. This helps CI tools …\n"],["progress_reporter","Gem::StreamUI","Gem/StreamUI.html#method-i-progress_reporter","(*args)","<p>Return a progress reporter object chosen from the current verbosity.\n"],["proxy_uri","Gem::Request","Gem/Request.html#method-i-proxy_uri","()",""],["quick","Gem::Server","Gem/Server.html#method-i-quick","(req, res)",""],["quick_gem","Gem::TestCase","Gem/TestCase.html#method-i-quick_gem","(name, version='2')","<p>Creates a Gem::Specification with a minimum of extra work. \n<code>name</code> and <code>version</code> are the gem’s name and version,\n…\n"],["rb_files_in","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-rb_files_in","(dir)",""],["rdoc","Gem::Server","Gem/Server.html#method-i-rdoc","(req, res)","<p>Can be used for quick navigation to the rdoc documentation.  You can then\ndefine a search shortcut for …\n"],["rdoc_options","Gem::Specification","Gem/Specification.html#method-i-rdoc_options","()","<p>Specifies the rdoc options to be used when generating API documentation.\n<p>Usage:\n\n<pre>spec.rdoc_options &lt;&lt; '--title' ...</pre>\n"],["rdoc_options=","Gem::Specification","Gem/Specification.html#method-i-rdoc_options-3D","(options)","<p>Sets rdoc_options to <code>value</code>, ensuring it is an array. Don’t use\nthis, push onto the array instead.\n"],["re_sign","Gem::Security","Gem/Security.html#method-c-re_sign","(expired_certificate, private_key, age = ONE_YEAR, extensions = EXTENSIONS)","<p>Signs <code>expired_certificate</code> with <code>private_key</code> if the\nkeys match and the expired certificate was self-signed. …\n"],["read","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-read","(len = nil)","<p>Reads <code>len</code> bytes from the tar file entry, or the rest of the\nentry if nil\n"],["read","Gem::StringSource","Gem/StringSource.html#method-i-read","(count=nil)",""],["read_binary","Gem","Gem.html#method-c-read_binary","(path)","<p>Safely read a file in binary mode on all platforms.\n"],["read_binary","Gem::TestCase","Gem/TestCase.html#method-i-read_binary","(path)","<p>Reads a binary file at <code>path</code>\n"],["read_cache","Gem::TestCase","Gem/TestCase.html#method-i-read_cache","(path)","<p>Reads a Marshal file at <code>path</code>\n"],["read_checksums","Gem::Package","Gem/Package.html#method-i-read_checksums","(gem)","<p>Reads and loads checksums.yaml.gz from the tar file <code>gem</code>\n"],["readpartial","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-readpartial","(len = nil)",""],["readpartial","Gem::StringSource","Gem/StringSource.html#method-i-readpartial","(count=nil)",""],["really_verbose","Gem::ConfigFile","Gem/ConfigFile.html#method-i-really_verbose","()","<p>Really verbose mode gives you extra output.\n"],["record_depth","Gem::Resolver::Stats","Gem/Resolver/Stats.html#method-i-record_depth","(stack)",""],["record_requirements","Gem::Resolver::Stats","Gem/Resolver/Stats.html#method-i-record_requirements","(reqs)",""],["redirector","Gem::Ext::Builder","Gem/Ext/Builder.html#method-c-redirector","()",""],["refresh","Gem","Gem.html#method-c-refresh","()","<p>Refresh available gems from disk.\n"],["refute_path_exists","Gem::TestCase","Gem/TestCase.html#method-i-refute_path_exists","(path, msg = nil)","<p>TODO: move to minitest\n"],["register","Gem::NoAliasYAMLTree","Gem/NoAliasYAMLTree.html#method-i-register","(target, obj)","<p>Noop this out so there are no anchors\n"],["register_command","Gem::CommandManager","Gem/CommandManager.html#method-i-register_command","(command, obj=false)","<p>Register the Symbol <code>command</code> as a gem command.\n"],["register_default_spec","Gem","Gem.html#method-c-register_default_spec","(spec)","<p>Register a Gem::Specification for default gem.\n<p>Two formats for the specification are supported:\n<p>MRI 2.0 …\n"],["release","Gem::Version","Gem/Version.html#method-i-release","()","<p>The release for this version (e.g. 1.2.0.a -&gt; 1.2.0). Non-prerelease\nversions return themselves.\n"],["remote=","Gem::Resolver::ComposedSet","Gem/Resolver/ComposedSet.html#method-i-remote-3D","(remote)","<p>Sets the remote network access for all composed sets.\n"],["remote?","Gem::LocalRemoteOptions","Gem/LocalRemoteOptions.html#method-i-remote-3F","()","<p>Is remote fetching enabled?\n"],["remove","Gem::Resolver::RequirementList","Gem/Resolver/RequirementList.html#method-i-remove","()","<p>Remove the oldest DependencyRequest from the list.\n"],["remove","Gem::Uninstaller","Gem/Uninstaller.html#method-i-remove","(spec)","<p>spec &mdash; the spec of the gem to be uninstalled\n<p>list &mdash; the list of all such gems\n\n<p>Warning: this method modifies …\n"],["remove_all","Gem::Uninstaller","Gem/Uninstaller.html#method-i-remove_all","(list)","<p>Removes all gems in <code>list</code>.\n<p>NOTE: removes uninstalled gems from <code>list</code>.\n"],["remove_by_name","Gem::DependencyList","Gem/DependencyList.html#method-i-remove_by_name","(full_name)","<p>Removes the gemspec matching <code>full_name</code> from the dependency\nlist\n"],["remove_executables","Gem::Uninstaller","Gem/Uninstaller.html#method-i-remove_executables","(spec)","<p>Removes installed executables and batch files (windows only) for\n<code>gemspec</code>.\n"],["remove_installed!","Gem::AvailableSet","Gem/AvailableSet.html#method-i-remove_installed-21","(dep)",""],["remove_old_bin_files","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-remove_old_bin_files","(bin_dir)",""],["remove_old_lib_files","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-remove_old_lib_files","(lib_dir)",""],["remove_option","Gem::Command","Gem/Command.html#method-i-remove_option","(name)","<p>Remove previously defined command-line argument <code>name</code>.\n"],["remove_owners","Gem::Commands::OwnerCommand","Gem/Commands/OwnerCommand.html#method-i-remove_owners","(name, owners)",""],["remove_spec","Gem::Specification","Gem/Specification.html#method-c-remove_spec","(spec)","<p>Removes <code>spec</code> from the known specs.\n"],["remove_specs_unsatisfied_by","Gem::DependencyList","Gem/DependencyList.html#method-i-remove_specs_unsatisfied_by","(dependencies)","<p>Remove everything in the DependencyList that matches but doesn’t satisfy\nitems in <code>dependencies</code> (a hash …\n"],["remove_unresolved_default_spec","Gem","Gem.html#method-c-remove_unresolved_default_spec","(spec)","<p>Remove needless Gem::Specification of default gem from unresolved default\ngem list\n"],["replace","Gem::SourceList","Gem/SourceList.html#method-i-replace","(other)","<p>Replaces this SourceList with the sources in <code>other</code>  See #<<\nfor acceptable items in <code>other</code>.\n"],["req","Gem::TestCase","Gem/TestCase.html#method-i-req","(*requirements)","<p>Constructs a new Gem::Requirement.\n"],["request","Gem::FakeFetcher","Gem/FakeFetcher.html#method-i-request","(uri, request_class, last_modified = nil)",""],["request","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-request","(uri, request_class, last_modified = nil)","<p>Performs a Net::HTTP request of type <code>request_class</code> on\n<code>uri</code> returning a Net::HTTP response object.  request …\n"],["request_context","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-i-request_context","()","<p>Return a String indicating who caused this request to be added (only valid\nfor implicit requests)\n"],["request_path","Gem::Resolver::Conflict","Gem/Resolver/Conflict.html#method-i-request_path","(current)","<p>Path of activations from the <code>current</code> list.\n"],["requester","Gem::Resolver::Conflict","Gem/Resolver/Conflict.html#method-i-requester","()","<p>Return the Specification that listed the dependency\n"],["require_path","Gem::Specification","Gem/Specification.html#method-i-require_path","()","<p>Singular accessor for #require_paths\n"],["require_path=","Gem::Specification","Gem/Specification.html#method-i-require_path-3D","(path)","<p>Singular accessor for #require_paths\n"],["require_paths","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-require_paths","()","<p>Paths in the gem to add to <code>$LOAD_PATH</code> when this gem is\nactivated.\n<p>See also #require_paths=\n<p>If you have …\n"],["require_paths=","Gem::Specification","Gem/Specification.html#method-i-require_paths-3D","(val)","<p>Paths in the gem to add to <code>$LOAD_PATH</code> when this gem is\nactivated.\n<p>See also #require_paths\n<p>If you have an …\n"],["required_attribute?","Gem::Specification","Gem/Specification.html#method-c-required_attribute-3F","(name)","<p>Is <code>name</code> a required attribute?\n"],["required_attributes","Gem::Specification","Gem/Specification.html#method-c-required_attributes","()","<p>Required specification attributes\n"],["required_ruby_version=","Gem::Specification","Gem/Specification.html#method-i-required_ruby_version-3D","(req)","<p>The version of Ruby required by this gem.  The ruby version can be\nspecified to the patch-level:\n\n<pre>$ ruby ...</pre>\n"],["required_rubygems_version=","Gem::Specification","Gem/Specification.html#method-i-required_rubygems_version-3D","(req)","<p>The RubyGems version required by this gem\n"],["requirement","Gem::Dependency","Gem/Dependency.html#method-i-requirement","()","<p>What does this dependency require?\n"],["requirement","Gem::Resolver::DependencyRequest","Gem/Resolver/DependencyRequest.html#method-i-requirement","()","<p>The version requirement for this dependency request\n"],["requirement!","Gem::Resolver::Stats","Gem/Resolver/Stats.html#method-i-requirement-21","()",""],["requirements","Gem::Specification","Gem/Specification.html#method-i-requirements","()","<p>Lists the external (to RubyGems) requirements that must be met for this gem\nto work.  It’s simply information …\n"],["requirements=","Gem::Specification","Gem/Specification.html#method-i-requirements-3D","(req)","<p>Set requirements to <code>req</code>, ensuring it is an array. Don’t use\nthis, push onto the array instead.\n"],["requirements_list","Gem::Dependency","Gem/Dependency.html#method-i-requirements_list","()",""],["reset","Gem::CommandManager","Gem/CommandManager.html#method-c-reset","()","<p>Reset the authoritative instance of the command manager.\n"],["reset","Gem::Request","Gem/Request.html#method-i-reset","(connection)","<p>Resets HTTP connection <code>connection</code>.\n"],["reset","Gem::Security","Gem/Security.html#method-c-reset","()","<p>Resets the trust directory for verifying gems.\n"],["reset","Gem::Specification","Gem/Specification.html#method-c-reset","()","<p>Reset the list of known specs, running pre and post reset hooks registered\nin Gem.\n"],["reset_nil_attributes_to_default","Gem::Specification","Gem/Specification.html#method-i-reset_nil_attributes_to_default","()","<p>Reset nil attributes to their default values to make the spec valid\n"],["resolve","Gem::RequestSet","Gem/RequestSet.html#method-i-resolve","(set = Gem::Resolver::BestSet.new)","<p>Resolve the requested dependencies and return an Array of Specification\nobjects to be activated.\n"],["resolve","Gem::Resolver","Gem/Resolver.html#method-i-resolve","()","<p>Proceed with resolution! Returns an array of ActivationRequest objects.\n"],["resolve_current","Gem::RequestSet","Gem/RequestSet.html#method-i-resolve_current","()","<p>Resolve the requested dependencies against the gems available via Gem.path\nand return an Array of Specification …\n"],["rewind","Gem::Package::TarReader","Gem/Package/TarReader.html#method-i-rewind","()","<p>NOTE: Do not call #rewind during #each\n"],["rewind","Gem::Package::TarReader::Entry","Gem/Package/TarReader/Entry.html#method-i-rewind","()","<p>Rewinds to the beginning of the tar file entry\n"],["ri_dir","Gem::Specification","Gem/Specification.html#method-i-ri_dir","()","<p>Returns the full path to this spec’s ri directory.\n"],["root","Gem::Server","Gem/Server.html#method-i-root","(req, res)",""],["ruby","Gem","Gem.html#method-c-ruby","()","<p>The path to the running Ruby interpreter.\n"],["ruby","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-ruby","(version, options = {})","<p>Restricts this gem dependencies file to the given ruby\n<code>version</code>.\n<p>You may also provide <code>engine:</code> and <code>engine_version:</code>\n…\n"],["ruby=","Gem","Gem.html#method-c-ruby-3D","(ruby)","<p>Allows setting path to Ruby.  This method is available when requiring\n‘rubygems/test_case’\n"],["ruby_api_version","Gem","Gem.html#method-c-ruby_api_version","()","<p>Returns a String containing the API compatibility version of Ruby\n"],["ruby_engine","Gem","Gem.html#method-c-ruby_engine","()","<p>A wrapper around RUBY_ENGINE const that may not be defined\n"],["ruby_version","Gem","Gem.html#method-c-ruby_version","()","<p>A Gem::Version for the currently running Ruby.\n"],["rubybin","Gem::TestCase","Gem/TestCase.html#method-c-rubybin","()","<p>Finds the path to the Ruby executable\n"],["rubygems_api_key","Gem::ConfigFile","Gem/ConfigFile.html#method-i-rubygems_api_key","()","<p>Returns the RubyGems.org API key\n"],["rubygems_api_key=","Gem::ConfigFile","Gem/ConfigFile.html#method-i-rubygems_api_key-3D","(api_key)","<p>Sets the RubyGems.org API key to <code>api_key</code>\n"],["rubygems_api_request","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-rubygems_api_request","(method, path, host = nil, allowed_push_host = nil, &block)","<p>Creates an RubyGems API to <code>host</code> and <code>path</code> with the\ngiven HTTP <code>method</code>.\n<p>If <code>allowed_push_host</code> metadata is …\n"],["rubygems_target_version","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-i-rubygems_target_version","()",""],["rubygems_version","Gem","Gem.html#method-c-rubygems_version","()","<p>A Gem::Version for the currently running RubyGems\n"],["run","Gem::CommandManager","Gem/CommandManager.html#method-i-run","(args, build_args=nil)","<p>Run the command specified by <code>args</code>.\n"],["run","Gem::Ext::Builder","Gem/Ext/Builder.html#method-c-run","(command, results, command_name = nil)",""],["run","Gem::GemRunner","Gem/GemRunner.html#method-i-run","(args)","<p>Run the gem command with the following arguments.\n"],["run","Gem::Server","Gem/Server.html#method-i-run","()",""],["run","Gem::Server","Gem/Server.html#method-c-run","(options)",""],["runtime_dependencies","Gem::Specification","Gem/Specification.html#method-i-runtime_dependencies","()","<p>List of dependencies that will automatically be activated at runtime.\n"],["s3_expiration","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-s3_expiration","()",""],["sanitize","Gem::Indexer","Gem/Indexer.html#method-i-sanitize","(spec)","<p>Sanitize the descriptive fields in the spec.  Sometimes non-ASCII\ncharacters will garble the site index. …\n"],["sanitize_string","Gem::Indexer","Gem/Indexer.html#method-i-sanitize_string","(string)","<p>Sanitize a single string.\n"],["satisfied_by?","Gem::Requirement","Gem/Requirement.html#method-i-satisfied_by-3F","(version)","<p>True if <code>version</code> satisfies this Requirement.\n"],["satisfies_requirement?","Gem::Specification","Gem/Specification.html#method-i-satisfies_requirement-3F","(dependency)","<p>Checks if this specification meets the requirement of\n<code>dependency</code>.\n"],["save_loaded_features","Gem::TestCase","Gem/TestCase.html#method-i-save_loaded_features","()",""],["say","Gem::StreamUI","Gem/StreamUI.html#method-i-say","(statement=\"\")","<p>Display a statement.\n"],["say","Gem::UserInteraction","Gem/UserInteraction.html#method-i-say","(statement = '')","<p>Displays the given <code>statement</code> on the standard output (or\nequivalent).\n"],["scan_make_command_lines","Gem::TestCase","Gem/TestCase.html#method-i-scan_make_command_lines","(output)",""],["search_for_dependency","Gem::SpecFetcher","Gem/SpecFetcher.html#method-i-search_for_dependency","(dependency, matching_platform=true)","<p>Find and fetch gem name tuples that match <code>dependency</code>.\n<p>If <code>matching_platform</code> is false, gems for all platforms …\n"],["searcher=","Gem","Gem.html#method-c-searcher-3D","(searcher)","<p>Allows setting the gem path searcher.  This method is available when\nrequiring ‘rubygems/test_case’\n"],["seek","Gem::Package::TarReader","Gem/Package/TarReader.html#method-i-seek","(name)","<p>Seeks through the tar file until it finds the <code>entry</code> with\n<code>name</code> and yields it.  Rewinds the tar file to …\n"],["send_gem","Gem::Commands::PushCommand","Gem/Commands/PushCommand.html#method-i-send_gem","(name)",""],["set_encoding","Gem::StringSink","Gem/StringSink.html#method-i-set_encoding","(enc)",""],["setup","Gem::InstallerTestCase","Gem/InstallerTestCase.html#method-i-setup","()","<p>@gem &mdash; the path to a built gem from @spec\n<p>@user_spec &mdash; the path to a built gem from @user_spec\n<p>@installer &mdash; "],["setup","Gem::TestCase","Gem/TestCase.html#method-i-setup","()","<p>#setup prepares a sandboxed location to install gems.  All installs are\ndirected to a temporary directory. …\n"],["setup_signer","Gem::Package","Gem/Package.html#method-i-setup_signer","()","<p>Prepares the gem for signing and checksum generation.  If a signing\ncertificate and key are not present …\n"],["shebang","Gem::Installer","Gem/Installer.html#method-i-shebang","(bin_file_name)","<p>Generates a #! line for <code>bin_file_name</code>‘s wrapper copying\narguments if necessary.\n<p>If the :custom_shebang …\n"],["show_files","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-i-show_files","(files)",""],["show_help","Gem::Command","Gem/Command.html#method-i-show_help","()","<p>Display the help message for the command.\n"],["show_lookup_failure","Gem::Command","Gem/Command.html#method-i-show_lookup_failure","(gem_name, version, errors, domain)","<p>Display to the user that a gem couldn’t be found and reasons why\n"],["show_owners","Gem::Commands::OwnerCommand","Gem/Commands/OwnerCommand.html#method-i-show_owners","(name)",""],["show_rdoc_for_pattern","Gem::Server","Gem/Server.html#method-i-show_rdoc_for_pattern","(pattern, res)","<p>Returns true and prepares http response, if rdoc for the requested gem name\npattern was found.\n<p>The search …\n"],["show_release_notes","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-show_release_notes","()",""],["sign","Gem::Commands::CertCommand","Gem/Commands/CertCommand.html#method-i-sign","(cert_file)",""],["sign","Gem::Security","Gem/Security.html#method-c-sign","(certificate, signing_key, signing_cert, age = ONE_YEAR, extensions = EXTENSIONS, serial = 1)","<p>Sign the public key from <code>certificate</code> with the\n<code>signing_key</code> and <code>signing_cert</code>, using the\nGem::Security::DIGEST_ALGORITHM …\n"],["sign","Gem::Security::Signer","Gem/Security/Signer.html#method-i-sign","(data)","<p>Sign data with given digest algorithm\n"],["sign_in","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-sign_in","(sign_in_host = nil)","<p>Signs in with the RubyGems API at <code>sign_in_host</code> and sets the\nrubygems API key.\n"],["sign_s3_url","Gem::RemoteFetcher","Gem/RemoteFetcher.html#method-i-sign_s3_url","(uri, expiration = nil)","<p>we have our own signing code here to avoid a dependency on the aws-sdk gem\nfortunately, a simple GET …\n"],["silent_system","Gem::Util","Gem/Util.html#method-c-silent_system","(*command)","<p>Invokes system, but silences all output.\n"],["size","Gem::AvailableSet","Gem/AvailableSet.html#method-i-size","()",""],["size","Gem::Resolver::RequirementList","Gem/Resolver/RequirementList.html#method-i-size","()","<p>How many elements are in the list\n"],["skip_during","Gem::Deprecate","Gem/Deprecate.html#method-c-skip_during","()","<p>Temporarily turn off warnings. Intended for tests only.\n"],["sort_obj","Gem::Specification","Gem/Specification.html#method-i-sort_obj","()","<p>Returns an object you can use to sort specifications in #sort_by.\n"],["sorted","Gem::AvailableSet","Gem/AvailableSet.html#method-i-sorted","()",""],["sorted_requests","Gem::RequestSet","Gem/RequestSet.html#method-i-sorted_requests","()",""],["source","Gem::RequestSet::GemDependencyAPI","Gem/RequestSet/GemDependencyAPI.html#method-i-source","(url)","<p>Sets <code>url</code> as a source for gems for this dependency API. \nRubyGems uses the default configured sources …\n"],["source","Gem::Resolver::InstalledSpecification","Gem/Resolver/InstalledSpecification.html#method-i-source","()","<p>The source for this specification\n"],["source_for","Gem::AvailableSet","Gem/AvailableSet.html#method-i-source_for","(spec)",""],["source_paths","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-source_paths","()","<p>Returns the paths to the source files for use with analysis and\ndocumentation tools.  These paths are …\n"],["sources","Gem","Gem.html#method-c-sources","()","<p>Returns an Array of sources to fetch remote gems from. Uses default_sources\nif the sources list is empty. …\n"],["sources=","Gem","Gem.html#method-c-sources-3D","(new_sources)","<p>Need to be able to set the sources without calling Gem.sources.replace\nsince that would cause an infinite …\n"],["spec","Gem::Installer","Gem/Installer.html#method-i-spec","()","<p>Lazy accessor for the installer’s spec.\n"],["spec","Gem::Package","Gem/Package.html#method-i-spec","()","<p>The spec for this gem.\n<p>If this is a package for a built gem the spec is loaded from the gem and\nreturned. …\n"],["spec","Gem::Package::Old","Gem/Package/Old.html#method-i-spec","()","<p>The specification for this gem\n"],["spec","Gem::Resolver::LockSpecification","Gem/Resolver/LockSpecification.html#method-i-spec","()","<p>A specification constructed from the lockfile is returned\n"],["spec","Gem::TestCase","Gem/TestCase.html#method-i-spec","(name, version, &block)","<p>Constructs a new Gem::Specification.\n"],["spec","Gem::TestCase::SpecFetcherSetup","Gem/TestCase/SpecFetcherSetup.html#method-i-spec","(name, version, dependencies = nil, &block)","<p>Creates a spec with <code>name</code>, <code>version</code> and\n<code>deps</code>.  The created gem can be downloaded and installed.\n<p>The specification …\n"],["spec_cache_dir","Gem","Gem.html#method-c-spec_cache_dir","()",""],["spec_dir","Gem::Specification","Gem/Specification.html#method-i-spec_dir","()","<p>Returns the full path to the directory containing this spec’s gemspec file.\neg: /usr/local/lib/ruby/gems/1.8/specifications …\n"],["spec_fetcher","Gem::TestCase","Gem/TestCase.html#method-i-spec_fetcher","(repository = @gem_repo)","<p>Creates a SpecFetcher pre-filled with the gems or specs defined in the\nblock.\n<p>Yields a <code>fetcher</code> object …\n"],["spec_file","Gem::Installer","Gem/Installer.html#method-i-spec_file","()","<p>The location of of the spec file that is installed.\n"],["spec_file","Gem::Specification","Gem/Specification.html#method-i-spec_file","()","<p>Returns the full path to this spec’s gemspec file. eg:\n/usr/local/lib/ruby/gems/1.8/specifications/mygem-1.0.gemspec …\n"],["spec_for","Gem::Commands::ContentsCommand","Gem/Commands/ContentsCommand.html#method-i-spec_for","(name)",""],["spec_for","Gem::Commands::OpenCommand","Gem/Commands/OpenCommand.html#method-i-spec_for","(name)",""],["spec_for_dependency","Gem::SpecFetcher","Gem/SpecFetcher.html#method-i-spec_for_dependency","(dependency, matching_platform=true)","<p>Find and fetch specs that match <code>dependency</code>.\n<p>If <code>matching_platform</code> is false, gems for all platforms are …\n"],["spec_name","Gem::NameTuple","Gem/NameTuple.html#method-i-spec_name","()","<p>Return the name that the gemspec file would be\n"],["spec_name","Gem::Specification","Gem/Specification.html#method-i-spec_name","()","<p>The default name of the gemspec.  See also #file_name\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">spec</span>.<span class=\"ruby-identifier\">spec_name</span> <span class=\"ruby-comment\"># =&gt; &quot;example-1.0.gemspec&quot;</span>\n</pre>\n"],["spec_path","Gem::Commands::LockCommand","Gem/Commands/LockCommand.html#method-i-spec_path","(gem_full_name)",""],["spec_predecessors","Gem::DependencyList","Gem/DependencyList.html#method-i-spec_predecessors","()","<p>Return a hash of predecessors.  <code>result[spec]</code> is an Array of\ngemspecs that have a dependency satisfied …\n"],["specific?","Gem::Dependency","Gem/Dependency.html#method-i-specific-3F","()","<p>True if the dependency will not always match the latest version.\n"],["specific?","Gem::Requirement","Gem/Requirement.html#method-i-specific-3F","()","<p>True if the requirement will not always match the latest version.\n"],["specific_extra_args","Gem::Command","Gem/Command.html#method-c-specific_extra_args","(cmd)","<p>Return an array of extra arguments for the command.  The extra arguments\ncome from the gem configuration …\n"],["specific_extra_args_hash","Gem::Command","Gem/Command.html#method-c-specific_extra_args_hash","()","<p>Accessor for the specific extra args hash (self initializing).\n"],["specs","Gem::RequestSet","Gem/RequestSet.html#method-i-specs","()",""],["specs","Gem::Server","Gem/Server.html#method-i-specs","(req, res)",""],["specs","Gem::Source::Git","Gem/Source/Git.html#method-i-specs","()","<p>Loads all gemspecs in the repository\n"],["specs_in","Gem::RequestSet","Gem/RequestSet.html#method-i-specs_in","(dir)",""],["string","TempIO","TempIO.html#method-i-string","()","<p>The content of the TempIO as a String.\n"],["stubbed?","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-stubbed-3F","()","<p>Whether this specification is stubbed - i.e. we have information about the\ngem from a stub line, without …\n"],["stubbed?","Gem::Specification","Gem/Specification.html#method-i-stubbed-3F","()",""],["stubs","Gem::Specification","Gem/Specification.html#method-c-stubs","()","<p>Returns a Gem::StubSpecification for every installed gem\n"],["suffix_pattern","Gem","Gem.html#method-c-suffix_pattern","()","<p>Glob pattern for require-able path suffixes.\n"],["suffixes","Gem","Gem.html#method-c-suffixes","()","<p>Suffixes for require-able paths.\n"],["suggest_gems_from_name","Gem::SpecFetcher","Gem/SpecFetcher.html#method-i-suggest_gems_from_name","(gem_name)","<p>Suggests gems based on the supplied <code>gem_name</code>. Returns an array\nof alternative gem names.\n"],["summary=","Gem::Specification","Gem/Specification.html#method-i-summary-3D","(str)","<p>A short summary of this gem’s description.\n"],["tar_dir_header","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-tar_dir_header","(name, prefix, mode, mtime)",""],["tar_file_header","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-tar_file_header","(fname, dname, mode, length, mtime)",""],["teardown","Gem::TestCase","Gem/TestCase.html#method-i-teardown","()","<p>#teardown restores the process to its original state and removes the\ntempdir unless the <code>KEEP_FILES</code> environment …\n"],["terminate_interaction","Gem::MockGemUi","Gem/MockGemUi.html#method-i-terminate_interaction","(status=0)",""],["terminate_interaction","Gem::StreamUI","Gem/StreamUI.html#method-i-terminate_interaction","(status = 0)","<p>Terminate the application with exit code <code>status</code>, running any\nexit handlers that might have been defined. …\n"],["terminate_interaction","Gem::UserInteraction","Gem/UserInteraction.html#method-i-terminate_interaction","(exit_code = 0)","<p>Terminates the RubyGems process with the given <code>exit_code</code>\n"],["terminated?","Gem::MockGemUi","Gem/MockGemUi.html#method-i-terminated-3F","()",""],["time","Gem","Gem.html#method-c-time","(msg, width = 0, display = Gem.configuration.verbose)","<p>Prints the amount of time the supplied block takes to run using the debug\nUI output.\n"],["to_a","Gem::List","Gem/List.html#method-i-to_a","()",""],["to_a","Gem::NameTuple","Gem/NameTuple.html#method-i-to_a","()","<p>Convert back to the [name, version, platform] tuple\n"],["to_a","Gem::Platform","Gem/Platform.html#method-i-to_a","()",""],["to_a","Gem::SourceList","Gem/SourceList.html#method-i-to_a","()","<p>Returns an Array of source URI Strings.\n"],["to_ary","Gem::SourceList","Gem/SourceList.html#method-i-to_ary","()",""],["to_basic","Gem::NameTuple","Gem/NameTuple.html#method-c-to_basic","(list)","<p>Turn an array of NameTuple objects back into an array of\n<p>name, version, platform &mdash; tuples.\n\n"],["to_fullpath","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-to_fullpath","(path)","<p>Full path of the target library file. If the file is not in this gem,\nreturn nil.\n"],["to_oct","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-to_oct","(n, pad_size)",""],["to_request_set","Gem::AvailableSet","Gem/AvailableSet.html#method-i-to_request_set","(development = :none)","<p>Converts this AvailableSet into a RequestSet that can be used to install\ngems.\n<p>If <code>development</code> is :none …\n"],["to_ruby","Gem::Specification","Gem/Specification.html#method-i-to_ruby","()","<p>Returns a Ruby code representation of this specification, such that it can\nbe eval’ed and reconstruct …\n"],["to_ruby_for_cache","Gem::Specification","Gem/Specification.html#method-i-to_ruby_for_cache","()","<p>Returns a Ruby lighter-weight code representation of this specification,\nused for indexing only.\n<p>See  …\n"],["to_s","Gem::Platform","Gem/Platform.html#method-i-to_s","()",""],["to_s","Gem::RequestSet::Lockfile","Gem/RequestSet/Lockfile.html#method-i-to_s","()","<p>The contents of the lock file.\n"],["to_s","Gem::Version","Gem/Version.html#method-i-to_s","()",""],["to_spec","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-to_spec","()","<p>Return a Gem::Specification from this gem\n"],["to_spec","Gem::Dependency","Gem/Dependency.html#method-i-to_spec","()",""],["to_spec","Gem::Specification","Gem/Specification.html#method-i-to_spec","()","<p>Returns self\n"],["to_specs","Gem::Dependency","Gem/Dependency.html#method-i-to_specs","()",""],["traverse","Gem::Specification","Gem/Specification.html#method-i-traverse","(trail = [], &block)","<p>Recursively walk dependencies of this spec, executing the\n<code>block</code> for each hop.\n"],["traverse_parents","Gem::Util","Gem/Util.html#method-c-traverse_parents","(directory)","<p>Enumerates the parents of <code>directory</code>.\n"],["trust_cert","Gem::Security::TrustDir","Gem/Security/TrustDir.html#method-i-trust_cert","(certificate)","<p>Add a certificate to trusted certificate list.\n"],["trust_dir","Gem::Security","Gem/Security.html#method-c-trust_dir","()","<p>Returns a Gem::Security::TrustDir which wraps the directory where trusted\ncertificates live.\n"],["trusted_certificates","Gem::Security","Gem/Security.html#method-c-trusted_certificates","(&block)","<p>Enumerates the trusted certificates via Gem::Security::TrustDir.\n"],["try_activate","Gem","Gem.html#method-c-try_activate","(path)","<p>Try to activate a gem containing <code>path</code>. Returns true if\nactivation succeeded or wasn’t needed because …\n"],["tsort_each_child","Gem::DependencyList","Gem/DependencyList.html#method-i-tsort_each_child","(node)",""],["tsort_each_node","Gem::DependencyList","Gem/DependencyList.html#method-i-tsort_each_node","(&block)",""],["tty?","Gem::MockGemUi::TTY","Gem/MockGemUi/TTY.html#method-i-tty-3F","()",""],["tty?","Gem::StreamUI","Gem/StreamUI.html#method-i-tty-3F","()","<p>Returns true if TTY methods should be used on this StreamUI.\n"],["type","Gem::Dependency","Gem/Dependency.html#method-i-type","()","<p>Dependency type.\n"],["ui","Gem","Gem.html#method-c-ui","()","<p>Lazily loads DefaultUserInteraction and returns the default UI.\n"],["ui","Gem::DefaultUserInteraction","Gem/DefaultUserInteraction.html#method-i-ui","()","<p>See DefaultUserInteraction::ui\n"],["ui","Gem::DefaultUserInteraction","Gem/DefaultUserInteraction.html#method-c-ui","()","<p>Return the default UI.\n"],["ui=","Gem::DefaultUserInteraction","Gem/DefaultUserInteraction.html#method-i-ui-3D","(new_ui)","<p>See DefaultUserInteraction::ui=\n"],["ui=","Gem::DefaultUserInteraction","Gem/DefaultUserInteraction.html#method-c-ui-3D","(new_ui)","<p>Set the default UI.  If the default UI is never explicitly set, a simple\nconsole based UserInteraction …\n"],["unescape","Gem::UriFormatter","Gem/UriFormatter.html#method-i-unescape","()","<p>Unescapes the #uri which came from a CGI parameter\n"],["uninstall","Gem::Uninstaller","Gem/Uninstaller.html#method-i-uninstall","()","<p>Performs the uninstall of the gem.  This removes the spec, the Gem\ndirectory, and the cached .gem file. …\n"],["uninstall_all","Gem::Commands::UninstallCommand","Gem/Commands/UninstallCommand.html#method-i-uninstall_all","()",""],["uninstall_dep","Gem::Commands::CleanupCommand","Gem/Commands/CleanupCommand.html#method-i-uninstall_dep","(spec)",""],["uninstall_gem","Gem::TestCase","Gem/TestCase.html#method-i-uninstall_gem","(spec)","<p>Uninstalls the Gem::Specification <code>spec</code>\n"],["uninstall_gem","Gem::Uninstaller","Gem/Uninstaller.html#method-i-uninstall_gem","(spec)","<p>Uninstalls gem <code>spec</code>\n"],["uninstall_old_gemcutter","Gem::Commands::SetupCommand","Gem/Commands/SetupCommand.html#method-i-uninstall_old_gemcutter","()",""],["uninstall_specific","Gem::Commands::UninstallCommand","Gem/Commands/UninstallCommand.html#method-i-uninstall_specific","()",""],["unpack","Gem::Installer","Gem/Installer.html#method-i-unpack","(directory)","<p>Unpacks the gem into the given directory.\n"],["unregister_command","Gem::CommandManager","Gem/CommandManager.html#method-i-unregister_command","(command)","<p>Unregister the Symbol <code>command</code> as a gem command.\n"],["unresolved_deps","Gem::Specification","Gem/Specification.html#method-c-unresolved_deps","()","<p>DOC: This method needs documented or nodoc’d\n"],["unresolved_names","Gem::TestCase","Gem/TestCase.html#method-i-unresolved_names","()",""],["unyank_gem","Gem::Commands::YankCommand","Gem/Commands/YankCommand.html#method-i-unyank_gem","(version, platform)",""],["update","Gem::StreamUI::SilentDownloadReporter","Gem/StreamUI/SilentDownloadReporter.html#method-i-update","(current)","<p>Nothing can update the silent download reporter.\n"],["update","Gem::StreamUI::VerboseDownloadReporter","Gem/StreamUI/VerboseDownloadReporter.html#method-i-update","(bytes)","<p>Updates the verbose download reporter for the given number of\n<code>bytes</code>.\n"],["update_cache?","Gem::Source","Gem/Source.html#method-i-update_cache-3F","()","<p>Returns true when it is possible and safe to update the cache directory.\n"],["update_checksum","Gem::Package::TarHeader","Gem/Package/TarHeader.html#method-i-update_checksum","()","<p>Updates the TarHeader’s checksum\n"],["update_gem","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-i-update_gem","(name, version = Gem::Requirement.default)",""],["update_gems","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-i-update_gems","(gems_to_update)",""],["update_index","Gem::Indexer","Gem/Indexer.html#method-i-update_index","()","<p>Perform an in-place update of the repository from newly added gems.\n"],["update_rubygems","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-i-update_rubygems","()","<p>Update RubyGems software to the latest version.\n"],["update_specs_index","Gem::Indexer","Gem/Indexer.html#method-i-update_specs_index","(index, source, dest)","<p>Combines specs in <code>index</code> and <code>source</code> then writes\nout a new copy to <code>dest</code>.  For a latest index, does not …\n"],["updated","Gem::StreamUI::SilentProgressReporter","Gem/StreamUI/SilentProgressReporter.html#method-i-updated","(message)","<p>Does not print <code>message</code> when updated as this object has taken a\nvow of silence.\n"],["updated","Gem::StreamUI::SimpleProgressReporter","Gem/StreamUI/SimpleProgressReporter.html#method-i-updated","(message)","<p>Prints out a dot and ignores <code>message</code>.\n"],["updated","Gem::StreamUI::VerboseProgressReporter","Gem/StreamUI/VerboseProgressReporter.html#method-i-updated","(message)","<p>Prints out the position relative to the total and the <code>message</code>.\n"],["usage","Gem::Command","Gem/Command.html#method-i-usage","()","<p>Override to display the usage for an individual gem command.\n<p>The text “[options]” is automatically …\n"],["use_gemdeps","Gem","Gem.html#method-c-use_gemdeps","(path = nil)","<p>Looks for a gem dependency file at <code>path</code> and activates the gems\nin the file if found.  If the file is …\n"],["use_paths","Gem","Gem.html#method-c-use_paths","(home, *paths)","<p>Use the <code>home</code> and <code>paths</code> values for Gem.dir and\nGem.path.  Used mainly by the unit tests to provide environment …\n"],["use_ui","Gem::DefaultUserInteraction","Gem/DefaultUserInteraction.html#method-c-use_ui","(new_ui)","<p>Use <code>new_ui</code> for the duration of <code>block</code>.\n"],["use_ui","Gem::DefaultUserInteraction","Gem/DefaultUserInteraction.html#method-i-use_ui","(new_ui, &block)","<p>See DefaultUserInteraction::use_ui\n"],["user_agent","Gem::Request","Gem/Request.html#method-i-user_agent","()",""],["user_dir","Gem","Gem.html#method-c-user_dir","()","<p>Path for gems in the user’s home directory\n"],["user_home","Gem","Gem.html#method-c-user_home","()","<p>The home directory for the user.\n"],["util_build_gem","Gem::TestCase","Gem/TestCase.html#method-i-util_build_gem","(spec)","<p>Builds a gem from <code>spec</code> and places it in <code>File.join\n@gemhome, 'cache'</code>.  Automatically creates files based …\n"],["util_clear_gems","Gem::TestCase","Gem/TestCase.html#method-i-util_clear_gems","()","<p>Removes all installed gems from +@gemhome+.\n"],["util_dir_entry","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-util_dir_entry","()",""],["util_entry","Gem::Package::TarTestCase","Gem/Package/TarTestCase.html#method-i-util_entry","(tar)",""],["util_gem","Gem::TestCase","Gem/TestCase.html#method-i-util_gem","(name, version, deps = nil, &block)","<p>Creates a gem with <code>name</code>, <code>version</code> and\n<code>deps</code>.  The specification will be yielded before gem creation\nfor …\n"],["util_gzip","Gem::TestCase","Gem/TestCase.html#method-i-util_gzip","(data)","<p>Gzips <code>data</code>.\n"],["util_inst_bindir","Gem::InstallerTestCase","Gem/InstallerTestCase.html#method-i-util_inst_bindir","()","<p>The path where installed executables live\n"],["util_installer","Gem::InstallerTestCase","Gem/InstallerTestCase.html#method-i-util_installer","(spec, gem_home, user=false)","<p>Creates an installer for <code>spec</code> that will install into\n<code>gem_home</code>.  If <code>user</code> is true a user-install will be\n…\n"],["util_make_exec","Gem::InstallerTestCase","Gem/InstallerTestCase.html#method-i-util_make_exec","(spec = @spec, shebang = \"#!/usr/bin/ruby\")","<p>Adds an executable named “executable” to <code>spec</code> with the given\n<code>shebang</code>.\n<p>The executable is also …\n"],["util_make_gems","Gem::TestCase","Gem/TestCase.html#method-i-util_make_gems","(prerelease = false)","<p>Creates several default gems which all have a lib/code.rb file.  The gems\nare not installed but are available …\n"],["util_remove_gem","Gem::TestCase","Gem/TestCase.html#method-i-util_remove_gem","(spec)",""],["util_restore_RUBY_VERSION","Gem::TestCase","Gem/TestCase.html#method-i-util_restore_RUBY_VERSION","()",""],["util_set_RUBY_VERSION","Gem::TestCase","Gem/TestCase.html#method-i-util_set_RUBY_VERSION","(version, patchlevel = nil, revision = nil)",""],["util_set_arch","Gem::TestCase","Gem/TestCase.html#method-i-util_set_arch","(arch)","<p>Set the platform to <code>arch</code>\n"],["util_setup_fake_fetcher","Gem::TestCase","Gem/TestCase.html#method-i-util_setup_fake_fetcher","(prerelease = false)","<p>Sets up a fake fetcher using the gems from #util_make_gems.  Optionally\nadditional <code>prerelease</code> gems may …\n"],["util_setup_gem","Gem::InstallerTestCase","Gem/InstallerTestCase.html#method-i-util_setup_gem","(ui = @ui)","<p>Builds the @spec gem and returns an installer for it.  The built gem\nincludes:\n\n<pre>bin/executable\nlib/code.rb ...</pre>\n"],["util_setup_spec_fetcher","Gem::TestCase","Gem/TestCase.html#method-i-util_setup_spec_fetcher","(*specs)","<p>Sets up Gem::SpecFetcher to return information from the gems in\n<code>specs</code>. Best used with +@all_gems+ from …\n"],["util_spec","Gem::TestCase","Gem/TestCase.html#method-i-util_spec","(name, version = 2, deps = nil)","<p>Creates a spec with <code>name</code>, <code>version</code>. \n<code>deps</code> can specify the dependency or a <code>block</code> can be\ngiven for full …\n"],["util_zip","Gem::TestCase","Gem/TestCase.html#method-i-util_zip","(data)","<p>Deflates <code>data</code>\n"],["v","Gem::TestCase","Gem/TestCase.html#method-i-v","(string)","<p>Construct a new Gem::Version.\n"],["validate","Gem::Specification","Gem/Specification.html#method-i-validate","(packaging = true)","<p>Checks that the specification contains all required fields, and does a very\nbasic sanity check.\n<p>Raises …\n"],["validate_permissions","Gem::Specification","Gem/Specification.html#method-i-validate_permissions","()","<p>Checks to see if the files to be packaged are world-readable.\n"],["vc_windows?","Gem::TestCase","Gem/TestCase.html#method-c-vc_windows-3F","()","<p>Returns whether or not we’re on a version of Ruby built with VC++ (or\nBorland) versus Cygwin, Mingw, …\n"],["vc_windows?","Gem::TestCase","Gem/TestCase.html#method-i-vc_windows-3F","()","<p>Returns whether or not we’re on a version of Ruby built with VC++ (or\nBorland) versus Cygwin, Mingw, …\n"],["vendor_gem","Gem::TestCase","Gem/TestCase.html#method-i-vendor_gem","(name = 'a', version = 1)","<p>A vendor_gem is used with a gem dependencies file.  The gem created here\nhas no files, just a gem specification …\n"],["verbose","Gem::UserInteraction","Gem/UserInteraction.html#method-i-verbose","(msg = nil)","<p>Calls <code>say</code> with <code>msg</code> or the results of the block if\nreally_verbose is true.\n"],["verify","Gem::Package","Gem/Package.html#method-i-verify","()","<p>Verifies that this gem:\n<p>Contains a valid gem specification\n<p>Contains a contents archive\n"],["verify","Gem::Package::Old","Gem/Package/Old.html#method-i-verify","()","<p>Raises an exception if a security policy that verifies data is active. Old\nformat gems cannot be verified …\n"],["verify","Gem::Security::Policy","Gem/Security/Policy.html#method-i-verify","(chain, key = nil, digests = {})","<p>For <code>full_name</code>, verifies the certificate <code>chain</code> is\nvalid, the <code>digests</code> match the signatures\n<code>signatures</code> created …\n"],["verify","Gem::Security::TrustDir","Gem/Security/TrustDir.html#method-i-verify","()","<p>Make sure the trust directory exists.  If it does exist, make sure it’s\nactually a directory.  If not, …\n"],["verify_api_key","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-verify_api_key","(key)","<p>Retrieves the pre-configured API key <code>key</code> or terminates\ninteraction with an error.\n"],["verify_entry","Gem::Package","Gem/Package.html#method-i-verify_entry","(entry)","<p>Verifies <code>entry</code> in a .gem file.\n"],["verify_files","Gem::Package","Gem/Package.html#method-i-verify_files","(gem)","<p>Verifies the files of the <code>gem</code>\n"],["verify_gem","Gem::Validator","Gem/Validator.html#method-i-verify_gem","(gem_data)","<p>Given a gem file’s contents, validates against its own MD5 checksum\n<p>gem_data &mdash; <p>String &mdash; Contents of the gem …\n\n\n"],["verify_gem_file","Gem::Validator","Gem/Validator.html#method-i-verify_gem_file","(gem_path)","<p>Given the path to a gem file, validates against its own MD5 checksum\n<p>gem_path &mdash; <p>String &mdash; Path to gem file …\n\n\n"],["verify_signatures","Gem::Security::Policy","Gem/Security/Policy.html#method-i-verify_signatures","(spec, digests, signatures)","<p>Extracts the certificate chain from the <code>spec</code> and calls #verify\nto ensure the signatures and certificate …\n"],["version","Gem::BasicSpecification","Gem/BasicSpecification.html#method-i-version","()","<p>Version of the gem\n"],["version","Gem::Resolver::ActivationRequest","Gem/Resolver/ActivationRequest.html#method-i-version","()","<p>The version of this activation request’s specification\n"],["version","Gem::Resolver::SpecSpecification","Gem/Resolver/SpecSpecification.html#method-i-version","()","<p>The version of the gem for this specification.\n"],["version","Gem::UnsatisfiableDependencyError","Gem/UnsatisfiableDependencyError.html#method-i-version","()","<p>The Requirement of the unresolved dependency (not Version).\n"],["version","Gem::Version","Gem/Version.html#method-i-version","()","<p>A string representation of this Version.\n"],["version=","Gem::Specification","Gem/Specification.html#method-i-version-3D","(version)","<p>Set the version to <code>version</code>, potentially also setting\nrequired_rubygems_version if <code>version</code> indicates it …\n"],["visit_String","Gem::NoAliasYAMLTree","Gem/NoAliasYAMLTree.html#method-i-visit_String","(str)",""],["wait_for_child_process_to_exit","Gem::TestCase","Gem/TestCase.html#method-i-wait_for_child_process_to_exit","()","<p>In case we’re building docs in a background process, this method waits for\nthat process to exit (or if …\n"],["when_invoked","Gem::Command","Gem/Command.html#method-i-when_invoked","(&block)","<p>Call the given block when invoked.\n<p>Normal command invocations just executes the <code>execute</code> method of\nthe …\n"],["which_to_update","Gem::Commands::UpdateCommand","Gem/Commands/UpdateCommand.html#method-i-which_to_update","(highest_installed_gems, gem_names, system = false)",""],["why_not_ok?","Gem::DependencyList","Gem/DependencyList.html#method-i-why_not_ok-3F","(quick = false)",""],["win_platform=","Gem","Gem.html#method-c-win_platform-3D","(val)","<p>Allows toggling Windows behavior.  This method is available when requiring\n‘rubygems/test_case’\n"],["win_platform?","Gem","Gem.html#method-c-win_platform-3F","()","<p>Is this a windows platform?\n"],["win_platform?","Gem::TestCase","Gem/TestCase.html#method-c-win_platform-3F","()","<p>Is this test being run on a Windows platform?\n"],["win_platform?","Gem::TestCase","Gem/TestCase.html#method-i-win_platform-3F","()","<p>Is this test being run on a Windows platform?\n"],["windows_stub_script","Gem::Installer","Gem/Installer.html#method-i-windows_stub_script","(bindir, bin_file_name)","<p>return the stub script text used to launch the true Ruby script\n"],["with_response","Gem::GemcutterUtilities","Gem/GemcutterUtilities.html#method-i-with_response","(response, error_prefix = nil)","<p>If <code>response</code> is an HTTP Success (2XX) response, yields the\nresponse if a block was given or shows the …\n"],["wordy","Gem::PlatformMismatch","Gem/PlatformMismatch.html#method-i-wordy","()","<p>A wordy description of the error.\n"],["wordy","Gem::SourceFetchProblem","Gem/SourceFetchProblem.html#method-i-wordy","()","<p>An English description of the error.\n"],["wrap","Gem::Command","Gem/Command.html#method-i-wrap","(text, width)","<p>Wraps <code>text</code> to <code>width</code>\n"],["wrap","Gem::Package::DigestIO","Gem/Package/DigestIO.html#method-c-wrap","(io, digests)","<p>Wraps <code>io</code> and updates digest for each of the digest algorithms\nin the <code>digests</code> Hash.  Returns the digests …\n"],["write","Gem::ConfigFile","Gem/ConfigFile.html#method-i-write","()","<p>Writes out this config file, replacing its source.\n"],["write","Gem::Package::DigestIO","Gem/Package/DigestIO.html#method-i-write","(data)","<p>Writes <code>data</code> to the underlying IO and updates the digests\n"],["write","Gem::Package::TarWriter::BoundedStream","Gem/Package/TarWriter/BoundedStream.html#method-i-write","(data)","<p>Writes <code>data</code> onto the IO, raising a FileOverflow exception if\nthe number of bytes will be more than #limit …\n"],["write","Gem::Package::TarWriter::RestrictedStream","Gem/Package/TarWriter/RestrictedStream.html#method-i-write","(data)","<p>Writes <code>data</code> onto the IO\n"],["write","Gem::RequestSet::Lockfile","Gem/RequestSet/Lockfile.html#method-i-write","()","<p>Writes the lock file alongside the gem dependencies file\n"],["write","Gem::Security","Gem/Security.html#method-c-write","(pemmable, path, permissions = 0600, passphrase = nil, cipher = KEY_CIPHER)","<p>Writes <code>pemmable</code>, which must respond to <code>to_pem</code> to\n<code>path</code> with the given <code>permissions</code>. If passed\n<code>cipher</code> and …\n"],["write","Gem::StringSink","Gem/StringSink.html#method-i-write","(s)",""],["write_build_info_file","Gem::Installer","Gem/Installer.html#method-i-write_build_info_file","()","<p>Writes the file containing the arguments for building this gem’s\nextensions.\n"],["write_cache_file","Gem::Installer","Gem/Installer.html#method-i-write_cache_file","()","<p>Writes the .gem file to the cache directory\n"],["write_default_spec","Gem::Installer","Gem/Installer.html#method-i-write_default_spec","()","<p>Writes the full .gemspec specification (in Ruby) to the gem home’s\nspecifications/default directory. …\n"],["write_file","Gem::TestCase","Gem/TestCase.html#method-i-write_file","(path)","<p>Writes a binary file to <code>path</code> which is relative to +@gemhome+\n"],["write_spec","Gem::Installer","Gem/Installer.html#method-i-write_spec","()","<p>Writes the .gemspec specification (in Ruby) to the gem home’s\nspecifications directory.\n"],["yank_gem","Gem::Commands::YankCommand","Gem/Commands/YankCommand.html#method-i-yank_gem","(version, platform)",""]]}}
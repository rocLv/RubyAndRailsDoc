var search_data = {"index":{"searchIndex":["io","kernel","scanf","formatspecifier","formatstring","string","block_scanf()","scanf()","scanf()","scanf()"],"longSearchIndex":["io","kernel","scanf","scanf::formatspecifier","scanf::formatstring","string","string#block_scanf()","io#scanf()","kernel#scanf()","string#scanf()"],"info":[["IO","","IO.html","",""],["Kernel","","Kernel.html","",""],["Scanf","","Scanf.html","","<p>scanf for Ruby\n<p>Description\n<p>scanf is an implementation of the C function scanf(3), modified as\nnecessary …\n"],["Scanf::FormatSpecifier","","Scanf/FormatSpecifier.html","",""],["Scanf::FormatString","","Scanf/FormatString.html","",""],["String","","String.html","",""],["block_scanf","String","String.html#method-i-block_scanf","(fstr)","<p>Scans the current string until the match is exhausted yielding each match\nas it is encountered in the …\n"],["scanf","IO","IO.html#method-i-scanf","(str)","<p>Scans the current string until the match is exhausted, yielding each match\nas it is encountered in the …\n"],["scanf","Kernel","Kernel.html#method-i-scanf","(format, &b)","<p>Scans STDIN for data matching <code>format</code>.  See IO#scanf for\ndetails.\n<p>See Scanf for details on creating a format …\n"],["scanf","String","String.html#method-i-scanf","(fstr)","<p>Scans the current string. If a block is given, it functions exactly like\nblock_scanf.\n\n<pre>arr = &quot;123 456&quot;.scanf(&quot;%d%d&quot;) ...</pre>\n"]]}}
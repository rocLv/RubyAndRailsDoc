var search_data = {"index":{"searchIndex":["syslog","constants","facility","level","logger","formatter","severity","macros","option","log_mask()","log_upto()","add()","call()","close()","debug()","error()","facility()","fatal()","ident()","included()","included()","info()","inspect()","instance()","log()","make_methods()","mask()","mask=()","new()","open()","open!()","opened?()","options()","reopen()","syslog()","syslog=()","unknown()","warn()"],"longSearchIndex":["syslog","syslog::constants","syslog::facility","syslog::level","syslog::logger","syslog::logger::formatter","syslog::logger::severity","syslog::macros","syslog::option","syslog::macros#log_mask()","syslog::macros#log_upto()","syslog::logger#add()","syslog::logger::formatter#call()","syslog::close()","syslog::logger#debug()","syslog::logger#error()","syslog::facility()","syslog::logger#fatal()","syslog::ident()","syslog::constants::included()","syslog::macros::included()","syslog::logger#info()","syslog::inspect()","syslog::instance()","syslog::log()","syslog::logger::make_methods()","syslog::mask()","syslog::mask=()","syslog::logger::new()","syslog::open()","syslog::open!()","syslog::opened?()","syslog::options()","syslog::reopen()","syslog::logger::syslog()","syslog::logger::syslog=()","syslog::logger#unknown()","syslog::logger#warn()"],"info":[["Syslog","","Syslog.html","","<p>The syslog package provides a Ruby interface to the POSIX system logging\nfacility.\n<p>Syslog messages are …\n"],["Syslog::Constants","","Syslog/Constants.html","",""],["Syslog::Facility","","Syslog/Facility.html","",""],["Syslog::Level","","Syslog/Level.html","",""],["Syslog::Logger","","Syslog/Logger.html","","<p>Syslog::Logger is a Logger work-alike that logs via syslog instead of to a\nfile.  You can use Syslog::Logger …\n"],["Syslog::Logger::Formatter","","Syslog/Logger/Formatter.html","","<p>Default formatter for log messages.\n"],["Syslog::Logger::Severity","","Syslog/Logger/Severity.html","",""],["Syslog::Macros","","Syslog/Macros.html","",""],["Syslog::Option","","Syslog/Option.html","",""],["LOG_MASK","Syslog::Macros","Syslog/Macros.html#method-i-LOG_MASK","(p1)","<p>Generates a mask bit for a priority level. See #mask=\n"],["LOG_UPTO","Syslog::Macros","Syslog/Macros.html#method-i-LOG_UPTO","(p1)","<p>Generates a mask value for priority levels at or below the level specified.\nSee #mask=\n"],["add","Syslog::Logger","Syslog/Logger.html#method-i-add","(severity, message = nil, progname = nil, &block)","<p>Almost duplicates Logger#add.  <code>progname</code> is ignored.\n"],["call","Syslog::Logger::Formatter","Syslog/Logger/Formatter.html#method-i-call","(severity, time, progname, msg)",""],["close","Syslog","Syslog.html#method-c-close","()","<p>Closes the syslog facility. Raises a runtime exception if it is not open.\n"],["debug","Syslog::Logger","Syslog/Logger.html#method-i-debug","","<p>Logs a <code>message</code> at the debug (syslog debug) log level, or logs\nthe message returned from the block.\n"],["error","Syslog::Logger","Syslog/Logger.html#method-i-error","","<p>Logs a <code>message</code> at the error (syslog warning) log level, or\nlogs the message returned from the block. …\n"],["facility","Syslog","Syslog.html#method-c-facility","()","<p>Returns the facility number used in the last call to open()\n"],["fatal","Syslog::Logger","Syslog/Logger.html#method-i-fatal","","<p>Logs a <code>message</code> at the fatal (syslog err) log level, or logs\nthe message returned from the block.\n"],["ident","Syslog","Syslog.html#method-c-ident","()","<p>Returns the identity string used in the last call to open()\n"],["included","Syslog::Constants","Syslog/Constants.html#method-c-included","(p1)",""],["included","Syslog::Macros","Syslog/Macros.html#method-c-included","(p1)",""],["info","Syslog::Logger","Syslog/Logger.html#method-i-info","","<p>Logs a <code>message</code> at the info (syslog info) log level, or logs\nthe message returned from the block.\n"],["inspect","Syslog","Syslog.html#method-c-inspect","()","<p>Returns an inspect() string summarizing the object state.\n"],["instance","Syslog","Syslog.html#method-c-instance","()","<p>Returns self, for backward compatibility.\n"],["log","Syslog","Syslog.html#method-c-log","(*args)","<p>Log a message with the specified priority. Example:\n\n<pre>Syslog.log(Syslog::LOG_CRIT, &quot;Out of disk space&quot;) ...</pre>\n"],["make_methods","Syslog::Logger","Syslog/Logger.html#method-c-make_methods","(meth)","<p>Builds a methods for level <code>meth</code>.\n"],["mask","Syslog","Syslog.html#method-c-mask","()","<p>Returns the log priority mask in effect. The mask is not reset by opening\nor closing syslog.\n"],["mask=","Syslog","Syslog.html#method-c-mask-3D","(p1)","<p>Sets the log priority mask. A method LOG_UPTO is defined to make it easier\nto set mask values. Example: …\n"],["new","Syslog::Logger","Syslog/Logger.html#method-c-new","(program_name = 'ruby', facility = nil)","<p>Fills in variables for Logger compatibility.  If this is the first instance\nof Syslog::Logger, <code>program_name</code> …\n"],["open","Syslog","Syslog.html#method-c-open","(p1 = v1, p2 = v2, p3 = v3)","<p>Open the syslog facility. Raises a runtime exception if it is already open.\n<p>Can be called with or without …\n"],["open!","Syslog","Syslog.html#method-c-open-21","(*args)","<p>Closes and then reopens the syslog.\n<p>Arguments are the same as for open().\n"],["opened?","Syslog","Syslog.html#method-c-opened-3F","()","<p>Returns true if the syslog is open.\n"],["options","Syslog","Syslog.html#method-c-options","()","<p>Returns the options bitmask used in the last call to open()\n"],["reopen","Syslog","Syslog.html#method-c-reopen","(*args)","<p>Closes and then reopens the syslog.\n<p>Arguments are the same as for open().\n"],["syslog","Syslog::Logger","Syslog/Logger.html#method-c-syslog","()","<p>Returns the internal Syslog object that is initialized when the first\ninstance is created.\n"],["syslog=","Syslog::Logger","Syslog/Logger.html#method-c-syslog-3D","(syslog)","<p>Specifies the internal Syslog object to be used.\n"],["unknown","Syslog::Logger","Syslog/Logger.html#method-i-unknown","","<p>Logs a <code>message</code> at the unknown (syslog alert) log level, or\nlogs the message returned from the block. …\n"],["warn","Syslog::Logger","Syslog/Logger.html#method-i-warn","","<p>Logs a <code>message</code> at the warn (syslog notice) log level, or logs\nthe message returned from the block.\n"]]}}
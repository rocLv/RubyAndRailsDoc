var search_data = {"index":{"searchIndex":["object","thwait","thwait","all_waits()","all_waits()","all_waits()","all_waits()","empty?()","empty?()","finished?()","finished?()","join()","join()","join_nowait()","join_nowait()","new()","new()","next_wait()","next_wait()"],"longSearchIndex":["object","thwait","threadswait","threadswait::all_waits()","threadswait#all_waits()","threadswait#all_waits()","threadswait::all_waits()","threadswait#empty?()","threadswait#empty?()","threadswait#finished?()","threadswait#finished?()","threadswait#join()","threadswait#join()","threadswait#join_nowait()","threadswait#join_nowait()","threadswait::new()","threadswait::new()","threadswait#next_wait()","threadswait#next_wait()"],"info":[["Object","","Object.html","",""],["ThWait","","ThWait.html","","<p>This class watches for termination of multiple threads.  Basic\nfunctionality (wait until specified threads …\n"],["ThreadsWait","","ThreadsWait.html","","<p>This class watches for termination of multiple threads.  Basic\nfunctionality (wait until specified threads …\n"],["all_waits","ThreadsWait","ThreadsWait.html#method-c-all_waits","(*threads)","<p>Waits until all specified threads have terminated.  If a block is provided,\nit is executed for each thread …\n"],["all_waits","ThreadsWait","ThreadsWait.html#method-i-all_waits","()","<p>Waits until all of the specified threads are terminated.  If a block is\nsupplied for the method, it is …\n"],["all_waits","ThreadsWait","ThreadsWait.html#method-i-all_waits","()","<p>Waits until all of the specified threads are terminated.  If a block is\nsupplied for the method, it is …\n"],["all_waits","ThreadsWait","ThreadsWait.html#method-c-all_waits","(*threads)","<p>Waits until all specified threads have terminated.  If a block is provided,\nit is executed for each thread …\n"],["empty?","ThreadsWait","ThreadsWait.html#method-i-empty-3F","()","<p>Returns <code>true</code> if there are no threads in the pool still\nrunning.\n"],["empty?","ThreadsWait","ThreadsWait.html#method-i-empty-3F","()","<p>Returns <code>true</code> if there are no threads in the pool still\nrunning.\n"],["finished?","ThreadsWait","ThreadsWait.html#method-i-finished-3F","()","<p>Returns <code>true</code> if any thread has terminated and is ready to be\ncollected.\n"],["finished?","ThreadsWait","ThreadsWait.html#method-i-finished-3F","()","<p>Returns <code>true</code> if any thread has terminated and is ready to be\ncollected.\n"],["join","ThreadsWait","ThreadsWait.html#method-i-join","(*threads)","<p>Waits for specified threads to terminate, and returns when one of the\nthreads terminated.\n"],["join","ThreadsWait","ThreadsWait.html#method-i-join","(*threads)","<p>Waits for specified threads to terminate, and returns when one of the\nthreads terminated.\n"],["join_nowait","ThreadsWait","ThreadsWait.html#method-i-join_nowait","(*threads)","<p>Specifies the threads that this object will wait for, but does not actually\nwait.\n"],["join_nowait","ThreadsWait","ThreadsWait.html#method-i-join_nowait","(*threads)","<p>Specifies the threads that this object will wait for, but does not actually\nwait.\n"],["new","ThreadsWait","ThreadsWait.html#method-c-new","(*threads)","<p>Creates a ThreadsWait object, specifying the threads to wait on.\nNon-blocking.\n"],["new","ThreadsWait","ThreadsWait.html#method-c-new","(*threads)","<p>Creates a ThreadsWait object, specifying the threads to wait on.\nNon-blocking.\n"],["next_wait","ThreadsWait","ThreadsWait.html#method-i-next_wait","(nonblock = nil)","<p>Waits until any of the specified threads has terminated, and returns the\none that does.\n<p>If there is no …\n"],["next_wait","ThreadsWait","ThreadsWait.html#method-i-next_wait","(nonblock = nil)","<p>Waits until any of the specified threads has terminated, and returns the\none that does.\n<p>If there is no …\n"]]}}
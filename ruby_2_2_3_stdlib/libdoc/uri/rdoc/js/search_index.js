var search_data = {"index":{"searchIndex":["kernel","uri","badurierror","error","escape","ftp","generic","http","https","invalidcomponenterror","invalidurierror","ldap","ldaps","mailto","regexp","rfc2396_parser","rfc2396_regexp","pattern","+()","-()","==()","uri()","absolute()","absolute?()","attributes()","attributes=()","build()","build()","build()","build()","build()","build2()","coerce()","component()","component()","component_ary()","decode()","decode_www_form()","decode_www_form_component()","default_port()","default_port()","dn()","dn=()","encode()","encode_www_form()","encode_www_form_component()","eql?()","escape()","escape()","extensions()","extensions=()","extract()","extract()","filter()","filter=()","find_proxy()","fragment=()","hash()","headers=()","hierarchical?()","hierarchical?()","host=()","hostname()","hostname=()","inspect()","inspect()","join()","join()","make_regexp()","merge()","merge!()","new()","new()","new()","new()","new()","new()","normalize()","normalize!()","opaque=()","parse()","parse()","parser()","password()","password=()","path()","path=()","port=()","query=()","regexp()","registry=()","relative?()","request_uri()","route_from()","route_to()","scheme=()","scheme_list()","scope()","scope=()","select()","set_attributes()","set_dn()","set_extensions()","set_filter()","set_headers()","set_host()","set_opaque()","set_password()","set_path()","set_path()","set_port()","set_scheme()","set_scope()","set_to()","set_typecode()","set_user()","set_userinfo()","split()","split()","to=()","to_mailtext()","to_rfc822text()","to_s()","to_s()","to_s()","typecode=()","unescape()","unescape()","user()","user=()","userinfo()","userinfo=()"],"longSearchIndex":["kernel","uri","uri::badurierror","uri::error","uri::escape","uri::ftp","uri::generic","uri::http","uri::https","uri::invalidcomponenterror","uri::invalidurierror","uri::ldap","uri::ldaps","uri::mailto","uri::regexp","uri::rfc2396_parser","uri::rfc2396_regexp","uri::rfc2396_regexp::pattern","uri::generic#+()","uri::generic#-()","uri::generic#==()","kernel::uri()","uri::generic#absolute()","uri::generic#absolute?()","uri::ldap#attributes()","uri::ldap#attributes=()","uri::ftp::build()","uri::generic::build()","uri::http::build()","uri::ldap::build()","uri::mailto::build()","uri::generic::build2()","uri::generic#coerce()","uri::generic#component()","uri::generic::component()","uri::generic#component_ary()","uri::escape#decode()","uri::decode_www_form()","uri::decode_www_form_component()","uri::generic::default_port()","uri::generic#default_port()","uri::ldap#dn()","uri::ldap#dn=()","uri::escape#encode()","uri::encode_www_form()","uri::encode_www_form_component()","uri::generic#eql?()","uri::escape#escape()","uri::rfc2396_parser#escape()","uri::ldap#extensions()","uri::ldap#extensions=()","uri::extract()","uri::rfc2396_parser#extract()","uri::ldap#filter()","uri::ldap#filter=()","uri::generic#find_proxy()","uri::generic#fragment=()","uri::generic#hash()","uri::mailto#headers=()","uri::generic#hierarchical?()","uri::ldap#hierarchical?()","uri::generic#host=()","uri::generic#hostname()","uri::generic#hostname=()","uri::generic#inspect()","uri::rfc2396_parser#inspect()","uri::join()","uri::rfc2396_parser#join()","uri::rfc2396_parser#make_regexp()","uri::generic#merge()","uri::generic#merge!()","uri::ftp::new()","uri::generic::new()","uri::http::new()","uri::ldap::new()","uri::mailto::new()","uri::rfc2396_parser::new()","uri::generic#normalize()","uri::generic#normalize!()","uri::generic#opaque=()","uri::parse()","uri::rfc2396_parser#parse()","uri::generic#parser()","uri::generic#password()","uri::generic#password=()","uri::ftp#path()","uri::generic#path=()","uri::generic#port=()","uri::generic#query=()","uri::regexp()","uri::generic#registry=()","uri::generic#relative?()","uri::http#request_uri()","uri::generic#route_from()","uri::generic#route_to()","uri::generic#scheme=()","uri::scheme_list()","uri::ldap#scope()","uri::ldap#scope=()","uri::generic#select()","uri::ldap#set_attributes()","uri::ldap#set_dn()","uri::ldap#set_extensions()","uri::ldap#set_filter()","uri::mailto#set_headers()","uri::generic#set_host()","uri::generic#set_opaque()","uri::generic#set_password()","uri::ftp#set_path()","uri::generic#set_path()","uri::generic#set_port()","uri::generic#set_scheme()","uri::ldap#set_scope()","uri::mailto#set_to()","uri::ftp#set_typecode()","uri::generic#set_user()","uri::generic#set_userinfo()","uri::split()","uri::rfc2396_parser#split()","uri::mailto#to=()","uri::mailto#to_mailtext()","uri::mailto#to_rfc822text()","uri::ftp#to_s()","uri::generic#to_s()","uri::mailto#to_s()","uri::ftp#typecode=()","uri::escape#unescape()","uri::rfc2396_parser#unescape()","uri::generic#user()","uri::generic#user=()","uri::generic#userinfo()","uri::generic#userinfo=()"],"info":[["Kernel","","Kernel.html","",""],["URI","","URI.html","","<p>URI is a module providing classes to handle Uniform Resource Identifiers\n(RFC2396)\n<p>Features\n<p>Uniform handling …\n"],["URI::BadURIError","","URI/BadURIError.html","","<p>URI is valid, bad usage is not.\n"],["URI::Error","","URI/Error.html","","<p>Base class for all URI exceptions.\n"],["URI::Escape","","URI/Escape.html","","<p>module for escaping unsafe characters with codes.\n"],["URI::FTP","","URI/FTP.html","","<p>FTP URI syntax is defined by RFC1738 section 3.2.\n<p>This class will be redesigned because of difference …\n"],["URI::Generic","","URI/Generic.html","","<p>Base class for all URI classes. Implements generic URI syntax as per RFC\n2396.\n"],["URI::HTTP","","URI/HTTP.html","","<p>The syntax of HTTP URIs is defined in RFC1738 section 3.3.\n<p>Note that the Ruby URI library allows HTTP …\n"],["URI::HTTPS","","URI/HTTPS.html","","<p>The default port for HTTPS URIs is 443, and the scheme is ‘https:’ rather\nthan ‘http:’. Other than that, …\n"],["URI::InvalidComponentError","","URI/InvalidComponentError.html","","<p>Not a URI component.\n"],["URI::InvalidURIError","","URI/InvalidURIError.html","","<p>Not a URI.\n"],["URI::LDAP","","URI/LDAP.html","","<p>LDAP URI SCHEMA (described in RFC2255)\nldap://<host>/<dn>[?<attrs>[?<scope>[?<filter>]]]\n"],["URI::LDAPS","","URI/LDAPS.html","","<p>The default port for LDAPS URIs is 636, and the scheme is ‘ldaps:’ rather\nthan ‘ldap:’. Other than that, …\n"],["URI::MailTo","","URI/MailTo.html","","<p>RFC6068, The mailto URL scheme\n"],["URI::REGEXP","","URI/REGEXP.html","",""],["URI::RFC2396_Parser","","URI/RFC2396_Parser.html","","<p>class that Parses String’s into URI’s\n<p>It contains a Hash set of patterns and Regexp’s that match and validate. …\n"],["URI::RFC2396_REGEXP","","URI/RFC2396_REGEXP.html","","<p>Includes URI::REGEXP::PATTERN\n"],["URI::RFC2396_REGEXP::PATTERN","","URI/RFC2396_REGEXP/PATTERN.html","","<p>Patterns used to parse URI’s\n"],["+","URI::Generic","URI/Generic.html#method-i-2B","(oth)",""],["-","URI::Generic","URI/Generic.html#method-i-2D","(oth)",""],["==","URI::Generic","URI/Generic.html#method-i-3D-3D","(oth)","<p>Compares to URI’s\n"],["URI","Kernel","Kernel.html#method-c-URI","(uri)","<p>Returns <code>uri</code> converted to a URI object.\n"],["absolute","URI::Generic","URI/Generic.html#method-i-absolute","()",""],["absolute?","URI::Generic","URI/Generic.html#method-i-absolute-3F","()","<p>Checks if URI is an absolute one\n"],["attributes","URI::LDAP","URI/LDAP.html#method-i-attributes","()","<p>returns attributes.\n"],["attributes=","URI::LDAP","URI/LDAP.html#method-i-attributes-3D","(val)","<p>setter for attributes <code>val</code>\n"],["build","URI::FTP","URI/FTP.html#method-c-build","(args)","<p>Description\n<p>Creates a new URI::FTP object from components, with syntax checking.\n<p>The components accepted …\n"],["build","URI::Generic","URI/Generic.html#method-c-build","(args)","<p>Synopsis\n<p>See #new\n<p>Description\n"],["build","URI::HTTP","URI/HTTP.html#method-c-build","(args)","<p>Description\n<p>Create a new URI::HTTP object from components, with syntax checking.\n<p>The components accepted …\n"],["build","URI::LDAP","URI/LDAP.html#method-c-build","(args)","<p>Description\n<p>Create a new URI::LDAP object from components, with syntax checking.\n<p>The components accepted …\n"],["build","URI::MailTo","URI/MailTo.html#method-c-build","(args)","<p>Description\n<p>Creates a new URI::MailTo object from components, with syntax checking.\n<p>Components can be provided …\n"],["build2","URI::Generic","URI/Generic.html#method-c-build2","(args)","<p>Synopsis\n<p>See #new\n<p>Description\n"],["coerce","URI::Generic","URI/Generic.html#method-i-coerce","(oth)","<p>Args\n<p>v &mdash; URI or String\n\n<p>Description\n"],["component","URI::Generic","URI/Generic.html#method-i-component","()","<p>Components of the URI in the order.\n"],["component","URI::Generic","URI/Generic.html#method-c-component","()","<p>Components of the URI in the order.\n"],["component_ary","URI::Generic","URI/Generic.html#method-i-component_ary","()","<p>returns an Array of the components defined from the COMPONENT Array\n"],["decode","URI::Escape","URI/Escape.html#method-i-decode","(*arg)",""],["decode_www_form","URI","URI.html#method-c-decode_www_form","(str, enc=Encoding::UTF_8, separator: '&', use__charset_: false, isindex: false)","<p>Decode URL-encoded form data from given <code>str</code>.\n<p>This decodes application/x-www-form-urlencoded data and returns …\n"],["decode_www_form_component","URI","URI.html#method-c-decode_www_form_component","(str, enc=Encoding::UTF_8)","<p>Decode given <code>str</code> of URL-encoded form data.\n<p>This decodes + to SP.\n<p>See URI.encode_www_form_component, URI.decode_www_form …\n"],["default_port","URI::Generic","URI/Generic.html#method-c-default_port","()","<p>Returns default port\n"],["default_port","URI::Generic","URI/Generic.html#method-i-default_port","()","<p>Returns default port\n"],["dn","URI::LDAP","URI/LDAP.html#method-i-dn","()","<p>returns dn.\n"],["dn=","URI::LDAP","URI/LDAP.html#method-i-dn-3D","(val)","<p>setter for dn <code>val</code>\n"],["encode","URI::Escape","URI/Escape.html#method-i-encode","(*arg)",""],["encode_www_form","URI","URI.html#method-c-encode_www_form","(enum, enc=nil)","<p>Generate URL-encoded form data from given <code>enum</code>.\n<p>This generates application/x-www-form-urlencoded data …\n"],["encode_www_form_component","URI","URI.html#method-c-encode_www_form_component","(str, enc=nil)","<p>Encode given <code>str</code> to URL-encoded form data.\n<p>This method doesn’t convert *, -, ., 0-9, A-Z, _, a-z, but …\n"],["eql?","URI::Generic","URI/Generic.html#method-i-eql-3F","(oth)",""],["escape","URI::Escape","URI/Escape.html#method-i-escape","(*arg)","<p>Synopsis\n\n<pre>URI.escape(str [, unsafe])</pre>\n<p>Args\n"],["escape","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-escape","(str, unsafe = @regexp[:UNSAFE])","<p>Args\n<p>str &mdash; String to make safe\n<p>unsafe &mdash; Regexp to apply. Defaults to self.regexp\n"],["extensions","URI::LDAP","URI/LDAP.html#method-i-extensions","()","<p>returns extensions.\n"],["extensions=","URI::LDAP","URI/LDAP.html#method-i-extensions-3D","(val)","<p>setter for extensions <code>val</code>\n"],["extract","URI","URI.html#method-c-extract","(str, schemes = nil, &block)","<p>Synopsis\n\n<pre>URI::extract(str[, schemes][,&amp;blk])</pre>\n<p>Args\n"],["extract","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-extract","(str, schemes = nil)","<p>Args\n<p>str &mdash; String to search\n<p>schemes &mdash; Patterns to apply to <code>str</code>\n"],["filter","URI::LDAP","URI/LDAP.html#method-i-filter","()","<p>returns filter.\n"],["filter=","URI::LDAP","URI/LDAP.html#method-i-filter-3D","(val)","<p>setter for filter <code>val</code>\n"],["find_proxy","URI::Generic","URI/Generic.html#method-i-find_proxy","()","<p>returns a proxy URI. The proxy URI is obtained from environment variables\nsuch as http_proxy, ftp_proxy …\n"],["fragment=","URI::Generic","URI/Generic.html#method-i-fragment-3D","(v)","<p>check the fragment <code>v</code> component against the URI::Parser Regexp\nfor :FRAGMENT\n<p>Args\n<p>v &mdash; String\n"],["hash","URI::Generic","URI/Generic.html#method-i-hash","()",""],["headers=","URI::MailTo","URI/MailTo.html#method-i-headers-3D","(v)","<p>setter for headers <code>v</code>\n"],["hierarchical?","URI::Generic","URI/Generic.html#method-i-hierarchical-3F","()","<p>Checks if URI has a path\n"],["hierarchical?","URI::LDAP","URI/LDAP.html#method-i-hierarchical-3F","()","<p>Checks if URI has a path For URI::LDAP this will return <code>false</code>\n"],["host=","URI::Generic","URI/Generic.html#method-i-host-3D","(v)","<p>Args\n<p>v &mdash; String\n\n<p>Description\n"],["hostname","URI::Generic","URI/Generic.html#method-i-hostname","()","<p>extract the host part of the URI and unwrap brackets for IPv6 addresses.\n<p>This method is same as URI::Generic#host …\n"],["hostname=","URI::Generic","URI/Generic.html#method-i-hostname-3D","(v)","<p>set the host part of the URI as the argument with brackets for IPv6\naddresses.\n<p>This method is same as …\n"],["inspect","URI::Generic","URI/Generic.html#method-i-inspect","()",""],["inspect","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-inspect","()",""],["join","URI","URI.html#method-c-join","(*str)","<p>Synopsis\n\n<pre>URI::join(str[, str, ...])</pre>\n<p>Args\n"],["join","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-join","(*uris)","<p>Args\n<p>uris &mdash; an Array of Strings\n\n<p>Description\n"],["make_regexp","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-make_regexp","(schemes = nil)","<p>returns Regexp that is default self.regexp, unless <code>schemes</code> is\nprovided. Then it is a Regexp.union with …\n"],["merge","URI::Generic","URI/Generic.html#method-i-merge","(oth)","<p>Args\n<p>oth &mdash; URI or String\n\n<p>Description\n"],["merge!","URI::Generic","URI/Generic.html#method-i-merge-21","(oth)","<p>Args\n<p>oth &mdash; URI or String\n\n<p>Description\n"],["new","URI::FTP","URI/FTP.html#method-c-new","(scheme, userinfo, host, port, registry, path, opaque, query, fragment, parser = nil, arg_check = false)","<p>Description\n<p>Creates a new URI::FTP object from generic URL components with no syntax\nchecking.\n<p>Unlike build(), …\n"],["new","URI::Generic","URI/Generic.html#method-c-new","(scheme, userinfo, host, port, registry, path, opaque, query, fragment, parser = DEFAULT_PARSER, arg_check = false)","<p>Args\n<p>scheme &mdash; Protocol scheme, i.e. ‘http’,‘ftp’,‘mailto’ and so on.\n<p>userinfo &mdash; User name and password, i.e. …\n"],["new","URI::HTTP","URI/HTTP.html#method-c-new","(*arg)","<p>Description\n<p>Create a new URI::HTTP object from generic URI components as per RFC 2396.\nNo HTTP-specific …\n"],["new","URI::LDAP","URI/LDAP.html#method-c-new","(*arg)","<p>Description\n<p>Create a new URI::LDAP object from generic URI components as per RFC 2396.\nNo LDAP-specific …\n"],["new","URI::MailTo","URI/MailTo.html#method-c-new","(*arg)","<p>Description\n<p>Creates a new URI::MailTo object from generic URL components with no syntax\nchecking.\n<p>This …\n"],["new","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-c-new","(opts = {})","<p>Synopsis\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">URI</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Parser</span>.<span class=\"ruby-identifier\">new</span>([<span class=\"ruby-identifier\">opts</span>])\n</pre>\n<p>Args\n"],["normalize","URI::Generic","URI/Generic.html#method-i-normalize","()","<p>Returns normalized URI\n"],["normalize!","URI::Generic","URI/Generic.html#method-i-normalize-21","()","<p>Destructive version of #normalize\n"],["opaque=","URI::Generic","URI/Generic.html#method-i-opaque-3D","(v)","<p>Args\n<p>v &mdash; String\n\n<p>Description\n"],["parse","URI","URI.html#method-c-parse","(uri)","<p>Synopsis\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">URI</span><span class=\"ruby-operator\">::</span><span class=\"ruby-identifier\">parse</span>(<span class=\"ruby-identifier\">uri_str</span>)\n</pre>\n<p>Args\n"],["parse","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-parse","(uri)","<p>Args\n<p>uri &mdash; String\n\n<p>Description\n"],["parser","URI::Generic","URI/Generic.html#method-i-parser","()","<p>returns the parser to be used.\n<p>Unless a URI::Parser is defined, then DEFAULT_PARSER is used.\n"],["password","URI::Generic","URI/Generic.html#method-i-password","()","<p>returns the password component\n"],["password=","URI::Generic","URI/Generic.html#method-i-password-3D","(password)","<p>Args\n<p>v &mdash; String\n\n<p>Description\n"],["path","URI::FTP","URI/FTP.html#method-i-path","()","<p>Returns the path from an FTP URI.\n<p>RFC 1738 specifically states that the path for an FTP URI does not include\n…\n"],["path=","URI::Generic","URI/Generic.html#method-i-path-3D","(v)","<p>Args\n<p>v &mdash; String\n\n<p>Description\n"],["port=","URI::Generic","URI/Generic.html#method-i-port-3D","(v)","<p>Args\n<p>v &mdash; String\n\n<p>Description\n"],["query=","URI::Generic","URI/Generic.html#method-i-query-3D","(v)","<p>Args\n<p>v &mdash; String\n\n<p>Description\n"],["regexp","URI","URI.html#method-c-regexp","(schemes = nil)","<p>Synopsis\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">URI</span><span class=\"ruby-operator\">::</span><span class=\"ruby-identifier\">regexp</span>([<span class=\"ruby-identifier\">match_schemes</span>])\n</pre>\n<p>Args\n"],["registry=","URI::Generic","URI/Generic.html#method-i-registry-3D","(v)",""],["relative?","URI::Generic","URI/Generic.html#method-i-relative-3F","()","<p>Checks if URI is relative\n"],["request_uri","URI::HTTP","URI/HTTP.html#method-i-request_uri","()","<p>Description\n<p>Returns the full path for an HTTP request, as required by Net::HTTP::Get.\n<p>If the URI contains …\n"],["route_from","URI::Generic","URI/Generic.html#method-i-route_from","(oth)","<p>Args\n<p>oth &mdash; URI or String\n\n<p>Description\n"],["route_to","URI::Generic","URI/Generic.html#method-i-route_to","(oth)","<p>Args\n<p>oth &mdash; URI or String\n\n<p>Description\n"],["scheme=","URI::Generic","URI/Generic.html#method-i-scheme-3D","(v)","<p>Args\n<p>v &mdash; String\n\n<p>Description\n"],["scheme_list","URI","URI.html#method-c-scheme_list","()","<p>Returns a Hash of the defined schemes\n"],["scope","URI::LDAP","URI/LDAP.html#method-i-scope","()","<p>returns scope.\n"],["scope=","URI::LDAP","URI/LDAP.html#method-i-scope-3D","(val)","<p>setter for scope <code>val</code>\n"],["select","URI::Generic","URI/Generic.html#method-i-select","(*components)","<p>Args\n<p>components &mdash; Multiple Symbol arguments defined in URI::HTTP\n\n<p>Description\n"],["set_attributes","URI::LDAP","URI/LDAP.html#method-i-set_attributes","(val)","<p>private setter for attributes <code>val</code>\n"],["set_dn","URI::LDAP","URI/LDAP.html#method-i-set_dn","(val)","<p>private setter for dn <code>val</code>\n"],["set_extensions","URI::LDAP","URI/LDAP.html#method-i-set_extensions","(val)","<p>private setter for extensions <code>val</code>\n"],["set_filter","URI::LDAP","URI/LDAP.html#method-i-set_filter","(val)","<p>private setter for filter <code>val</code>\n"],["set_headers","URI::MailTo","URI/MailTo.html#method-i-set_headers","(v)","<p>private setter for headers <code>v</code>\n"],["set_host","URI::Generic","URI/Generic.html#method-i-set_host","(v)","<p>protected setter for the host component <code>v</code>\n<p>see also URI::Generic.host=\n"],["set_opaque","URI::Generic","URI/Generic.html#method-i-set_opaque","(v)","<p>protected setter for the opaque component <code>v</code>\n<p>see also URI::Generic.opaque=\n"],["set_password","URI::Generic","URI/Generic.html#method-i-set_password","(v)","<p>protected setter for the password component <code>v</code>\n<p>see also URI::Generic.password=\n"],["set_path","URI::FTP","URI/FTP.html#method-i-set_path","(v)","<p>Private setter for the path of the URI::FTP\n"],["set_path","URI::Generic","URI/Generic.html#method-i-set_path","(v)","<p>protected setter for the path component <code>v</code>\n<p>see also URI::Generic.path=\n"],["set_port","URI::Generic","URI/Generic.html#method-i-set_port","(v)","<p>protected setter for the port component <code>v</code>\n<p>see also URI::Generic.port=\n"],["set_scheme","URI::Generic","URI/Generic.html#method-i-set_scheme","(v)","<p>protected setter for the scheme component <code>v</code>\n<p>see also URI::Generic.scheme=\n"],["set_scope","URI::LDAP","URI/LDAP.html#method-i-set_scope","(val)","<p>private setter for scope <code>val</code>\n"],["set_to","URI::MailTo","URI/MailTo.html#method-i-set_to","(v)","<p>private setter for to <code>v</code>\n"],["set_typecode","URI::FTP","URI/FTP.html#method-i-set_typecode","(v)","<p>Private setter for the typecode <code>v</code>\n<p>see also URI::FTP.typecode=\n"],["set_user","URI::Generic","URI/Generic.html#method-i-set_user","(v)","<p>protected setter for the user component <code>v</code>\n<p>see also URI::Generic.user=\n"],["set_userinfo","URI::Generic","URI/Generic.html#method-i-set_userinfo","(user, password = nil)","<p>protect setter for the <code>user</code> component, and\n<code>password</code> if available. (with validation)\n<p>see also URI::Generic.userinfo= …\n"],["split","URI","URI.html#method-c-split","(uri)","<p>Synopsis\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">URI</span><span class=\"ruby-operator\">::</span><span class=\"ruby-identifier\">split</span>(<span class=\"ruby-identifier\">uri</span>)\n</pre>\n<p>Args\n"],["split","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-split","(uri)","<p>Returns a split URI against regexp\n"],["to=","URI::MailTo","URI/MailTo.html#method-i-to-3D","(v)","<p>setter for to <code>v</code>\n"],["to_mailtext","URI::MailTo","URI/MailTo.html#method-i-to_mailtext","()","<p>Returns the RFC822 e-mail text equivalent of the URL, as a String.\n<p>Example:\n\n<pre>require 'uri'\n\nuri = URI.parse(&quot;mailto:ruby-list@ruby-lang.org?Subject=subscribe&amp;cc=myaddr&quot;) ...</pre>\n"],["to_rfc822text","URI::MailTo","URI/MailTo.html#method-i-to_rfc822text","()",""],["to_s","URI::FTP","URI/FTP.html#method-i-to_s","()","<p>Returns a String representation of the URI::FTP\n"],["to_s","URI::Generic","URI/Generic.html#method-i-to_s","()","<p>Constructs String from URI\n"],["to_s","URI::MailTo","URI/MailTo.html#method-i-to_s","()","<p>Constructs String from URI\n"],["typecode=","URI::FTP","URI/FTP.html#method-i-typecode-3D","(typecode)","<p>Args\n<p>v &mdash; String\n\n<p>Description\n"],["unescape","URI::Escape","URI/Escape.html#method-i-unescape","(*arg)","<p>Synopsis\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">URI</span>.<span class=\"ruby-identifier\">unescape</span>(<span class=\"ruby-identifier\">str</span>)\n</pre>\n<p>Args\n"],["unescape","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-unescape","(str, escaped = @regexp[:ESCAPED])","<p>Args\n<p>str &mdash; String to remove escapes from\n<p>unsafe &mdash; Regexp to apply. Defaults to self.regexp\n"],["user","URI::Generic","URI/Generic.html#method-i-user","()","<p>returns the user component\n"],["user=","URI::Generic","URI/Generic.html#method-i-user-3D","(user)","<p>Args\n<p>v &mdash; String\n\n<p>Description\n"],["userinfo","URI::Generic","URI/Generic.html#method-i-userinfo","()","<p>returns the userinfo, either as ‘user’ or ‘user:password’\n"],["userinfo=","URI::Generic","URI/Generic.html#method-i-userinfo-3D","(userinfo)","<p>Sets userinfo, argument is string like ‘name:pass’\n"]]}}